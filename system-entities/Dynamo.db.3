{"_id":"59aa7b4dd5faa4219026bab0","code":"\r\n\t\t\tvar options,\r\n\t\t\t\tquery = {},\r\n\t\t\t\tself = this,\r\n\t\t\t\targs = this.args,\r\n\t\t\t\tentity = args.entityName;\r\n\t\t\tif (this.args && this.args.count) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\tlimit: this.args.count,\r\n\t\t\t\t\tsort: this.args.sort || {\r\n\t\t\t\t\t\t_id: -1\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tif (this.args._id)\r\n\t\t\t\t\tif (this.args.prev) {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$gt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\toptions.sort._id = 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$lt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tif (this.args.query)\r\n\t\t\t\t\t_.assign(query, this.libs.convertFilter(this.args.query));\r\n\t\t\t}\r\n\t\t\tthis.entityRepo.get(entity,query, options, function(er, x) {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tvar result = !args.full\r\n\t\t\t\t\t? x.map(function(z) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t_id: z._id,\r\n\t\t\t\t\t\t\t\tdisplayLabel: z[args.entityLabel]\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t: x;\r\n\t\t\t\tif (!args.count) callback(null, result);\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (query._id) delete query._id;\r\n\t\t\t\t\tself.entityRepo.count(entity, query, function(er, count) {\r\n\t\t\t\t\t\tcallback(er, {\r\n\t\t\t\t\t\t\titems: result,\r\n\t\t\t\t\t\t\ttotal: count\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t","title":"Lists Entities per query","uid":"LIST_ENTITY_GENERIC","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":1}
{"_id":"59aa7b4dd5faa4219026bab3","code":"\r\n\t\t\tvar options,\r\n\t\t\t\tquery = {},\r\n\t\t\t\tself = this,\r\n\t\t\t\targs = this.args,\r\n\t\t\t\tentity = '_0Process';\r\n\t\t\tif (this.args && this.args.count) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\tlimit: this.args.count,\r\n\t\t\t\t\tsort: this.args.sort || {\r\n\t\t\t\t\t\t_id: -1\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tif (this.args._id)\r\n\t\t\t\t\tif (this.args.prev) {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$gt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\toptions.sort._id = 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$lt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tif (this.args.query)\r\n\t\t\t\t\t_.assign(query, this.libs.convertFilter(this.args.query));\r\n\t\t\t}\r\n\t\t\tthis.entityRepo.getProcess(query, options, function(er, x) {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tvar result = !args.full\r\n\t\t\t\t\t? x.map(function(z) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t_id: z._id,\r\n\t\t\t\t\t\t\t\tdisplayLabel: z.title\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t: x;\r\n\t\t\t\tif (!args.count) callback(null, result);\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (query._id) delete query._id;\r\n\t\t\t\t\tself.entityRepo.count(entity, query, function(er, count) {\r\n\t\t\t\t\t\tcallback(er, {\r\n\t\t\t\t\t\t\titems: result,\r\n\t\t\t\t\t\t\ttotal: count\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t","title":"Lists processes","uid":"LIST_PROCESSES","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":2}
{"_id":"59aa7b4dd5faa4219026bab2","code":"\r\n\t\t\tvar options,\r\n\t\t\t\tquery = {},\r\n\t\t\t\tself = this,\r\n\t\t\t\targs = this.args,\r\n\t\t\t\tentity = '_0AsyncValidator';\r\n\t\t\tif (this.args && this.args.count) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\tlimit: this.args.count,\r\n\t\t\t\t\tsort: this.args.sort || {\r\n\t\t\t\t\t\t_id: -1\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tif (this.args._id)\r\n\t\t\t\t\tif (this.args.prev) {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$gt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\toptions.sort._id = 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$lt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tif (this.args.query)\r\n\t\t\t\t\t_.assign(query, this.libs.convertFilter(this.args.query));\r\n\t\t\t}\r\n\t\t\tthis.entityRepo.getAsyncValidator(query, options, function(er, x) {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tvar result = !args.full\r\n\t\t\t\t\t? x.map(function(z) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t_id: z._id,\r\n\t\t\t\t\t\t\t\tdisplayLabel: z.title\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t: x;\r\n\t\t\t\tif (!args.count) callback(null, result);\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (query._id) delete query._id;\r\n\t\t\t\t\tself.entityRepo.count(entity, query, function(er, count) {\r\n\t\t\t\t\t\tcallback(er, {\r\n\t\t\t\t\t\t\titems: result,\r\n\t\t\t\t\t\t\ttotal: count\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t","title":"Lists async validators","uid":"LIST_ASYNC_VALIDATORS","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":3}
{"_id":"59aa7b4dd5faa4219026bab4","code":"\r\n\t\t\tvar options,\r\n\t\t\t\tquery = {},\r\n\t\t\t\tself = this,\r\n\t\t\t\targs = this.args,\r\n\t\t\t\tentity = '_0Lib';\r\n\t\t\tif (this.args && this.args.count) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\tlimit: this.args.count,\r\n\t\t\t\t\tsort: this.args.sort || {\r\n\t\t\t\t\t\t_id: -1\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tif (this.args._id)\r\n\t\t\t\t\tif (this.args.prev) {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$gt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\toptions.sort._id = 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$lt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tif (this.args.query)\r\n\t\t\t\t\t_.assign(query, this.libs.convertFilter(this.args.query));\r\n\t\t\t}\r\n\t\t\tthis.entityRepo.getLib(query, options, function(er, x) {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tvar result = !args.full\r\n\t\t\t\t\t? x.map(function(z) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t_id: z._id,\r\n\t\t\t\t\t\t\t\tdisplayLabel: z.uid\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t: x;\r\n\t\t\t\tif (!args.count) callback(null, result);\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (query._id) delete query._id;\r\n\t\t\t\t\tself.entityRepo.count(entity, query, function(er, count) {\r\n\t\t\t\t\t\tcallback(er, {\r\n\t\t\t\t\t\t\titems: result,\r\n\t\t\t\t\t\t\ttotal: count\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t","title":"Lists libs","uid":"LIST_LIBS","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":4}
{"_id":"59aa7b4dd5faa4219026bab1","code":"\r\n\t\t\tvar options,\r\n\t\t\t\tquery = {},\r\n\t\t\t\tself = this,\r\n\t\t\t\targs = this.args,\r\n\t\t\t\tentity = '_0Processor';\r\n\t\t\tif (this.args && this.args.count) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\tlimit: this.args.count,\r\n\t\t\t\t\tsort: this.args.sort || {\r\n\t\t\t\t\t\t_id: -1\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tif (this.args._id)\r\n\t\t\t\t\tif (this.args.prev) {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$gt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\toptions.sort._id = 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$lt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tif (this.args.query)\r\n\t\t\t\t\t_.assign(query, this.libs.convertFilter(this.args.query));\r\n\t\t\t}\r\n\t\t\tthis.entityRepo.getProcessor(query, options, function(er, x) {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tvar result = !args.full\r\n\t\t\t\t\t? x.map(function(z) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t_id: z._id,\r\n\t\t\t\t\t\t\t\tdisplayLabel: z.title\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t: x;\r\n\t\t\t\tif (!args.count) callback(null, result);\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (query._id) delete query._id;\r\n\t\t\t\t\tself.entityRepo.count(entity, query, function(er, count) {\r\n\t\t\t\t\t\tcallback(er, {\r\n\t\t\t\t\t\t\titems: result,\r\n\t\t\t\t\t\t\ttotal: count\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t","title":"Lists processors","uid":"LIST_PROCESSORS","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":5}
{"_id":"59aa7b4dd5faa4219026bab6","code":"callback(null,Object.keys(this.constants.ELEMENTTYPE).map(function(x){return {_id:x,displayLabel:x}; })); ","title":"Lists element types","uid":"LIST_ELEMENT_TYPES","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":6}
{"_id":"59aa7b4dd5faa4219026bab5","code":"var self=this;callback(null,Object.keys(this.constants.INPUTTYPE).map(function(x){return {_id:self.constants.INPUTTYPE[x],displayLabel:self.constants.INPUTTYPE[x]}; }));","title":"Lists input types","uid":"LIST_INPUT_TYPES","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":7}
{"_id":"59aa7b4dd5faa4219026bab8","code":"\r\n\t\t\tthis.libs.isAuthorized.call(this, er => {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tthis.entityRepo.saveProcess(\r\n\t\t\t\t\tthis.args.process,\r\n\t\t\t\t\t{ retrieve: true },\r\n\t\t\t\t\t(er, proc) => {\r\n\t\t\t\t\t\tif (er) return callback(er);\r\n\t\t\t\t\t\tif (!this.args.createClaim)\r\n\t\t\t\t\t\t\treturn callback(\r\n\t\t\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t\t\t`Saved ${this.args.process.title}'`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\tif (this.args.createClaim) {\r\n\t\t\t\t\t\t\tlet inf = this.entityRepo.infrastructure();\r\n\t\t\t\t\t\t\tif (!inf || !inf.userManager)\r\n\t\t\t\t\t\t\t\treturn debug(\r\n\t\t\t\t\t\t\t\t\t\"infrastructure not available for create process\"\r\n\t\t\t\t\t\t\t\t), callback(\r\n\t\t\t\t\t\t\t\t\tnew Error(\"infrastructure is not available\")\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tif (!this.args.process._id) {\r\n\t\t\t\t\t\t\t\tlet _processors = proc.steps.reduce(\r\n\t\t\t\t\t\t\t\t\t(sum, x, index) => {\r\n\t\t\t\t\t\t\t\t\t\treturn x.processors.reduce((o, v) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn o.push(v), o;\r\n\t\t\t\t\t\t\t\t\t\t}, sum);\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t[]\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tasync.parallel(\r\n\t\t\t\t\t\t\t\t\t_processors.map(x =>\r\n\t\t\t\t\t\t\t\t\t\tinf.userManager.saveClaim.bind(\r\n\t\t\t\t\t\t\t\t\t\t\tinf.userManager,\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinf.userManager.constants\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.CLAIMS.PROCESSOR,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdescription: x.title,\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: x._id\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\ter => {\r\n\t\t\t\t\t\t\t\t\t\tif (er)\r\n\t\t\t\t\t\t\t\t\t\t\treturn debug(\r\n\t\t\t\t\t\t\t\t\t\t\t\t`an error occurred while attempting to save claims for processes processors ${er.message}`\r\n\t\t\t\t\t\t\t\t\t\t\t), debug(er);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tinf.userManager.getClaims(\r\n\t\t\t\t\t\t\t\t{ value: proc._id },\r\n\t\t\t\t\t\t\t\t(er, claim) => {\r\n\t\t\t\t\t\t\t\t\tif (er)\r\n\t\t\t\t\t\t\t\t\t\treturn debug(\r\n\t\t\t\t\t\t\t\t\t\t\t\"error occurred while querying claims\"\r\n\t\t\t\t\t\t\t\t\t\t), callback(er);\r\n\t\t\t\t\t\t\t\t\tif (!claim || !claim.length)\r\n\t\t\t\t\t\t\t\t\t\treturn inf.userManager.saveClaim(\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinf.userManager.constants\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.CLAIMS.PROCESS,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdescription: `${proc.title}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: proc._id\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\ter => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (er) return callback(er);\r\n\t\t\t\t\t\t\t\t\t\t\t\tcallback(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t`Successfully saved '${proc.title}' and claim`\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\t\treturn callback(\r\n\t\t\t\t\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t\t\t\t\t`Saved '${this.args.process.title}'`\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t","title":"Create Process","uid":"CREATE_PROCESS","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":8}
{"_id":"59aa7b4dd5faa4219026bab9","code":"\r\n\r\n\t\t\tthis.libs.isAuthorized.call(this, er => {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tthis.entityRepo.saveProcessor(this.args.entity,{retrieve:true}, (er,_p)=>{\r\n\t\t\t\t    if(er) return callback(er);\r\n\t\t\t\t    const success=()=>callback(null,{message:`Successfully saved ${_p.title}`});\r\n\t\t\t\t    if(this.args.entity.createClaim){\r\n\t\t\t\t        let um=this.entityRepo.infrastructure().userManager;\r\n\t\t\t\t        um.getClaims({value:_p._id.toString()},(er,claims)=>{\r\n\t\t\t\t            if(!er && !claims.length){\r\n\t\t\t\t                return um.saveClaim({type:um.constants.CLAIMS.PROCESSOR,description:_p.title,value:_p._id.toString()},(er)=>{\r\n\t\t\t\t                    if(!er){\r\n\t\t\t\t                        return callback(null,{message:`Successfully saved ${_p.title} and Claim`});\r\n\t\t\t\t                    }\r\n\t\t\t\t                    return success();\r\n\t\t\t\t                });\r\n\t\t\t\t            }\r\n\t\t\t\t            return success();\r\n\t\t\t\t        })\r\n\t\t\t\t        return;\r\n\t\t\t\t    }\r\n\t\t\t\t    \r\n\t\t\t\t   return success();\r\n\t\t\t\t    \r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\r\n\t\t","title":"Create or Edit Processor","uid":"CREATE_PROCESSOR","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":9}
{"_id":"59aa7b4dd5faa4219026bab7","code":"\r\n\t\t\tlet query = this.args._id\r\n\t\t\t\t? {\r\n\t\t\t\t\t\t$or: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t_id: this.args._id\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuid: this.args._id\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t: null;\r\n\t\t\tif (query)\r\n\t\t\t\t this.entityRepo.getProcess(\r\n\t\t\t\t\tquery,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfull: true,\r\n\t\t\t\t\t\tnoTransformaton: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction(er, proc) {\r\n\t\t\t\t\t\tif (er) return callback(er);\r\n\r\n\t\t\t\t\t\tcallback(\r\n\t\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t\tproc.length\r\n\t\t\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t\t\tprocess: proc[0]\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\telse\r\n\t\t\tcallback(null, null);\r\n\t\t","title":"Fetch Process","uid":"FETCH_PROCESS","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":10}
{"_id":"59aa7b4dd5faa4219026baba","code":"\r\n\t\t\tthis.libs.isAuthorized.call(this, er => {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tthis.entityRepo.saveLib(this.args.entity, callback);\r\n\t\t\t});\r\n\t\t","title":"Create or Edit Lib","uid":"CREATE_LIB","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":11}
{"_id":"59aa7b4dd5faa4219026babb","code":"\r\n\t\t\tthis.entityRepo.get(\r\n\t\t\t\tthis.args.entityName,\r\n\t\t\t\t{\r\n\t\t\t\t\t_id: this.args._id\r\n\t\t\t\t},\r\n\t\t\t\tcallback\r\n\t\t\t);\r\n\t\t","title":"Fetch a single Entity","uid":"FETCH_ENTITY","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":12}
{"_id":"59aa7b4dd5faa4219026babd","code":"\r\n\t\t\tvar self = this;\r\n\t\t\tthis.entityRepo.getSchemas(\r\n\t\t\t\tfunction(er, types) {\r\n\t\t\t\t\tif (er) return callback(er);\r\n\t\t\t\t\tvar every = this.libs.convertToSelectableList(types);\r\n\t\t\t\t\tvar total = every.length;\r\n\t\t\t\t\tif (self.args.count) {\r\n\t\t\t\t\t\tevery = every.sort((x, y) => {\r\n\t\t\t\t\t\t\treturn x._id - y._id;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tvar index = self.args._id\r\n\t\t\t\t\t\t\t? every.indexOf(\r\n\t\t\t\t\t\t\t\t\tevery.filter(x => x._id == self.args._id)[0]\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t: 0;\r\n\t\t\t\t\t\t\tindex=index > 0 ?index+1:0;\r\n\t\t\t\t\t\tevery = every.slice(\r\n\t\t\t\t\t\t\tindex,\r\n\t\t\t\t\t\t\tindex + self.args.count > every.length\r\n\t\t\t\t\t\t\t\t? index + (every.length - index)\r\n\t\t\t\t\t\t\t\t: index + self.args.count\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tcallback(null, {\r\n\t\t\t\t\t\t\titems: every,\r\n\t\t\t\t\t\t\ttotal: total\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback(null, every);\r\n\t\t\t\t}.bind(this)\r\n\t\t\t);\r\n\t\t","title":"List schemas","uid":"LIST_ENTITY_SCHEMAS","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":13}
{"_id":"59aa7b4dd5faa4219026babe","code":"\r\n\t\t\tvar self = this;\r\n\t\t\tthis.entityRepo.getSchema(this.args._id, function(er, code) {\r\n\t\t\t\tif (er) return callback(er);\r\n\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tchoice: \"Code\",\r\n\t\t\t\t\tname: self.args._id,\r\n\t\t\t\t\ttemplate: {\r\n\t\t\t\t\t\tvalue: JSON.stringify(code, null, \" \")\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tcallback(null, result);\r\n\t\t\t});\r\n\t\t","title":"Fetch schema","uid":"FETCH_SCHEMA","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":14}
{"_id":"59aa7b4dd5faa4219026babc","code":"\nlet commands= this.libs.menuFilters;\nif(!commands||!Array.prototype.isPrototypeOf(commands) ||!commands.length)\ncallback(null,this.args.menu);\n\n\ncommands[0]=commands[0].bind(this,this.args.menu);\n\nasync.waterfall(commands.map(command=>{\n    return command.bind(this);\n}),(er,menu)=>{\n    if(er) return callback(er);\n    \n    callback(null,menu);\n});\n","title":"Menu Filter","uid":"MENU_FILTER","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919136},"$loki":15}
{"_id":"59aa7b4dd5faa4219026bac0","code":"\r\n\t\t\tthis.libs.isAuthorized.call(this, er => {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tthis.entityRepo.updateSchema(\r\n\t\t\t\t\tthis.args.entity.name,\r\n\t\t\t\t\tJSON.parse(this.args.entity.template.value),\r\n\t\t\t\t\tcallback\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t","title":"Update Schema","uid":"UPDATE_SCHEMA","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919137},"$loki":16}
{"_id":"59aa7b4dd5faa4219026babf","code":"\r\n\t\t\tfunction resolve(type, data) {\r\n\t\t\t\tfunction parsePropertyWithName(template, x) {\r\n\t\t\t\t\tif (x.propertyType == constants.ENTITYTYPE.OBJECT) {\r\n\t\t\t\t\t\ttemplate[\r\n\t\t\t\t\t\t\tx.propertyName || x.props.propertyName\r\n\t\t\t\t\t\t] = parse(x.props.properties);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (x.propertyType == constants.ENTITYTYPE.ARRAY) {\r\n\t\t\t\t\t\ttemplate[x.propertyName || x.props.propertyName] = [\r\n\t\t\t\t\t\t\tparse(x.props.properties)\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (x.propertyType == constants.ENTITYTYPE.REFERENCE) {\r\n\t\t\t\t\t\ttemplate[x.propertyName || x.props.propertyName] = {\r\n\t\t\t\t\t\t\ttype: \"ObjectId\",\r\n\t\t\t\t\t\t\tref: x.props.ref\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttemplate[x.propertyName || x.props.propertyName] = {\r\n\t\t\t\t\t\ttype: x.propertyType\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction parsePropertyWithoutName(template, x) {\r\n\t\t\t\t\tif (x.propertyType !== constants.ENTITYTYPE.REFERENCE)\r\n\t\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t\t\"all entity types must have a propertyName except REFERENCE\"\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\ttemplate.type = \"ObjectId\";\r\n\t\t\t\t\ttemplate.ref = x.props.ref;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction parse(data) {\r\n\t\t\t\t\tvar template = {};\r\n\t\t\t\t\tdata.forEach(x => {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tx.propertyName ||\r\n\t\t\t\t\t\t\t(x.props && x.props.propertyName)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tparsePropertyWithName(template, x);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tparsePropertyWithoutName(template, x);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn template;\r\n\t\t\t\t}\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase \"Code\":\r\n\t\t\t\t\t\treturn JSON.parse(data);\r\n\t\t\t\t\tcase \"Gui\":\r\n\t\t\t\t\t\treturn parse(data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar data = resolve(\r\n\t\t\t\t\tthis.args.entity.choice,\r\n\t\t\t\t\tthis.args.entity.template.value\r\n\t\t\t\t),\r\n\t\t\t\tself = this;\r\n\t\t\tdebug(\r\n\t\t\t\t\"entity to create--------:\\n\" +\r\n\t\t\t\t\tJSON.stringify(data) +\r\n\t\t\t\t\t\"\\n-----------:\"\r\n\t\t\t);\r\n\t\t\tthis.libs.isAuthorized.call(this, er => {\r\n\t\t\t\tif (er) return callback(er);\r\n\t\t\t\tthis.entityRepo.createSchema(\r\n\t\t\t\t\tthis.args.entity.name,\r\n\t\t\t\t\tdata,\r\n\t\t\t\t\tfunction(er) {\r\n\t\t\t\t\t\tif (er) return callback(er);\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tself.args.entity.createCRUD &&\r\n\t\t\t\t\t\t\tself.args.entity.displayProperty\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t//create a crud process for this entity.\r\n\t\t\t\t\t\t\tself.libs.createCRUDProcess.call(\r\n\t\t\t\t\t\t\t\tself,\r\n\t\t\t\t\t\t\t\tself.args.entity.name,\r\n\t\t\t\t\t\t\t\tself.args.entity.displayProperty,\r\n\t\t\t\t\t\t\t\tself.args.entity.group,\r\n\t\t\t\t\t\t\t\tself.args.entity.category,\r\n\t\t\t\t\t\t\t\tdata,\r\n\t\t\t\t\t\t\t\tfunction(er, result) {\r\n\t\t\t\t\t\t\t\t\tif (er)\r\n\t\t\t\t\t\t\t\t\t\t//delete what you just created this.entityRepo.deleteSchema()\r\n\t\t\t\t\t\t\t\t\t\treturn debug(\r\n\t\t\t\t\t\t\t\t\t\t\t\"an error occurred while creating schema ..rolling back\"\r\n\t\t\t\t\t\t\t\t\t\t), callback(er);\r\n\r\n\t\t\t\t\t\t\t\t\tcallback(null, result);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcallback(null, \"Successfully created config\");\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t","title":"Create Schema","uid":"CREATE_SCHEMA","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919137},"$loki":17}
{"_id":"59aa7c461d4d711500e2ac6b","code":"debug('creating new Campus...'); \nthis.args.entity.domain=this.args.$user.domain;\nthis.entityRepo.create('Campus',this.args.entity,callback)","title":"Create Campus","uid":"CREATE_Campus_1","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":18}
{"_id":"59aa7c461d4d711500e2ac6c","code":"debug('update Campus...'); \n this.entityRepo.update('Campus',this.args.entity,callback)","title":"Update Campus","uid":"UPDATE_Campus_4","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":19}
{"_id":"59aa81e81d4d711500e2ac72","code":"debug('creating new Faculty...'); \nthis.args.entity.domain=this.args.$user.domain;\nthis.entityRepo.create('Faculty',this.args.entity,callback)","title":"Create Faculty","uid":"CREATE_Faculty_6","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":20}
{"_id":"59aa81e81d4d711500e2ac73","code":"debug('update Faculty...'); \n this.entityRepo.update('Faculty',this.args.entity,callback)","title":"Update Faculty","uid":"UPDATE_Faculty_10","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":21}
{"_id":"59aa83051d4d711500e2ac77","code":"debug('creating new Department...'); \nthis.args.entity.domain=this.args.$user.domain;\nthis.entityRepo.create('Department',this.args.entity,callback)","title":"Create Department","uid":"CREATE_Department_3","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":22}
{"_id":"59aa83051d4d711500e2ac78","code":"debug('update Department...'); \ndelete this.args.entity.domain\nthis.entityRepo.update('Department',this.args.entity,callback)","title":"Update Department","uid":"UPDATE_Department_10","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":23}
{"_id":"59aa84291d4d711500e2ac7c","code":"debug('creating new Session...'); \n this.entityRepo.create('Session',this.args.entity,callback)","title":"Create Session","uid":"CREATE_Session_1","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":24}
{"_id":"59aa84291d4d711500e2ac7d","code":"debug('update Session...'); \n this.entityRepo.update('Session',this.args.entity,callback)","title":"Update Session","uid":"UPDATE_Session_9","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":25}
{"_id":"59aa84de1d4d711500e2ac81","code":"debug('creating new ModeOfStudy...'); \n this.entityRepo.create('ModeOfStudy',this.args.entity,callback)","title":"Create ModeOfStudy","uid":"CREATE_ModeOfStudy_1","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":26}
{"_id":"59aa84de1d4d711500e2ac82","code":"debug('update ModeOfStudy...'); \n this.entityRepo.update('ModeOfStudy',this.args.entity,callback)","title":"Update ModeOfStudy","uid":"UPDATE_ModeOfStudy_6","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":27}
{"_id":"59aa85331d4d711500e2ac86","code":"debug('creating new Religion...'); \n this.entityRepo.create('Religion',this.args.entity,callback)","title":"Create Religion","uid":"CREATE_Religion_2","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":28}
{"_id":"59aa85331d4d711500e2ac87","code":"debug('update Religion...'); \n this.entityRepo.update('Religion',this.args.entity,callback)","title":"Update Religion","uid":"UPDATE_Religion_6","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":29}
{"_id":"59aa856a1d4d711500e2ac8b","code":"debug('creating new Relationship...'); \n this.entityRepo.create('Relationship',this.args.entity,callback)","title":"Create Relationship","uid":"CREATE_Relationship_6","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":30}
{"_id":"59aa856a1d4d711500e2ac8c","code":"debug('update Relationship...'); \n this.entityRepo.update('Relationship',this.args.entity,callback)","title":"Update Relationship","uid":"UPDATE_Relationship_5","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":31}
{"_id":"59aa859b1d4d711500e2ac90","code":"debug('creating new State...'); \n this.entityRepo.create('State',this.args.entity,callback)","title":"Create State","uid":"CREATE_State_3","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":32}
{"_id":"59aa859b1d4d711500e2ac91","code":"debug('update State...'); \n this.entityRepo.update('State',this.args.entity,callback)","title":"Update State","uid":"UPDATE_State_4","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":33}
{"_id":"59aa85e61d4d711500e2ac95","code":"debug('creating new SchoolProgramme...'); \n this.entityRepo.create('SchoolProgramme',this.args.entity,callback)","title":"Create SchoolProgramme","uid":"CREATE_SchoolProgramme_6","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":34}
{"_id":"59aa85e61d4d711500e2ac96","code":"debug('update SchoolProgramme...'); \n this.entityRepo.update('SchoolProgramme',this.args.entity,callback)","title":"Update SchoolProgramme","uid":"UPDATE_SchoolProgramme_7","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":35}
{"_id":"59aa865a1d4d711500e2ac9a","code":"debug('creating new ModeOfEntry...'); \n this.entityRepo.create('ModeOfEntry',this.args.entity,callback)","title":"Create ModeOfEntry","uid":"CREATE_ModeOfEntry_8","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":36}
{"_id":"59aa865a1d4d711500e2ac9b","code":"debug('update ModeOfEntry...'); \n this.entityRepo.update('ModeOfEntry',this.args.entity,callback)","title":"Update ModeOfEntry","uid":"UPDATE_ModeOfEntry_7","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":37}
{"_id":"59aa86a41d4d711500e2ac9f","code":"debug('creating new StudentType...'); \n this.entityRepo.create('StudentType',this.args.entity,callback)","title":"Create StudentType","uid":"CREATE_StudentType_7","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":38}
{"_id":"59aa86a41d4d711500e2aca0","code":"debug('update StudentType...'); \n this.entityRepo.update('StudentType',this.args.entity,callback)","title":"Update StudentType","uid":"UPDATE_StudentType_8","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":39}
{"_id":"59aa86db1d4d711500e2aca4","code":"debug('creating new AdmissionType...'); \n this.entityRepo.create('AdmissionType',this.args.entity,callback)","title":"Create AdmissionType","uid":"CREATE_AdmissionType_8","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":40}
{"_id":"59aa86db1d4d711500e2aca5","code":"debug('update AdmissionType...'); \n this.entityRepo.update('AdmissionType',this.args.entity,callback)","title":"Update AdmissionType","uid":"UPDATE_AdmissionType_8","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":41}
{"_id":"59aa87561d4d711500e2aca9","code":"debug('creating new ClearanceDocument...'); \n this.entityRepo.create('ClearanceDocument',this.args.entity,callback)","title":"Create ClearanceDocument","uid":"CREATE_ClearanceDocument_6","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":42}
{"_id":"59aa87561d4d711500e2acaa","code":"debug('update ClearanceDocument...'); \n this.entityRepo.update('ClearanceDocument',this.args.entity,callback)","title":"Update ClearanceDocument","uid":"UPDATE_ClearanceDocument_7","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":43}
{"_id":"59aa87f11d4d711500e2acae","code":"debug('creating new MedicalRecord...'); \n this.entityRepo.create('MedicalRecord',this.args.entity,callback)","title":"Create MedicalRecord","uid":"CREATE_MedicalRecord_2","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":44}
{"_id":"59aa87f11d4d711500e2acaf","code":"debug('update MedicalRecord...'); \n this.entityRepo.update('MedicalRecord',this.args.entity,callback)","title":"Update MedicalRecord","uid":"UPDATE_MedicalRecord_5","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":45}
{"_id":"59aab41df43ed31314c3bb69","code":"debug('creating new Gender...'); \n this.entityRepo.create('Gender',this.args.entity,callback)","title":"Create Gender","uid":"CREATE_Gender_5","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":46}
{"_id":"59aab41df43ed31314c3bb6a","code":"debug('update Gender...'); \n this.entityRepo.update('Gender',this.args.entity,callback)","title":"Update Gender","uid":"UPDATE_Gender_7","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":47}
{"_id":"59aad814f43ed31314c3bb6e","code":"//get the uploaded list from storage and loop over the list.\n//will need to use a web worker if this is too CPU intensive.\n\nlet inf=this.entityRepo.infrastructure(),\nself=this,\nfileUpload=inf.fileUpload,\nfileParser=inf.fileParser,\nthreadPool=inf.threadPool;\ndebug(this.args);\nlet branches={\n    'EXISTING':()=>{\n        let args = this.args.config,\n        studentKind=args.studentKind;\n        \n        this.libs.resolveStudentType(studentKind,this.entityRepo, (er,studentType)=>{\n            if(er) return callback(er);\n            \n            if(studentKind==='UNN_Existing_UNDERGRADUATE_Student_Details'||studentKind==='UNN_Existing_PG_Student_Details'){\n                args.studentDetails.departmentOption=args.studentDetails.departmentOption.areaOfSpecialization;\n            }\n            if(studentKind==='UNN_Existing_UNDERGRADUATE_Student_Details'){\n                //arrange the select set options properly.\n                studentType=args.studentDetails.studentMode;\n                args.studentDetails.modeOfEntry=args.studentDetails.modeOfEntry.value;\n            }\n            \n                let contx={studentKind,studentType};\n                debug(contx);\n                try{\n                     this.libs.convertFileAndSave('UNN_Existing_Student',this.args.config.list,contx,['firstName','surname','middlename','regNo'],(list,fn)=>{\n                        async.parallel(list.map(()=>(this.entityRepo.create.bind(null,studentKind,args.studentDetails))),(er,details)=>{\n                           if(er) return fn(er);\n                           debug('saved everything we need to save.');\n                           debug('will assign and return');\n                           debug(details);\n                           fn(null, list.map((x,index) => {return x.programmeDetails=details[index][0]._id.toString(),x}));\n                        });\n                     }, fileUpload,fileParser,threadPool,this.entityRepo, callback);\n                }catch(e){\n                    debug('synchronous error caught');\n                    callback(e);\n                }\n        });\n        \n\n       \n    },\n    'NEW':()=>{\n        let args=this.args.config,\n        contx={studentType:args.studentType,programmeDetails:args.programmeDetails};\n        this.libs.convertFileAndSave('UNN_Admission_Ticket',args._list,contx,['firstName','surname','middlename','refNo'],null, fileUpload,fileParser,threadPool,this.entityRepo, callback);\n            \n\n    }\n};\n\nif(!fileUpload||!fileParser||!threadPool){\n     debug(`something is undefined ...fileUpload:${!!fileUpload}, fileParser:${!!fileParser}, threadPool:${!!threadPool}`),callback(new Error('Infrastructure has a problem'));\n}\nelse\n\nif(!this.args.config ||(!this.args.config.list && !this.args.config._list)){\n     debug('user didnt upload any file'),callback(new Error('Missing Student data file'));\n}\n else\nbranches[this.args.studentType]();\n\n\n","title":"Upload Admission List","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":48}
{"_id":"59aadad5f43ed31314c3bb73","code":"this.libs.getEntity.call(this,'StudentType','name',callback);","title":"Get Student Types","requiresIdentity":false,"__v":0,"uid":"GET_STUDENTTYPE","meta":{"revision":0,"created":1510640453438,"version":0},"$loki":49}
{"_id":"59aadb12f43ed31314c3bb74","code":"this.libs.getEntity.call(this,'AdmissionType','name',callback);","title":"Get Admission Types","requiresIdentity":true,"__v":0,"uid":"GET_ADMISSIONTYPES","meta":{"revision":0,"created":1510640453438,"version":0},"$loki":50}
{"_id":"59aadb55f43ed31314c3bb75","code":"this.$checkDomain=true;\nthis.libs.getEntity.call(this,'Department','name',callback);","title":"Get Departments","requiresIdentity":true,"__v":0,"uid":"GET_DEPARTMENTS","meta":{"revision":0,"created":1510640453438,"version":0},"$loki":51}
{"_id":"59aadbcff43ed31314c3bb76","code":"this.libs.getEntity.call(this,'ModeOfEntry','name',callback);","title":"Get Mode of Entry","requiresIdentity":true,"__v":0,"uid":"GET_MODEOFENTRY","meta":{"revision":0,"created":1510640453438,"version":0},"$loki":52}
{"_id":"59aadbeef43ed31314c3bb77","code":"this.libs.getEntity.call(this,'Session','name',callback);","title":"Get Sessions","requiresIdentity":true,"__v":0,"uid":"GET_SESSIONS","meta":{"revision":0,"created":1510640453438,"version":0},"$loki":53}
{"_id":"59ab3c5ef43ed31314c3bb7a","code":"debug(this.args);\nthis.entityRepo.get(\"Department\",Object.assign({},this.args.query||{},{domain:this.args.$user.domain}),(er,deps)=>{\n    if(er) return callback(er);\n    if(!deps.length) return callback(null,deps);\n    callback(null,deps.map(x=>({id:x._id,displayLabel:x.name,elements:[this.libs.createElement('areaOfSpecialization','Area of Specialization','',this.constants.ELEMENTTYPE.SELECTSET,{\n        items:x.areasOfSpecialization.map(a=>({id:a._id,displayLabel:a.name}))\n    })]})));\n})","title":"Get Department And Areas of Specialization Set","requiresIdentity":true,"__v":0,"uid":"DEPARTMENTS_AND_AREA","meta":{"revision":0,"created":1510640453438,"version":0},"$loki":54}
{"_id":"59ac17d4645b26264482dabc","code":"debug('creating new UNN_Admission_Ticket...'); \ndebug(this.args.entity);\nthis.entityRepo.create('UNN_Admission_Ticket',this.args.entity,callback)","title":"Create UNN_Admission_Ticket","uid":"CREATE_UNN_Admission_Ticket_5","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":55}
{"_id":"59ac17d4645b26264482dabd","code":"debug('update UNN_Admission_Ticket...'); \n this.entityRepo.update('UNN_Admission_Ticket',this.args.entity,callback)","title":"Update UNN_Admission_Ticket","uid":"UPDATE_UNN_Admission_Ticket_7","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":56}
{"_id":"59ac31467d32fd1a887369c5","code":"this.libs.getEntity.call(this,'UNN_Admission_Ticket','firstName',callback);","title":"Get UNN Admission Tickets","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":57}
{"_id":"59ad4dce9d3cb0351012e83f","code":"debug('creating new UNN_Existing_Student...'); \ndebug(this.args.entity);\n\n        let args = this.args.entity.programmeDetails,\n        studentKind=this.args.entity.studentKind;\n        \n        this.libs.resolveStudentType(studentKind,this.entityRepo,(er,studentType)=>{\n            if(er) return callback(er);\n            \n            if(studentKind==='UNN_Existing_UNDERGRADUATE_Student_Details'||studentKind==='UNN_Existing_PG_Student_Details'){\n                args.departmentOption=args.departmentOption.areaOfSpecialization;\n            }\n            \n            this.entityRepo.create(studentKind,args,(er,{_id})=>{\n                let entity={\n                    firstName:this.args.entity.firstName,\n                    studentType,\n                    surname:this.args.entity.surname,\n                    middlename:this.args.entity.middlename,\n                    regNo:this.args.entity.regNo,\n                    studentKind,\n                    programmeDetails:_id\n                    \n                }\n                this.entityRepo.create('UNN_Existing_Student',entity,callback);\n            });\n        });\n        \n","title":"Create UNN_Existing_Student","uid":"CREATE_UNN_Existing_Student_10","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":58}
{"_id":"59ad4dce9d3cb0351012e840","code":"debug('updating existing UNN_Existing_Student...'); \ndebug(this.args.entity);\n\n        let args = this.args.entity.programmeDetails,\n        action,\n        _studentKind=this.args.entity.studentKind;\n        \n        this.entityRepo.get('UNN_Existing_Student',{_id:this.args.entity._id},{one:true},(er,{studentKind}={})=>{\n            if(er) return callback(er);\n            if(!studentKind) return callback(new Error ('Invalid student'));\n            \n                this.libs.resolveStudentType(_studentKind||studentKind,this.entityRepo,(er,studentType)=>{\n                if(er) return callback(er);\n                \n               \n                if(_studentKind && args){\n                    if( args.departmentOption && ( _studentKind ==='UNN_Existing_UNDERGRADUATE_Student_Details'||_studentKind ==='UNN_Existing_PG_Student_Details')){\n                        args.departmentOption = args.departmentOption.areaOfSpecialization;\n                        if(_studentKind ==='UNN_Existing_UNDERGRADUATE_Student_Details') args.modeOfEntry=args.modeOfEntry.value;\n                    }\n                     if(_studentKind ==studentKind){\n                        action=this.entityRepo.update;\n                    }else{\n                        action=this.entityRepo.create;\n                    }\n                    action(studentKind,args,(er,{_id})=>{\n                    let entity=Object.assign({},this.args.entity,{\n                        studentType,\n                        programmeDetails:_id\n                    });\n                    this.entityRepo.update('UNN_Existing_Student',entity,callback);\n                });\n                }else{\n                    this.entityRepo.update('UNN_Existing_Student',this.args.entity,callback);\n                }\n\n\n            });\n            \n                \n                 \n        })\n\n        \n","title":"Update UNN_Existing_Student","uid":"UPDATE_UNN_Existing_Student_3","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":59}
{"_id":"59ad4dce9d3cb0351012e841","code":"debug('fetching UNN_Existing_Student...;')\nthis.libs.getEntity.call(this,'UNN_Existing_Student','regNo',callback);","title":"Get UNN_Existing_Student","uid":"GET_UNN_Existing_Student_10","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":60}
{"_id":"59ad961132a12538189ad275","code":"\r\n           //debug(this.args);\r\n           debug('fetching UNN_Existing_Student');\r\n\t\t\tthis.entityRepo.get(\r\n\t\t\t\t'UNN_Existing_Student',\r\n\t\t\t\t{\r\n\t\t\t\t\t_id: this.args._id\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t    full:true\r\n\t\t\t\t},\r\n\t\t\t\t(er,student)=>{\r\n\t\t\t\t    if(er) return callback(er);\r\n\t\t\t\t    if(!student.length) return callback(new Error('record does not exist'));\r\n\t\t\t\t    student=student[0];\r\n\t\t\t\t    if(student.studentKind=='UNN_Existing_PG_Student_Details'|| student.studentKind=='UNN_Existing_UNDERGRADUATE_Student_Details')\r\n\t\t\t\t    student.programmeDetails.departmentOption={areaOfSpecialization:student.programmeDetails.departmentOption};\r\n\t\t\t\t    \r\n\t\t\t\t    if(student.studentKind=='UNN_Existing_UNDERGRADUATE_Student_Details')\r\n\t\t\t\t    student.programmeDetails.modeOfEntry={value:student.programmeDetails.modeOfEntry};\r\n\t\t\t\t    \r\n\t\t\t\t    debug(student);\r\n\t\t\t\t    callback(null,student);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t","title":"Fetch UNN_Existing_Student","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":61}
{"_id":"59ade2c0223c1f4ae44b83a2","code":"\n\n//check if this student account has already been created.\n//if it has , return the interim username and password.\n//if it hasnt create the student account with an interim username and password.\nlet decisionTree={\n    NEW:()=>{\n\n        this.libs.verifyStudent.call(this,{\n           studentEntity:'UNN_Student',\n           studentEntityKindClass:'UNN_Admission_Ticket',\n           studentRole:'unn_student',\n           domainUID:/unn/i},callback);\n    },\n    EXISTING:()=>{\n       this.libs.verifyStudent.call(this,{\n           studentEntity:'UNN_Student',\n           studentEntityKindClass:'UNN_Existing_Student',\n           studentRole:'unn_student',\n           domainUID:/unn/i,\n           resolveEntityKind:()=>{\n               return this.entityRepo.get.bind(null,'UNN_Existing_Student',{regNo:this.args.option.regNo,studentType:this.args.studentType}, {full:true});\n           },\n           extendNewStudent:()=>({regNo:this.args.option.regNo,cleared:true})},callback);\n    }\n};\n\ndecisionTree[this.args.studentOption]();","title":"Verify new user for student and return credentials","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":62}
{"_id":"59ae920f0efb6e16acf84bc8","code":"debug('creating new YearOfStudy...'); \n this.entityRepo.create('YearOfStudy',this.args.entity,callback)","title":"Create YearOfStudy","uid":"CREATE_YearOfStudy_2","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":63}
{"_id":"59ae920f0efb6e16acf84bc9","code":"debug('update YearOfStudy...'); \n this.entityRepo.update('YearOfStudy',this.args.entity,callback)","title":"Update YearOfStudy","uid":"UPDATE_YearOfStudy_9","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":64}
{"_id":"59ae920f0efb6e16acf84bca","code":"debug('fetching YearOfStudy...');\nthis.$checkDomain=true;\nthis.libs.getEntity.call(this,'YearOfStudy','name',callback);","title":"Get Year Of Study","uid":"GET_YearOfStudy_5","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":65}
{"_id":"59ae954c0efb6e16acf84bdb","code":"debug('fetching ModeOfStudy...');\nthis.libs.getEntity.call(this,'ModeOfStudy','name',callback);","title":"Get Mode Of Study","requiresIdentity":true,"__v":0,"uid":"GET_MODEOFSTUDY","meta":{"revision":0,"created":1510640453438,"version":0},"$loki":66}
{"_id":"59aed144b874b104e84f3789","code":"debug('creating new UNN_JUPEB_Department...'); \n this.entityRepo.create('UNN_JUPEB_Department',this.args.entity,callback)","title":"Create UNN_JUPEB_Department","uid":"CREATE_UNN_JUPEB_Department_2","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":67}
{"_id":"59aed144b874b104e84f378a","code":"debug('update UNN_JUPEB_Department...'); \n this.entityRepo.update('UNN_JUPEB_Department',this.args.entity,callback)","title":"Update UNN_JUPEB_Department","uid":"UPDATE_UNN_JUPEB_Department_4","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":68}
{"_id":"59aed144b874b104e84f378b","code":"debug('fetching UNN_JUPEB_Department...');\nthis.libs.getEntity.call(this,'UNN_JUPEB_Department','name',callback);","title":"Get UNN_JUPEB_Department","uid":"GET_UNN_JUPEB_Department_10","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":69}
{"_id":"59afb38264d20e4cbcfd9854","code":"this.libs.getStudentProgrammeUI.call(this,callback);","title":"Get Programme Details for Existing Student Set","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":70}
{"_id":"59b103759fcdd93b28dbf322","code":"this.entityRepo.getProcessor({\r\n  uid: {\r\n    $in: ['GET_SESSIONS', 'GET_ADMISSIONTYPES', 'GET_SCHOOLPROGRAMME']\r\n  }\r\n}, (er, list) => {\r\n  if (er) return callback(er);\r\n  if (list.length !== 3) return debug('didnt find all the required processors'), debug(list), callback(new Error('Couldnt find all the processors for these options'));\r\n\r\n  debug(list);\r\n  let processors = list.reduce((sum, x) => {\r\n    return sum[x.uid] = x._id.toString(), sum;\r\n  }, {});\r\n\r\n  debug(JSON.stringify(processors, null, ' '));\r\n\r\n  //debug(this.args.$user);\r\n  \r\n  this.entityRepo.get('StudentType', {domain:this.args.$user.domain}, (er, studentTypes) => {\r\n    if (er) return callback(er);\r\n\r\n   // if (studentTypes.length !== 3) return callback(new Error('Could not find all the requied student types'));\r\n\r\n    this.entityRepo.get('ModeOfEntry',{domain:this.args.$user.domain},(er,modeOfEntries) => {\r\n        if(er) return callback(er);\r\n        \r\n        this.libs.getStudentProgrammeUI.call(this, (er, items) => {\r\n      if (er) return callback(er);\r\n\r\n      let ui = items.map(item => {\r\n\r\n\r\n        //modify ui elements appropriately\r\n        if (/under/i.test(item.id)||/pg/i.test(item.id)) {\r\n          item.elements.filter(x => x.name == 'modeOfStudy' || x.name == 'yearOfStudy').forEach(x => {\r\n              //change mode of study to session.\r\n            if (x.name === 'modeOfStudy') {\r\n              x.name = 'session';\r\n              x.label = \"Session\";\r\n              x.description = '';\r\n              x.args.config.value = processors.GET_SESSIONS;\r\n            }\r\n             //change year of study to admission batch.\r\n            if (x.name === 'yearOfStudy') {\r\n              x.name = 'admissionType';\r\n              x.label = \"Admission Batch\";\r\n              x.description = '';\r\n              x.args.config.value = processors.GET_ADMISSIONTYPES;\r\n            }\r\n          });\r\n          \r\n          if(/under/i.test(item.id)){\r\n              debug('adding mode of entry');\r\n              item.elements.push(this.libs.createElement('modeOfEntry','Mode Of Entry','',this.constants.ELEMENTTYPE.SELECTSET,{\r\n                  items:modeOfEntries\r\n                                    .filter(v => v.group && v.group.filter(z=>z.studentType.toString() == item._id.toString()).length)\r\n                                    .map(u => ({\r\n                                        id: u._id,\r\n                                        displayLabel: u.name,\r\n                                        elements: []\r\n                                    }))\r\n              }));\r\n          }\r\n          if (/pg/i.test(item.id)) {\r\n          item.elements.push(this.libs.createElement('programmeOption', 'Programme', '', this.constants.ELEMENTTYPE.SELECT, {\r\n            type: 'PROCESSOR',\r\n            config: {\r\n              value: processors.GET_SCHOOLPROGRAMME,\r\n              customArgs: JSON.stringify({\r\n                query: {\r\n                  group: 'PG'\r\n                }\r\n              })\r\n            }\r\n          }));\r\n        }\r\n          \r\n        }\r\n\r\n\r\n\r\n          //change the id of the items.\r\n        item.id = item._id;\r\n        return item;\r\n      })\r\n      debug(JSON.stringify(ui, null, ' '));\r\n      callback(null, ui);\r\n    })\r\n        \r\n    });\r\n\r\n    \r\n  })\r\n\r\n\r\n});","title":"Get Programme Details for Admission Tickets","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":71}
{"_id":"59b1051e9fcdd93b28dbf323","code":"debug('fetching School Programmes.');\ndebug(this.args);\nthis.libs.getEntity.call(this,'SchoolProgramme','name',callback);","title":"Get SchoolProgramme","uid":"GET_SCHOOLPROGRAMME","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":72}
{"_id":"59b16937e7fff81c9439fde3","code":"let inf=this.entityRepo.infrastructure(); if(!inf||!inf.userManager)callback(new Error('infrastructure not properly setup'));else inf.userManager.getDomains({}||this.args.query,(er,domains)=>{if(er) return callback(er); callback(null,this.libs.convertToSelectableList('name',domains));})","title":"Get Domains","uid":"GET_DOMAINS","requiresIdentity":true,"__v":0,"meta":{"revision":17,"created":1510640453438,"version":0,"updated":1510652919137},"$loki":73}
{"_id":"59b31b66fdd70b00b82d4bb3","code":"//update student profile.\r\n//save screenshot in a perm place.\r\n\r\nconst mergeProfile= (student,args=this.args)=>{\r\n          if (args.personalDetails) {\r\n            args.personalDetails = Object.assign(student.personalDetails, this.libs.mergeAndProtect(args.personalDetails, ['firstName', 'surname', 'middlename']))\r\n          }\r\n          if (args.contactDetails) {\r\n            args.contactDetails =  Object.assign(student.contactDetails||{}, !student.updatedProfile ? args.contactDetails:this.libs.mergeAndProtect(args.contactDetails, ['email', 'mobile']) );\r\n          }\r\n          if(args.programmeDetails){\r\n              args.programmeDetails =  Object.assign(student.programmeDetails||{},args.programmeDetails);\r\n          }\r\n          if(args.sponsorDetails){\r\n              args.sponsorDetails = Object.assign(student.sponsorDetails||{}, args.sponsorDetails);\r\n          }\r\n          if(args.nextOfKinDetails){\r\n              args.nextOfKinDetails = Object.assign(student.nextOfKinDetails||{}, args.nextOfKinDetails);\r\n          }\r\n},\r\nrepo = this.entityRepo,\r\n inf = this.entityRepo.infrastructure(),\r\n  saveUpdate = (_u) => {\r\n    debug(`about to update with ${JSON.stringify(_u,null,' ')}`);\r\n    repo.update('UNN_Student', _u, (er) => {\r\n      if (er) return callback(er);\r\n\r\n      callback(null, 'Successfully updated student profile, kindly refresh your page to gain full access to all options');\r\n    });\r\n  },\r\n  decisionTree = {\r\n    has_permission: () => {\r\n\r\n      repo.get('UNN_Student', {\r\n        _id: this.args.entity._id\r\n      }, {\r\n        one: true\r\n      }, (er, student) => {\r\n        if (er) return callback(er);\r\n        if (!student) return callback(new Error('Student record does not exist'));\r\n        try {\r\n            mergeProfile(student,this.args.entity);\r\n          let update = this.libs.mergeAndProtect(this.args.entity, ['studentType']);\r\n          update.updatedProfile=true;\r\n          \r\n          if(this.args.entity.profilePic){\r\n            return inf.fileUpload.moveToPermanentSite(this.args.entity.profilePic, (er) => {\r\n            if (er) return debug('an error occurred while moving file to permanent location'), callback(er);\r\n            \r\n            saveUpdate(update);\r\n          });\r\n          }\r\n          saveUpdate(update);\r\n        } catch (e) {\r\n          return callback(e);\r\n        }\r\n        \r\n      });\r\n    },\r\n    unn_student: () => {\r\n\r\n\r\n      repo.get('UNN_Student', {\r\n        userId: this.args.$user._id\r\n      }, {\r\n        one: true\r\n      }, (er, student) => {\r\n          debug('get student returned---x');\r\n          debug(student);\r\n          debug('------x')\r\n        if (er) return callback(er);\r\n        if (!student) return callback(new Error('Student record does not exist'));\r\n\r\n        //make sure student has not changed his type.\r\n        if (this.args.studentType && (student.studentType.toString() !== this.args.studentType)) {\r\n          return callback(new Error('Student cannot change type'));\r\n        }\r\n\r\n        //found student now update his shit.\r\n        let update = {};\r\n\r\n        try {\r\n            \r\n          mergeProfile(student);\r\n          update = this.libs.mergeAndProtect(this.args, ['studentType', 'regNo']);\r\n          update.updatedProfile=true;\r\n        } catch (e) {\r\n          return callback(e);\r\n        }\r\n\r\n\r\n\r\n        if (student.updatedProfile) {\r\n          //only copy allowed changes.\r\n          if(student.profilePic)\r\n          update.profilePic = student.profilePic;\r\n          saveUpdate(update);\r\n\r\n        } else {\r\n\r\n          inf.fileUpload.moveToPermanentSite(this.args.profilePic, (er) => {\r\n            if (er) return debug('an error occurred while moving file to permanent location'), callback(er);\r\n            \r\n            saveUpdate(update);\r\n          });\r\n\r\n        }\r\n\r\n      })\r\n\r\n    }\r\n  };\r\n\r\n\r\ndebug('started student profile update procedure');\r\n//choose your destiny.\r\nif (!inf || !inf.userManager) callback(new Error('Infrastructure is not properly set up'));\r\nelse {\r\n  let choice = 'has_permission';\r\n  if (inf.userManager.inRole('unn_student',this.args.$user)) {\r\n    choice = 'unn_student';\r\n    debug('person updating is a student');\r\n  }\r\n  if (choice)\r\n    decisionTree[choice]();\r\n  else{\r\n      debug('no choice was made , returning unauthorized');\r\n      callback(new Error('You are not authorized'));\r\n  }\r\n    \r\n}","title":"Updates student profile","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":74}
{"_id":"59b31b66fdd70b00b82d4bb6","code":"\n//debug(this.args);\n//first fetch the current users information.\nfunction disable(list,element){\n    \n    if(list && list.length && list.indexOf(element.name)!==-1)\n       element.args=Object.assign(element.args||{},{disabled:true});\n       \n    \n}\nif(this.entityRepo.infrastructure().userManager.inRole('unn_student',this.args.$user)){\n\n        this.entityRepo.get('UNN_Student',{userId:this.args.$user._id},(er,student)=>{\n            debug(student);\n            if(er) return callback(er);\n            if(!student.length) return callback(new Error('couldnt find user profile'));\n            student=student[0];\n          \n               return this.libs.studentProfileUI.call(this,student,(er,ui)=>{\n                   //check if user is student.\n                    this.entityRepo.get('StudentType',{_id:student.studentType,group:/undergraduate/i},(er,isUndergraduate)=>{\n                        if(er) return callback(er);\n                      let disabled=['firstName','middlename','otherNames','surname','regNo'];\n                     if(isUndergraduate.length){\n                            \n                            disabled = disabled.concat(['department', 'session','studentType','modeOfEntry']);\n\n                           if(student.updatedProfile) disabled.push('yearOfStudy');\n                           \n                       }\n                       this.libs.visitElements(ui,disable.bind(this,disabled));\n                       callback(er,student,ui);    \n                    })\n\n                   \n               });\n               \n           \n        })\n\n}\nelse{\n    callback(new Error('This view is strickly for Logged in Students'));\n}","title":"Fetches student data + builds UI","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":75}
{"_id":"59b3ab26914961318090fc95","code":"debug('fetching Gender');\ndebug(this.args);\nthis.libs.getEntity.call(this,'Gender','name',callback);","title":"Get Gender","uid":"GET_GENDERS","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":76}
{"_id":"59b3ac2f914961318090fc96","code":"debug('fetching States.');\ndebug(this.args);\nthis.libs.getEntity.call(this,'State','name',callback);","title":"Get State","uid":"GET_STATES","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":77}
{"_id":"59b6702fee3cb93b88060fb6","code":"debug('creating new Report...'); \n \n this.libs.isAuthorized.call(this, er => {\n\t\tif (er) return callback(er);\n\t\t this.entityRepo.create('Report',this.args.entity,callback)\n});","title":"Create Report","uid":"CREATE_Report_9","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":78}
{"_id":"59b6702fee3cb93b88060fb7","code":"debug('update Report...'); \n \n this.libs.isAuthorized.call(this, er => {\n\t\tif (er) return callback(er);\n\t\tthis.entityRepo.update('Report',this.args.entity,callback)\n});","title":"Update Report","uid":"UPDATE_Report_8","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":79}
{"_id":"59b6702fee3cb93b88060fb8","code":"debug('fetching Report...');\nthis.libs.getEntity.call(this,'Report','name',callback);","title":"Get Report","uid":"GET_Report_9","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":80}
{"_id":"59b69e9cf0e9e93d08261c1d","code":"this.entityRepo.get(\"UNN_Student\", { userId: this.args.$user._id }, { full: true }, (er, student) => {\n  if (er) return callback(er);\n  if (!student || !student.length) return callback(new Error(\"cannot find a student record for you\"));\n  student = student[0];\n  debug(student);\n  let pdata = student.personalDetails,\n    prog = student.programmeDetails,\n    errorMessage = `${student.studentType.name} do not have any particulars setup`,\n    repo = this.entityRepo,\n    departmentFunc = this.entityRepo.get.bind(null, \"Department\", { _id: student.programmeDetails.department }, { full: true, one: true }),\n    modeOfEntryFunc = repo.get.bind(null, \"ModeOfEntry\", { _id: prog.modeOfEntry }, { full: true, one: true }),\n    sessionFunc = repo.get.bind(null, \"Session\", { domain: this.args.$user.domain, _id: prog.session }, { full: true, one: true });\n\n  async.parallel([departmentFunc, sessionFunc, modeOfEntryFunc], (er, items) => {\n    if (er) return callback(er);\n    debug(items);\n    let dep = items.filter(x => x._id.toString() == prog.department)[0],\n      modeOfEntry = items.filter(x => x._id.toString() == prog.modeOfEntry),\n      sesh = items.filter(x => x._id.toString() == prog.session)[0];\n    const fn = (er, html) => {\n      if (er) return callback(er);\n      if (!html) return callback(new Error(\"Failed to generate HTML\"));\n\n      this.args.$description.steps[0].form.elements[0].args = { html };\n      callback(null, {}, this.args.$description);\n    };\n    debug(sesh);\n    debug(dep);\n\n    if (student.studentType.group == \"PG\") {\n      let spesh = dep.areasOfSpecialization.filter(x => x._id.toString() == prog.departmentOption.areaOfSpecialization)[0];\n      return this.libs.getHtml.call(\n        this,\n        \"AdmissionParticulars\",\n        {\n          studentName: `${pdata.firstName} ${pdata.middlename} ${pdata.surname}`,\n          regNo: student.regNo,\n          faculty: dep.faculty.name,\n          session: sesh.name,\n          department: dep.name,\n          fieldOfStudy: spesh && spesh.name,\n          degreeInView: \"\",\n          modeOfRegistration: \"\",\n          modeOfStudy: [\n            \"By comprehensive research to be embodied in a thesis for Ph.D programmes.\",\n            \"By course work to be examined in written papers together with research work to be presented in a project report, where course work predominate over research and constitutes not less than two-thirds of the total credit load for Masters programmes.\",\n            \"By coursework and project for PGD programmes.\"\n          ],\n          periodOfStudy: \"\",\n          supervisor: \"\",\n          otherConditions: [\n            \"Every postgraduate student must pay fees at the beginning of every academic year and renew his/her registration for the new session.\",\n            \"Renewal of registration involves the completion of end-of-session report form, obtainable from the department and submitting same to the Dean, School of Postgraduate Studies within one (1) month from the beginning of the new academic session.\"\n          ]\n        },\n        fn\n      );\n    }\n\n    if (\n      student.studentType.group == \"UNDERGRADUATE\" &&\n      modeOfEntry.length &&\n      modeOfEntry.filter(x => {\n        let code = x.code.toLowerCase();\n        return code == \"dent\" || code == \"utme\";\n      }).length\n    ) {\n      return this.libs.getHtml.call(\n        this,\n        \"UndergraduateAdmissionParticulars\",\n        {\n          studentName: `${pdata.firstName} ${pdata.middlename} ${pdata.surname}`,\n          regNo: student.regNo,\n          session: sesh.name,\n          department: dep.name,\n          faculty: dep.faculty.name,\n          studentType: student.studentType.name,\n          modeOfEntry: modeOfEntry[0].name\n        },\n        fn\n      );\n    }\n\n    return callback(new Error(errorMessage));\n  });\n});\n","title":"Fetch Admission Particulars","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":81}
{"_id":"59b7ed2f094adf105c4baaf2","code":"this.libs.getEntity.call(this,'Relationship','name',callback);","title":"Get Relationships","uid":"GET_RELATIONSHIPS","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":82}
{"_id":"59b9ab57e635180c18f1d60d","code":"const run=()=>{\n    if(!this.args.$user)\n    return callback(new Error('A user context is required to change password'))\n    \n    if(this.args.newPassword!==this.args.confirmPassword){\n        return callback(new Error('Passwords dont match'));\n    }\n        let inf=this.entityRepo.infrastructure();\n        if(!inf||!inf.userManager) \n    return callback(new Error('Infrastructure is not properly setup'));\n    \n    inf.userManager.changePassword(this.args.$user.username,this.args.$user.domain,this.args.password,this.args.newPassword,(er,res)=>{\n       if(er) return callback(er);\n       \n       //password has been changed.\n       debug(res);\n       \n       callback(null,'Successfully changed password');\n       \n        \n    });\n    \n}\n\nrun();\n\n","title":"Change user password","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":83}
{"_id":"59bbd7c4f39aa007dc4c0aa7","code":"       this.entityRepo.get('UNN_Student',{_id:this.args._id},(er,student)=>{\n            debug(student);\n            if(er) return callback(er);\n            if(!student.length) return callback(new Error('couldnt find user profile'));\n            student = student[0];\n          \n            return this.libs.studentProfileUI.call(this,student,(er,ui)=>{\n                   //check if user is student.\n                   if(er) return callback(er);\n        \n                    callback(er,ui);\n                   \n            });\n               \n           \n        });\n","title":"Fetch Student UI","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":84}
{"_id":"59bbd8ecf39aa007dc4c0aa8","code":"debug('fetching student data');\nthis.libs.getEntity.call(this,'UNN_Student','regNo',function(student){\n    let details=student.personalDetails;\n    debug(student);\n    return {\n        _id:student._id,\n        firstName:details.firstName,\n        middlename:details.middlename,\n        surname:details.surname,\n        regNo:student.regNo,\n        studentType:student.studentType.name\n    }\n},callback);","title":"Get UNN Student","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":85}
{"_id":"59bbd9e9f39aa007dc4c0aaa","code":"this.entityRepo.get('UNN_Student',{_id:this.args._id},{one:true},callback);","title":"Get One UNN Student","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":86}
{"_id":"59bdd8720583131a5c0d763b","code":"debug('creating new Staff...'); \nlet inf=this.entityRepo.infrastructure();\nif(!inf||!inf.userManager) callback(new Error('Infrastructure has issues'));\nelse\n{\n    inf.userManager.register({\n        username:this.args.entity.username,\n        password:this.args.entity.password,\n        roles:[this.args.entity.role],\n        domain:this.args.$user.domain\n    },(er,user)=>{\n        if(er) return callback(er);\n        if(!user) return callback(new Error('failed to retrieve user after creation'))\n        debug(user);\n        this.args.entity.domain = this.args.$user.domain;\n        this.args.entity.userId=user._id;\n        if(this.args.entity.department)\n        this.args.entity.department=this.args.entity.department.department;\n        this.entityRepo.create('Staff',this.args.entity,callback)\n        \n    })\n    \n}\n\n","title":"Create Staff","uid":"CREATE_Staff_4","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":87}
{"_id":"59bdd8720583131a5c0d763c","code":"debug('update Staff...'); \nthis.args.query=Object.assign(this.args.query||{},{domain:this.args.$user.domain});\n        if(this.args.entity.department)\n        this.args.entity.department=this.args.entity.department.department;\nthis.entityRepo.update('Staff',this.args.entity,callback)","title":"Update Staff","uid":"UPDATE_Staff_10","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":88}
{"_id":"59bdd8720583131a5c0d763d","code":"debug('fetching Staff...');\nthis.args.query=Object.assign(this.args.query||{},{domain:{value:this.args.$user.domain,isObjectID:true}});\nthis.libs.getEntity.call(this,'Staff','fullName',callback);","title":"Get Staff","uid":"GET_Staff_4","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":89}
{"_id":"59bec7b50583131a5c0d7643","code":"        \r\n        const run=()=>{\r\n                var options,\r\n\t\t\t\tquery = {},\r\n\t\t\t\tinf=this.entityRepo.infrastructure(),\r\n\t\t\t\tuser=this.args.$user,\r\n\t\t\t\targs = this.args;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\r\n\t\t\tif (this.args && this.args.count) {\r\n\t\t\t\toptions = {\r\n\t\t\t\t\tlimit: this.args.count,\r\n\t\t\t\t\tsort: this.args.sort || {\r\n\t\t\t\t\t\t_id: -1\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tif (this.args._id)\r\n\t\t\t\t\tif (this.args.prev) {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$gt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\toptions.sort._id = 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tquery._id = {\r\n\t\t\t\t\t\t\t$lt: this.args._id\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t\tif (this.args.query) {\r\n\t\t\t\t    debug('query exists....');\r\n\t\t\t\t    Object.assign(query, this.libs.convertFilter(this.args.query));\r\n\t\t\t\t    debug(query);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t   if(user.domain){\r\n\t\t\t   query.domain=user.domain;\r\n\t\t\t}\r\n\t\t\tinf.userManager.getRoles(query, options, (er, x)=> {\r\n\t\t\t\tif (er) return fn(er);\r\n\t\t\t\tvar result = !args.full\r\n\t\t\t\t\t? x.map((z)=> {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t_id: z._id,\r\n\t\t\t\t\t\t\t\tdisplayLabel: z.name\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t: x;\r\n\t\t\t\tif (!args.count) callback(null, result);\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (query._id) delete query._id;\r\n\t\t\t\t\tinf.userManager.countRoles(query, function(er, count) {\r\n\t\t\t\t\t\tcallback(er, {\r\n\t\t\t\t\t\t\titems: result,\r\n\t\t\t\t\t\t\ttotal: count\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});  \r\n        };\r\n        \r\n        run();\r\n","title":"Get Roles","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":90}
{"_id":"59bf0715114aa8505c618f6e","code":"this.entityRepo.get('Staff',{_id:this.args._id,domain:this.args.$user.domain},{one:true},(er,staff)=>{\n    if(er) return callback(er);\n    if(!staff) return callback(new Error('Could not find staff details'));\n    \n    this.entityRepo.infrastructure().userManager.getUserById(staff.userId,(er,user)=>{\n       if(er) return callback(er);\n       if(!user) return callback(new Error('Could not find staff user details'));\n       \n       if(!user.roles.length) return callback(new Error('Staff has no role'));\n       \n       staff.role=user.roles[0]._id;\n       //so option group can display correctly\n       staff.department={department:staff.department};\n       callback(null,staff);\n    });\n})","title":"Get One Staff","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":91}
{"_id":"59bf0e1e114aa8505c618f71","code":"const getUI=(x,processors)=>{\n    if(/clearance/i.test(x.name)){\n        return [\n            this.libs.createElement('studentType','Student Type Clearance Officer can clear','',this.constants.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{\n            value:processors.GET_STUDENTTYPE\n        }})\n        // ,\n        //     this.libs.createElement('departments','Clearance Departments','',this.constants.ELEMENTTYPE.LIST,{\n        //         itemTemplate:[\n        //           this.libs.createElement('department','Select a Department to Add','',this.constants.ELEMENTTYPE.SELECT,{\n        //               type:'PROCESSOR',\n        //               config:{\n        //                   value:processors.GET_DEPARTMENTS\n        //               }\n        //           })\n        //             ]\n        //     })\n            ];\n    }\n}\nconst query={};\nif(this.args.$user.domain){\n    query.domain = this.args.$user.domain;\n}\nthis.entityRepo.infrastructure().userManager.getRoles(query,(er,roles)=>{\n    if(er) return callback(er);\n    \n    this.entityRepo.getProcessor({uid:{$in:['GET_STUDENTTYPE','GET_DEPARTMENTS']}},(er,processors)=>{\n        if(er) return callback(er);\n        \n        let _processors=processors.reduce((sum,x)=>{return sum[x.uid]=x._id,sum; },{})\n        debug(_processors);\n        callback(null,roles.map(x=>{\n        return {\n            id:x._id,\n            displayLabel:x.name,\n            elements:getUI(x,_processors)\n        }\n    }));\n    });\n\n})","title":"Get Role and Config","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":92}
{"_id":"59bf231a3315c24ef080d369","code":"\nthis.entityRepo.get('Staff',{userId:this.args.$user._id},{one:true},(er,staff)=>{\n    if(er) return callback(er);\n    if(!staff) return callback(new Error('not authorized'));\n    \n    debug(staff.config.studentType);\n    let query={\n        cleared:{$in:[null,false]},\n        studentType:staff.config.studentType.toString(),\n        'programmeDetails.department':this.args.query ? this.args.query.department : staff.department.toString()\n        };\n        debug(JSON.stringify(query,null,' '));\n    this.entityRepo.get('UNN_Student',query,(er,students)=>{\n            if(er) return callback(er);\n            \n            debug(students);\n            \n            callback(null,{ items:students.map(x=>({\n                _id:x._id,\n                firstName: x.personalDetails.firstName,\n                surname:x.personalDetails.surname,\n                middlename:x.personalDetails.middlename\n            })),total:students.length});\n    });\n})\n\n\n","title":"Get Students Pending Clearance","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":93}
{"_id":"59bfb357fb766f1ff0c2adc0","code":"let elements=[],e=this.libs.createElement;\n\nthis.entityRepo.get('ClearanceDocument',{domain:this.args.$user.domain},(er,docs)=>{\n   if(er) return callback(er);\n   \n   if(!docs.length) return callback(new Error('No clearance documents have been setup'));\n   \n   debug(docs);\n   elements.push(e('_id','','',this.constants.ELEMENTTYPE.HIDDEN));\n   elements.push(e('passport','Passport','',this.constants.ELEMENTTYPE.IMAGE,{type:'URL',config:{data:'/api/upload/preview/{passport}'}}));\n   elements.push(e('info','Info','',this.constants.ELEMENTTYPE.LABEL));\n   let section=e('clearance','Requirements','',this.constants.ELEMENTTYPE.SECTION,{});\n   section.args.elements=[];\n   docs.forEach(doc=> section.args.elements.push(Object.assign({display:doc.priority},e(doc._id.toString(),doc.name,'',this.constants.ELEMENTTYPE.INPUT,{type:this.constants.INPUTTYPE.CHECKBOX}))) )\n   elements.push(section);\n   \n   return callback(null,elements);\n    \n});\n","title":"Get Clearance Template","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":94}
{"_id":"59bfbb67fb766f1ff0c2adc3","code":"\nthis.entityRepo.get('Staff',{userId:this.args.$user._id},{one:true},(er,staff)=>{\n    if(er) return callback(er);\n    if(!staff) return callback(new Error('not authorized'));\n    \n    //debug(staff.config.studentType);\n    let query={\n        cleared:{$in:[null,false]},\n        studentType:staff.config.studentType.toString(),\n        _id:this.args._id\n        };\n        debug(JSON.stringify(query,null,' '));\n    this.entityRepo.get('UNN_Student',query,{one:true},(er,student)=>{\n            if(er) return callback(er);\n            \n            if(!student) return callback(new Error('Stuent has been cleared'));\n            \n        let pd=student.personalDetails;\n           return callback(null,{\n               _id:student._id,\n               passport:student.profilePic,\n               info:`Full Name: ${pd.firstName} ${pd.middlename} ${pd.surname} \\n RegNo ${student.regNo} `,\n               clearance:student.clearance\n           })\n    });\n})\n\n\n","title":"Get One Student Pending Clearance","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":95}
{"_id":"59c00e3bc0e590076ce619ee","code":"this.entityRepo.get('Faculty',{domain:this.args.$user.domain},(er,faculties)=>{\n    if(er) return callback(er);\n    \n    \n        this.entityRepo.getProcessor({uid:'GET_DEPARTMENTS'},{one:true},(er,processor)=>{\n            if(er) return callback(er);\n            if(!processor) return callback(new Error('Cannot find department list'));\n            let elements=[],\n                e = this.libs.createElement;\n                callback(null,faculties.map(x=>({\n                    id:x._id.toString(),\n                    displayLabel:x.name,\n                    elements: [e('department','Department','',this.constants.ELEMENTTYPE.SELECT,{\n                        type:'PROCESSOR',\n                        customArgs:JSON.stringify({query:{faculty:{isObjectID:true,value: x._id.toString()}}}),\n                        config:{\n                            value:processor._id.toString()\n                        }\n                    })]  \n                })));\n        });    \n    \n});","title":"Get Faculties and Departments UI","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":96}
{"_id":"59c027fdf0c3e43dcc70c4dd","code":"this.entityRepo.get('Staff',{userId:this.args.$user._id},{one:true},(er,staff)=>{\n    if(er) return callback(er);\n    if(!staff) return callback(new Error('user is not a staff'));\n    \n    Object.assign(this.args.query||{},{faculty:{isObjectID:true,value:staff.faculty}});\n    this.$checkDomain=true;\n    this.libs.getEntity.call(this,'Department','name',callback);\n});\n","title":"Get Departments for Faculty","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":97}
{"_id":"59c02947f0c3e43dcc70c4df","code":"this.libs.clearStudent.call(this,'UNN_Student',callback);","title":"Clear UNN Student","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":98}
{"_id":"59c268574677422190abd672","code":"const required = [\r\n  {\r\n    validatorType: \"REQUIRED\"\r\n  }\r\n];\r\nthis.libs.getProcessors(\r\n  this.entityRepo,\r\n  [\"GET_SESSIONS\", \"GET_YearOfStudy_5\", \"GET_MODEOFSTUDY\", \"GET_SCHOOLPROGRAMME\", \"GET_PaymentType_8\"],\r\n  (er, processors) => {\r\n    if (er) return callback(er);\r\n\r\n    this.entityRepo.get(\r\n      \"StudentType\",\r\n      {\r\n        domain: this.args.$user.domain\r\n      },\r\n      (er, studentTypes) => {\r\n        if (er) return callback(er);\r\n\r\n        let elements = [],\r\n          e = this.libs.createElement,\r\n          c = this.constants;\r\n\r\n        this.entityRepo.get(\r\n          \"FeePurpose\",\r\n          {\r\n            domain: this.args.$user.domain\r\n          },\r\n          (er, feePurposes) => {\r\n            if (er) return callback(er);\r\n            const getSession = () =>\r\n              e(\r\n                \"session\",\r\n                \"Session\",\r\n                \"\",\r\n                c.ELEMENTTYPE.SELECT,\r\n                {\r\n                  type: \"PROCESSOR\",\r\n                  config: {\r\n                    value: processors.GET_SESSIONS\r\n                  }\r\n                },\r\n                required\r\n              );\r\n            let items = feePurposes.map(f => {\r\n              let _elements = [];\r\n              if (/school\\s*fees/gi.test(f.name) || /acceptance/gi.test(f.name)) {\r\n                _elements.push(\r\n                  e(\r\n                    \"studentType\",\r\n                    \"Student Type\",\r\n                    \"\",\r\n                    c.ELEMENTTYPE.SELECTSET,\r\n                    {\r\n                      path: \"config\",\r\n                      items: studentTypes.map(x => ({\r\n                        displayLabel: x.name,\r\n                        id: x._id.toString(),\r\n                        elements: getFor(x, processors)\r\n                      }))\r\n                    },\r\n                    required\r\n                  )\r\n                );\r\n\r\n                _elements.push(getSession());\r\n              }\r\n\r\n              return {\r\n                id: f._id,\r\n                displayLabel: f.name,\r\n                elements: _elements\r\n              };\r\n            });\r\n\r\n            let feePurpose = e(\"feePurpose\", \"Fee Purpose\", \"\", c.ELEMENTTYPE.SELECTSET, {\r\n              path: \"criteria\",\r\n              items\r\n            });\r\n            elements.push(feePurpose);\r\n\r\n            callback(null, elements);\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n);\r\n\r\nconst getFor = (x, processors) => {\r\n  let paymentType = this.libs.createElement(\r\n      \"paymentType\",\r\n      \"Payment Type\",\r\n      \"\",\r\n      this.constants.ELEMENTTYPE.SELECT,\r\n      {\r\n        type: \"PROCESSOR\",\r\n        config: {\r\n          value: processors.GET_PaymentType_8,\r\n          customArgs: JSON.stringify({\r\n            query: {\r\n              group: x.group\r\n            }\r\n          })\r\n        }\r\n      },\r\n      required\r\n    ),\r\n    yearOfStudy = this.libs.createElement(\r\n      \"yearOfStudy\",\r\n      \"Year of Study\",\r\n      \"\",\r\n      this.constants.ELEMENTTYPE.SELECT,\r\n      {\r\n        type: \"PROCESSOR\",\r\n        config: {\r\n          customArgs: JSON.stringify({ query: { group: \"UNDERGRADUATE\" } }),\r\n          value: processors.GET_YearOfStudy_5\r\n        }\r\n      },\r\n      required\r\n    );\r\n  if (/pg/i.test(x.group)) {\r\n    yearOfStudy.args.config.customArgs = JSON.stringify({ query: { group: \"PG\" } });\r\n    return [\r\n      yearOfStudy,\r\n      paymentType,\r\n      this.libs.createElement(\r\n        \"programmeOption\",\r\n        \"Programme Options\",\r\n        \"\",\r\n        this.constants.ELEMENTTYPE.SELECT,\r\n        {\r\n          type: \"PROCESSOR\",\r\n          config: {\r\n            value: processors.GET_SCHOOLPROGRAMME,\r\n            customArgs: JSON.stringify({\r\n              query: {\r\n                group: x.group\r\n              }\r\n            })\r\n          }\r\n        },\r\n        required\r\n      ),\r\n      this.libs.createElement(\r\n        \"forStaff\",\r\n        \"Staff\",\r\n        \"\",\r\n        this.constants.ELEMENTTYPE.INPUT,\r\n        {\r\n          type: this.constants.INPUTTYPE.CHECKBOX\r\n        },\r\n        required\r\n      ),\r\n      this.libs.createElement(\r\n        \"modeOfStudy\",\r\n        \"Mode of Study\",\r\n        \"\",\r\n        this.constants.ELEMENTTYPE.SELECT,\r\n        {\r\n          type: \"PROCESSOR\",\r\n          config: {\r\n            value: processors.GET_MODEOFSTUDY\r\n          }\r\n        },\r\n        required\r\n      )\r\n    ];\r\n  }\r\n  if (/undergraduate/i.test(x.group)) {\r\n    return [\r\n      paymentType,\r\n      yearOfStudy,\r\n      this.libs.createElement(\"yearOfEntry\", \"Year of Entry\", \"\", this.constants.ELEMENTTYPE.SELECT, {\r\n        type: \"PROCESSOR\",\r\n        config: {\r\n          value: processors.GET_YearOfStudy_5\r\n        }\r\n      })\r\n    ];\r\n  }\r\n\r\n  return [];\r\n};\r\n","title":"Get Fee Assignment UI","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":99}
{"_id":"59c284254677422190abd673","code":"debug('creating new PaymentType...'); \nif(this.args.$user.domain){\n    this.$checkDomain=true;\n    this.args.entity.domain=this.args.$user.domain;\n}\n this.entityRepo.create('PaymentType',this.args.entity,callback)","title":"Create PaymentType","uid":"CREATE_PaymentType_1","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":100}
{"_id":"59c284254677422190abd674","code":"debug('update PaymentType...'); \n this.entityRepo.update('PaymentType',this.args.entity,callback)","title":"Update PaymentType","uid":"UPDATE_PaymentType_6","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":101}
{"_id":"59c284254677422190abd675","code":"debug('fetching PaymentType...');\nif(this.args.$user.domain){\n    this.$checkDomain=true;\n}\nthis.libs.getEntity.call(this,'PaymentType','name',callback);","title":"Get PaymentType","uid":"GET_PaymentType_8","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":102}
{"_id":"59c2b6d74677422190abd67b","code":"debug(this.args);\r\nthis.entityRepo.get('FeePurpose', {\r\n    _id: this.args.query && this.args.query.feePurpose\r\n\r\n}, {\r\n    one: true\r\n}, (er, feePurpose) => {\r\n    if (er) return callback(er);\r\n    if (!feePurpose) return callback(null,{items:[],total:0});\r\n\r\n\r\n    if (/school/ig.test(feePurpose.name) || /acceptance/ig.test(feePurpose.name)) {\r\n        let query = this.args.query || {},\r\n            departmentQuery = {};\r\n        if (this.args.$user.domain) {\r\n            query.domain = this.args.$user.domain;\r\n            departmentQuery.domain = this.args.$user.domain;\r\n            departmentQuery[`studentTypeConfig.${query.criteria.studentType}`]=true;\r\n        }\r\n\r\n\r\n        this.entityRepo.get('Department', departmentQuery, (er, departments) => {\r\n            if (er) return callback(er);\r\n\r\n\r\n\r\n\r\n            debug(departments);\r\n            \r\n            let _query=Object.assign({},query,this.libs.convertObjectToDotNotation({criteria:query.criteria}));\r\n            delete _query.criteria;\r\n            debug(`=====query=====\\n${JSON.stringify(_query,null,' ')}\\n=========\\n`)\r\n            this.entityRepo.get('Fee', _query, (er, config) => {\r\n                if (er) return callback(er);\r\n\r\n\r\n                debug(config);\r\n\r\n\r\n                callback(null, {\r\n                    items: departments.map(x => {\r\n                        let cf = config.filter(f => f.criteria && f.criteria.department && f.criteria.department === x._id.toString());\r\n                        \r\n                        debug(cf);\r\n                        return Object.assign({}, query, {\r\n                            _id: x._id,\r\n                            configId: cf.length && cf[0]._id || null,\r\n                            fee: cf.length && cf[0].fee || null,\r\n                            feePurpose: feePurpose._id,\r\n                            name: x.name,\r\n                            criteria: Object.assign({}, {\r\n                                department: x._id\r\n                            },this.args.query.criteria, cf.length && cf[0].criteria||{})\r\n\r\n                        });\r\n\r\n                    }),\r\n                    total: departments.length\r\n                });\r\n            });\r\n\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n});","title":"Get Fees","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":103}
{"_id":"59c3b5b0da5b700a907ef374","code":"\nif(this.args.entity.configId){\nthis.args.entity._id=this.args.entity.configId;\nthis.entityRepo.update('Fee',this.args.entity,(er,f)=>{\n    if(er) return callback(er);\n    \n    callback(null,'Successfully updated department fee');\n})\n}\nelse{\n    this.args.entity.domain=this.args.$user.domain;\n    delete this.args.entity._id\nthis.entityRepo.create('Fee',this.args.entity,(er,f)=>{\n     if(er) return callback(er);\n     \n     callback(null,'Successfully created a department fee');\n});\n}","title":"Update Department Fees","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":104}
{"_id":"59c5aa418870a83308edda38","code":"/*jshint esversion:6 */\r\n\r\nconst run = () => {\r\n    let inf = this.entityRepo.infrastructure();\r\n    if (!inf || !inf.userManager)\r\n        return callback(new Error('Infrastructure is not available'));\r\n\r\n    if (!inf.userManager.inRole(this.args.$domain.config.studentRole, this.args.$user))\r\n        return callback(new Error('User is not a unn student'));\r\n\r\n    let domain = this.args.$domain;\r\n\r\n    this.entityRepo.get(domain.config.studentClass, {\r\n        userId: this.args.$user._id\r\n    }, {\r\n        one: true\r\n    }, (er, student) => {\r\n        this.entityRepo.get('FeePurpose', {\r\n            _id: this.args.feePurpose\r\n        }, {\r\n            one: true\r\n        }, (er, feePurpose) => {\r\n            if (er) return callback(er);\r\n            if (!feePurpose) return callback(new Error('Could not find that fee type'));\r\n\r\n            let criteria = {\r\n                    feePurpose: this.args.feePurpose\r\n                },\r\n                isAcceptance = /acceptance/i.test(feePurpose.name),\r\n                isHostel=/hostel/i.test(feePurpose.name),\r\n                isSchoolFees = /school/i.test(feePurpose.name);\r\n            if (isSchoolFees) {\r\n                debug('is school fees payment');\r\n                Object.assign(criteria, {\r\n                    ['criteria.config.yearOfStudy']: this.args.criteria.yearOfStudy,\r\n                    ['criteria.session']: this.args.criteria.session,\r\n                    ['criteria.department']: student.programmeDetails.department,\r\n                    ['criteria.modeOfStudy']: student.programmeDetails.modeOfStudy\r\n                });\r\n                if (student.studentType.group == 'PG') {\r\n                    criteria['criteria.programmeOption'] = student.programmeDetails.programmeOption;\r\n                    criteria['criteria.isStaff'] = !!student.isStaff;\r\n                }\r\n            }\r\n            const process=(fee,fn=callback)=>{\r\n                    var config = this.libs.flattenByNamespace('remita', domain.config);\r\n                    return this.libs.generateRemitaRRR.call(this, {\r\n                        splitFee:!!feePurpose.hasCommission,\r\n                        merchant: Object.assign(config, {\r\n                            feeAccount: this.libs.flattenByNamespace('feeAccount', domain.config)\r\n                        }),\r\n                        data: {\r\n                            feeId: fee._id,\r\n                            userId: this.args.$user._id,\r\n                            studentId: student._id,\r\n                            payerName: `${student.personalDetails.firstName} ${student.personalDetails.middlename} ${student.personalDetails.surname}`,\r\n                            payerEmail: student.contactDetails.email\r\n                        },\r\n                        amount: fee.fee\r\n                    }, (er, {RRR}={}) =>{\r\n                        \r\n                        if (er || !RRR) return debug('error occurred while generating RRR'), fn(er || new Error('Remita did not return RRR, please retry'));\r\n\r\n                        this.entityRepo.getProcess({\r\n                            uid: 'WEBVIEW'\r\n                        }, {\r\n                            one: true\r\n                        }, (er, process) => {\r\n                            let warning = null;\r\n                            if (er ||!process) debug('could not locate webview process'), warning = process && 'Unknown Error' || 'Couldn\\'t locate pay now view';\r\n                            let url=encodeURIComponent(`${config.payUrl}?RRR=${RRR}&domain=${domain._id}&title=Fees`);\r\n                            fn(null, {\r\n                                message: warning || 'Successful',\r\n                                info: `Successfully generated Invoice Number ${RRR} , please use this invoice number to make payment at any bank branch nationwide`,\r\n                                payHere: !warning && `${process && process._id}|url=${url}`||'cannot pay now , retry later....'\r\n                            });\r\n\r\n\r\n                        });\r\n\r\n\r\n\r\n                    });\r\n            }\r\n            \r\n            if(isHostel){\r\n                let hostelAPI= new this.libs.HostelAPI(this.entityRepo.infrastructure().request,this.args.$requestContext.authorization);\r\n                hostelAPI.createABooking(Object.assign({},this.args.criteria,{session:student.programmeDetails.session,domain:this.args.$user.domain}),(er,{booking_id}={})=>{\r\n                  if(er) return callback(er);\r\n                  \r\n                  return process({fee:this.args.criteria.fee,_id:booking_id},(err,result)=>{\r\n                      if(err){\r\n                          if(booking_id)\r\n                               return hostelAPI.deleteABooking(booking_id,(er)=>{\r\n                                      return callback(err);\r\n                                  });\r\n                      \r\n                      return callback(err);\r\n                      }\r\n\r\n                      \r\n                      return callback(null,result);\r\n                  });\r\n                })\r\n                return;\r\n            }\r\n\r\n            this.entityRepo.get('Fee', criteria, {\r\n                one: true\r\n            }, (er, fee) => {\r\n                if (er || !fee) return debug('error occurred while fetching fee'), callback(er || new Error('There has been no fees setup for you, for that session'));\r\n\r\n                debug('fetched fee');\r\n                debug(fee);\r\n                debug(feePurpose);\r\n                if (isSchoolFees || isAcceptance) {\r\n                   return process(fee);\r\n                }\r\n\r\n\r\n                return callback(new Error('We dont know how to process that fee type'));\r\n\r\n\r\n            });\r\n            \r\n            \r\n        });\r\n    });\r\n\r\n\r\n\r\n};\r\n\r\n\r\nrun();","title":"Get fees config and generate RRR","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":105}
{"_id":"59c5c6b0737b9c4ae4426396","code":"debug('creating new FeePurpose...'); \nthis.args.entity.domain=this.args.$user.domain;\nthis.entityRepo.create('FeePurpose',this.args.entity,callback)","title":"Create FeePurpose","uid":"CREATE_FeePurpose_2","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":106}
{"_id":"59c5c6b0737b9c4ae4426397","code":"debug('update FeePurpose...'); \ndelete this.args.entity.domain;\nthis.entityRepo.update('FeePurpose',this.args.entity,callback)","title":"Update FeePurpose","uid":"UPDATE_FeePurpose_2","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":107}
{"_id":"59c5c6b0737b9c4ae4426398","code":"debug('fetching FeePurpose...');\nthis.$checkDomain=true;\nthis.libs.getEntity.call(this,'FeePurpose','name',callback);","title":"Get FeePurpose","uid":"GET_FeePurpose_10","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":108}
{"_id":"59c8f89eb1694e17143270ed","code":"\ndebug(this.args.$domain);\nthis.entityRepo.get(this.args.$domain.config.studentClass,{userId:this.args.$user._id},{one:true},(er,student)=>{\n    if(er) return callback(er);\n    \n    if(student){\n        let p=student.personalDetails;\n        this.args.$description.steps[0].form.elements[0].description=`Full Name : ${p.firstName} ${p.middlename} ${p.surname}`;\n    }\n\n    callback(null,null,this.args.$description);\n})\n","title":"fill student info","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":109}
{"_id":"59c90090ff62ab3360746640","code":"const getElementsFor = (elem, options,fn) => {\r\n    if (/school\\s*fees/i.test(elem.name)) {\r\n        return setImmediate(fn,null,[\r\n            this.libs.createElement('yearOfStudy', 'Level', '', this.constants.ELEMENTTYPE.SELECT, {\r\n                type: 'PROCESSOR',\r\n                config: {\r\n                    value: options.GET_YearOfStudy_5\r\n                }\r\n            }), this.libs.createElement('session', 'Session', '', this.constants.ELEMENTTYPE.SELECT, {\r\n                type: 'PROCESSOR',\r\n                config: {\r\n                    value: options.GET_SESSIONS\r\n                }\r\n            })\r\n        ]);\r\n    }\r\n    if(/hostel/ig.test(elem.name)){\r\n        let hostelApi=new this.libs.HostelAPI(this.entityRepo.infrastructure().request,this.args.$requestContext.authorization);\r\n        hostelApi.checkEligibility((er,hostels)=>{\r\n           if(er && er.message!=='Could not find any available hostel spaces for you') return debug(JSON.stringify(er)),debug('na wa o'),  fn(er);\r\n           \r\n           \r\n           \r\n           debug(hostels);\r\n           let hostelsUI=hostels && hostels.length ? this.libs.createElement('hostel','Select A Hostel','',this.constants.ELEMENTTYPE.SELECTSET,{\r\n              items:hostels.map(hostel=>{\r\n                  return {\r\n                      id:hostel.id,\r\n                      displayLabel:hostel.name,\r\n                      elements:[this.libs.createElement('room','Select An Available Room','',this.constants.ELEMENTTYPE.SELECTSET,{\r\n                          items:hostel.rooms.map(room=>{\r\n                              return {\r\n                                  id:room.room,\r\n                                  displayLabel:room.room,\r\n                                  elements:[this.libs.createElement('space','Select an Available Space','',this.constants.ELEMENTTYPE.SELECTSET,{\r\n                                      items:room.spaces.map(space=>{\r\n                                          return {\r\n                                              id:space.name,\r\n                                              displayLabel:space.name,\r\n                                              elements:[this.libs.createElement('fee','','',this.constants.ELEMENTTYPE.HIDDEN,{default:space.fee})]\r\n                                          }\r\n                                      })\r\n                                  }),this.libs.createElement('fee','','',this.constants.ELEMENTTYPE.HIDDEN,{default:room.fee})]\r\n                              }\r\n                          })\r\n                      })]\r\n                  }\r\n              })\r\n          }):null;\r\n          let _hostels=[];\r\n          if(hostelsUI)\r\n          _hostels.push(hostelsUI);\r\n           fn(null,_hostels);\r\n        });\r\n        return;\r\n    }\r\n    return setImmediate(fn,null,[]);\r\n\r\n}\r\n\r\n\r\n\r\nthis.entityRepo.get('FeePurpose', {\r\n    domain: this.args.$user.domain\r\n}, (er, feePurposes) => {\r\n    if (er) return callback(er);\r\n\r\n    this.libs.getProcessors(this.entityRepo,['GET_YearOfStudy_5','GET_SESSIONS'], (er, processors) => {\r\n        if (er) return callback(er);\r\n\r\n\r\n        let tasks=[];\r\n        feePurposes.forEach(x => {\r\n            \r\n            tasks.push(getElementsFor.bind(this,x,processors));\r\n            \r\n        })\r\n        \r\n        async.parallel(tasks,(er,results)=>{\r\n            if(er) return callback(er);\r\n            \r\n            callback(null,results.map((item,index)=>{\r\n                return {\r\n                id: feePurposes[index]._id,\r\n                displayLabel: feePurposes[index].name,\r\n                elements:item\r\n            }\r\n            }))\r\n        })\r\n\r\n    })\r\n\r\n})","title":"Get Fee Purpose Options for Payment","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":110}
{"_id":"59c95013c4a5ee0d4087ad9d","code":"if(this.args.url){\n    this.args.$description.steps[0].form.elements[0].args={url:this.args.url};\n}\nif(this.args.title)\nthis.args.$description.title=this.args.title;\n\ndebug(this.args);\n\ncallback(null,null,this.args.$description);","title":"Overrides title and url parameter of process","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":111}
{"_id":"59ca4927694f112a181c4997","code":"\nlet context={RRR:this.args.RRR},\ncrypto=this.entityRepo.infrastructure().crypto,\ndefaultError=(er)=>`<html><head></head><body><h1>An error has occurred. Please refresh. ${er.message}</h1></body></html>`;\ndefaultSetupError=()=> callback(null,defaultError(new Error('This domain hasnt been setup for remita')));\n\ndebug(this.args);\nthis.entityRepo.infrastructure().userManager.getDomains({_id:this.args.domain},(er,domains)=>{\n    if(er) return callback(null,defaultError(new Error(`An error occured while fetching user domain ${er.message}`)));\n    \n    if(!domains.length) return callback(null,defaultError(new Error('Unknown domain')));\n    \n    let domain= domains[0];\n    if(!domain.config.length) return defaultSetupError();\n    \n    let config=domain.config.reduce((sum,x)=>{ if(x.name.indexOf('remita')!==-1) sum[x.name.split('.')[1]]=x.value;  return sum;},{});\n    \n    if(!config.id||!config.apiKey) return debug(config), defaultSetupError();\n   \n    \n    context.id=config.id;\n    context.hash=this.libs.generateHash.call(crypto,config.id,context.RRR,config.apiKey);\n    context.responseUrl=config.responseUrl;\n    context.remitaUrl=config.onlineFormUrl;\n    \n    debug(context);\n    \n    this.libs.getHtml.call(this,'SubmitRemitaPayment',context,this.args.domain,(er,html)=>{\n        if(er) return debug(er),callback(null,defaultError(er));\n        \n        debug(html);\n        return callback(null,html);\n    })\n    \n})\n\n\n","title":"Submit Pay Form to Remita","uid":"SUBMIT_REMITA","requiresIdentity":false,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":112}
{"_id":"59cacabf3e190314b0d2d7a1","code":"let decisionTree = {\r\n    PRINT: () => {},\r\n    CONFIRM: () => {\r\n      this.entityRepo.get(\r\n        this.args.$domain.config.invoiceClass,\r\n        {\r\n          invoiceNumber: this.args.criteria.ref\r\n        },\r\n        {\r\n          one: true\r\n        },\r\n        (er, invoice) => {\r\n          if (er) return callback(er);\r\n\r\n          if (!invoice) return callback(new Error(\"Could not find any payment for that reference\"));\r\n\r\n          //ive got the invoice.\r\n          debug(`invoice:${JSON.stringify(invoice, null, \" \")}\\n----x`);\r\n          switch (invoice.vendor) {\r\n            case \"remita\":\r\n              this.libs.confirmRemitaPayment.call(\r\n                this,\r\n                invoice.invoiceNumber,\r\n                this.libs.flattenByNamespace(\"remita\", this.args.$domain.config),\r\n                (er, paid) => {\r\n                  if (er) return callback(er);\r\n                  if (paid) return debug(\"invoice has been paid\"), printReceipt(invoice);\r\n\r\n                  return callback(new Error(\"Fee has not been paid\"));\r\n                }\r\n              );\r\n              break;\r\n            case \"etranzact\":\r\n              break;\r\n            default:\r\n              return callback(new Error(\"Unknown Invoice Vendor\"));\r\n          }\r\n        }\r\n      );\r\n    }\r\n  },\r\n  printReceipt = invoice => {\r\n    if (invoice) {\r\n      fetchReceiptInfo(invoice);\r\n    } else {\r\n      this.entityRepo.get(\r\n        this.args.$domain.config.invoiceClass,\r\n        {\r\n          invoiceNumber: this.args.criteria.ref\r\n        },\r\n        { one: true },\r\n        (er, invoice) => {\r\n          if (er) return callback(er);\r\n          if (!invoice) return callback(new Error(\"Could not find any payment for that reference number\"));\r\n          fetchReceiptInfo(invoice);\r\n        }\r\n      );\r\n    }\r\n  },\r\n  fetchReceiptInfo = invoice => {\r\n    async.parallel(\r\n      [\r\n        this.entityRepo.get.bind(\r\n          null,\r\n          \"Fee\",\r\n          {\r\n            _id: invoice.feeId\r\n          },\r\n          {\r\n            one: true,\r\n            full: true\r\n          }\r\n        ),\r\n        this.libs.getStudent.bind(this, {\r\n          userId: invoice.userId\r\n        })\r\n      ],\r\n      (er, info) => {\r\n        if (er) return callback(er);\r\n\r\n        let fee = info[0],\r\n          student = info[1];\r\n\r\n        getTemplateFor(student, fee, invoice);\r\n      }\r\n    );\r\n  },\r\n  getTemplateFor = (student, fee, invoice) => {\r\n    let p = student.personalDetails,\r\n      header = [],\r\n      footer = [];\r\n\r\n    if (/school\\s*fees/i.test(fee.feePurpose.name)) {\r\n      header.push({\r\n        \"Matriculation Number\": student.regNo\r\n      });\r\n      header.push({\r\n        Department: student.programmeDetails.department.name\r\n      });\r\n      footer.push({\r\n        \"Being payment for \": student.programmeDetails.session.name\r\n      });\r\n    }\r\n\r\n    this.libs.getHtml.call(\r\n      this,\r\n      \"FeeReceipt\",\r\n      {\r\n        reason: fee.feePurpose.name,\r\n        header,\r\n        footer,\r\n        feeTotal: fee.fee,\r\n        feeBreakdown: fee.feeBreakdown,\r\n        name: `${p.firstName} ${p.middlename} ${p.surname}`,\r\n        schoolName: this.args.$domain.name\r\n      },\r\n      (er, html) => {\r\n        if (er) return callback(er);\r\n\r\n        return callback(null, [\r\n          this.libs.createElement(\"receipt\", \"\", \"\", this.constants.ELEMENTTYPE.HTMLVIEW, {\r\n            html\r\n          })\r\n        ]);\r\n      }\r\n    );\r\n  };\r\n\r\ndebug(this.args);\r\n\r\ndecisionTree[this.args.decision]();\r\n","title":"Confirm Payment Status / Print Receipt","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":113}
{"_id":"59d28ee54af6234704ce664c","code":"debug(`${this.args.$user.username} wants suggestions to chat with`);\nthis.entityRepo.get(this.args.$domain.config.studentClass,{userId:this.args.$user._id},(er,student)=>{\n    if(er) return callback(er);\n    \n    this.entityRepo.get(this.args.$domain.config.studentClass,{domain:this.args.$user.domain,studentType:student.studentType},(er,students)=>{\n       if(er) return callback(er);\n       callback(null,students.map(x=>x.username));\n    })\n})","title":"Friend Suggestions for Chat","uid":"get_friend_suggestions","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":114}
{"_id":"59d735a56aba7b119ca25490","code":"let grid=this.args.$description.steps[0].form.elements[0];\nthis.entityRepo.get('StudentType',{domain:this.args.$user.domain},(er,studentTypes)=>{\n    if(er) return callback(er);\n    debug(studentTypes);\n    let section=this.libs.createElement('studentTypeConfig','Allowed Student Types','',this.constants.ELEMENTTYPE.SECTION,{elements:[]});\n    \n    studentTypes.forEach((t,index)=>{\n       section.args.elements.push(this.libs.createElement(t._id.toString(),t.name,'',this.constants.ELEMENTTYPE.INPUT,{type:this.constants.INPUTTYPE.CHECKBOX}));\n    });\n    grid.args.extra.createTemplate.push(Object.assign({order:10},section));\n    \n    debug('fetch for departments ran');\n    return callback(null,null,this.args.$description);\n});\n\n","title":"Add UI for studentTypeConfig","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":115}
{"_id":"59d73c714a3abd43bcd93fb7","code":"this.$checkDomain=true;\nthis.libs.getEntity.call(this,'Faculty','name',callback);","title":"Get Faculties","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":116}
{"_id":"59d762ec6b6d163fccd1545b","code":"let ui,\n    query = Object.assign({}, this.args.query || {}, {\n        domain: this.args.$user.domain\n    });\n\nthis.entityRepo.get(\"StudentType\", query, (er, studentTypes) => {\n    if (er) return callback(er);\n\n    this.entityRepo.get(\n        \"ModeOfEntry\",\n        { domain: this.args.$user.domain },\n        (er, modeOfEntries) => {\n            if (er) return callback(er);\n            ui = studentTypes.map(x => {\n                return {\n                    id: x._id,\n                    displayLabel: x.name,\n                    elements: [\n                        this.libs.createElement(\n                            \"value\",\n                            \"Mode Of Entry\",\n                            \"\",\n                            this.constants.ELEMENTTYPE.SELECTSET,\n                            {\n                                items: modeOfEntries\n                                    .filter(v => v.group && v.group.filter(z=>z.studentType.toString() == x._id.toString()).length)\n                                    .map(u => ({\n                                        id: u._id,\n                                        displayLabel: u.name,\n                                        elements: []\n                                    }))\n                            }\n                        )\n                    ]\n                };\n            });\n\n            callback(null, ui);\n        }\n    );\n});\n","title":"Get Student Mode / Student Mode of Entry UI","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":117}
{"_id":"59d9ff08e28cad0824656a7c","code":"this.$checkDomain=true;\nthis.libs.getEntity.call(this,'Campus','name',callback);","title":"Get Campuses","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":118}
{"_id":"59dcda409af69d1ff8ade084","code":"let hostelApi= new this.libs.HostelAPI(this.entityRepo.infrastructure().request,this.args.$requestContext.authorization);\nhostelApi.getHostels(this.args,(er,hostels)=>{\n    debug(er);\n    debug(hostels);\n    if(er) return callback(er);\n    return callback(null,hostels);\n});","title":"Get Hostels","uid":"GET_HOSTELS","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":119}
{"_id":"59dcdad19af69d1ff8ade085","code":"let hostelApi= new this.libs.HostelAPI(this.entityRepo.infrastructure().request,this.args.$requestContext.authorization);\nhostelApi.createHostel(this.args.entity,(er)=>{\n    if(er) return callback(er);\n    \n    return callback(null,'Successfully created hostel');\n})","title":"Create Hostel","uid":"CREATE_HOSTEL","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":120}
{"_id":"59dcdb2c9af69d1ff8ade086","code":"let hostelApi= new this.libs.HostelAPI(this.entityRepo.infrastructure().request,this.args.$requestContext.authorization);\nhostelApi.updateHostel(this.args.entity,(er)=>{\n    if(er) return callback(er);\n    \n    return callback();\n})","title":"Update Hostel","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":121}
{"_id":"59dcdb869af69d1ff8ade087","code":"\nlet hostelApi= new this.libs.HostelAPI(this.entityRepo.infrastructure().request,this.args.$requestContext.authorization);\nhostelApi.getRules(this.args,(er,rules)=>{\n    if(er) return callback(er);\n    \n    debug(er);\n    debug(rules);\n\n    return callback(null,rules);\n})","title":"Get Hostel Rules","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":122}
{"_id":"59dcdbdf9af69d1ff8ade088","code":"let hostelApi = new this.libs.HostelAPI(this.entityRepo.infrastructure().request, this.args.$requestContext.authorization);\nif (this.args.entity.rule) this.args.entity.rule = JSON.parse(this.args.entity.rule);\nhostelApi.createRule(this.args.entity, er => {\n  if (er) return callback(er);\n\n  return callback(null, \"Successfully saved new rule\");\n});\n","title":"Create Hostel Rule","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":123}
{"_id":"59dcebde9af69d1ff8ade089","code":"let hostelApi= new this.libs.HostelAPI(this.entityRepo.infrastructure().request,this.args.$requestContext.authorization);\nif(this.args.entity.rule)\nthis.args.entity.rule=JSON.parse(this.args.entity.rule);\nhostelApi.updateRule(this.args.entity,(er)=>{\n    if(er) return callback(er);\n    \n    return callback(null,'Successful');\n})","title":"Update Hostel Rule","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":124}
{"_id":"59dd33c09af69d1ff8ade08c","code":"this.entityRepo.get(this.args.$domain.config.studentClass,{userId:this.args.$user._id},{one:true},(er,student)=>{\n    if(er) return callback(er);\n    \n   if(!student) return callback(new Error('User is not a student'));\n   \n   this.libs.getStudent.call(this,{_id:student._id},callback)\n})","title":"Get Student Details","uid":"GET_STUDENT_DETAILS_FOR_HOSTEL_ALLOCATION","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":125}
{"_id":"59de7479facb892e50abbf83","code":"let hostelApi= new this.libs.HostelAPI(this.entityRepo.infrastructure().request,this.args.$requestContext.authorization);\ndebug(this.args);\nhostelApi.getRules({query:{_id:this.args._id}},(er,rules)=>{\n    if(er) return callback(er);\n    \n    debug('changing rule object to string');\n    debug(rules)\n    \n    if(!rules.length) return callback(new Error('Not found'));\n    \n    let rule=rules[0];\n    rule.rule=JSON.stringify(rule.rule,null,' ');\n    debug(rule);\n    return callback(null,rule);\n})\n","title":"Get Hostel Rule","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":126}
{"_id":"59f110db0d04773744223bf7","code":"const getElementsFor = (elem, options,fn) => {\r\n    if (/school\\s*fees/i.test(elem.name)) {\r\n        return setImmediate(fn,null,[\r\n            this.libs.createElement('yearOfStudy', 'Level', '', this.constants.ELEMENTTYPE.SELECT, {\r\n                type: 'PROCESSOR',\r\n                config: {\r\n                    value: options.GET_YearOfStudy_5\r\n                }\r\n            }), this.libs.createElement('session', 'Session', '', this.constants.ELEMENTTYPE.SELECT, {\r\n                type: 'PROCESSOR',\r\n                config: {\r\n                    value: options.GET_SESSIONS\r\n                }\r\n            })\r\n        ]);\r\n    }\r\n    if(/hostel/ig.test(elem.name)){\r\n        return setImmediate(fn,null,[this.libs.createElement('session', 'Session', '', this.constants.ELEMENTTYPE.SELECT, {\r\n                type: 'PROCESSOR',\r\n                config: {\r\n                    value: options.GET_SESSIONS\r\n                }\r\n            })\r\n        ]);\r\n    }\r\n    return setImmediate(fn,null,[]);\r\n\r\n}\r\n\r\n\r\n\r\nthis.entityRepo.get('FeePurpose', {\r\n    domain: this.args.$user.domain\r\n}, (er, feePurposes) => {\r\n    if (er) return callback(er);\r\n\r\n    this.libs.getProcessors(this.entityRepo,['GET_YearOfStudy_5','GET_SESSIONS'], (er, processors) => {\r\n        if (er) return callback(er);\r\n\r\n\r\n        let tasks=[];\r\n        feePurposes.forEach(x => {\r\n            \r\n            tasks.push(getElementsFor.bind(this,x,processors));\r\n            \r\n        })\r\n        \r\n        async.parallel(tasks,(er,results)=>{\r\n            if(er) return callback(er);\r\n            \r\n            callback(null,results.map((item,index)=>{\r\n                return {\r\n                id: feePurposes[index]._id,\r\n                displayLabel: feePurposes[index].name,\r\n                elements:item\r\n            }\r\n            }))\r\n        })\r\n\r\n    })\r\n\r\n})","title":"Get Fee Purpose Options for Print","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":127}
{"_id":"59f20b4b5e898d2d5051f34f","code":"debug('creating new Semester...'); \n this.entityRepo.create('Semester',this.args.entity,callback)","title":"Create Semester","uid":"CREATE_Semester_5","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":128}
{"_id":"59f20b4b5e898d2d5051f350","code":"debug('update Semester...'); \n this.entityRepo.update('Semester',this.args.entity,callback)","title":"Update Semester","uid":"UPDATE_Semester_2","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":129}
{"_id":"59f20b4b5e898d2d5051f351","code":"debug('fetching Semester...');\nthis.$checkDomain=true;\nthis.libs.getEntity.call(this,'Semester','name',callback);","title":"Get Semester","uid":"GET_Semester_3","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":130}
{"_id":"59f48c84dcf25a401cf71779","code":"debug(\"creating new CourseType...\");\nthis.args.entity.domain = this.args.$user.domain;\nthis.entityRepo.create(\"CourseType\", this.args.entity, callback);\n","title":"Create CourseType","uid":"CREATE_CourseType_8","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":131}
{"_id":"59f48c84dcf25a401cf7177a","code":"debug('update CourseType...'); \n this.entityRepo.update('CourseType',this.args.entity,callback)","title":"Update CourseType","uid":"UPDATE_CourseType_3","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":132}
{"_id":"59f48c84dcf25a401cf7177b","code":"debug(\"fetching CourseType...\");\nthis.$checkDomain = true;\nthis.libs.getEntity.call(this, \"CourseType\", \"name\", callback);\n","title":"Get CourseType","uid":"GET_CourseType_2","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":133}
{"_id":"59f499d2dcf25a401cf71781","code":"debug(this.args);\nlet query = this.libs.convertObjectToDotNotation({ criteria: this.args });\ndebug(query);\nthis.entityRepo.get(\"DepartmentUnitLoad\", query, { one: true }, (er, data) => {\n  if (er) return callback(er);\n\n  this.entityRepo.getProcessor({ uid: \"SAVE_DEPARTMENT_CONFIG\" }, { one: true }, (er, processor) => {\n    if (er) return callback(er);\n\n    this.entityRepo.get(\n      \"CourseType\",\n      { $or: [{ domain: this.args.$user.domain }, { domain: null }, { domain: undefined }] },\n      (er, courseTypes) => {\n        if (er) return callback(er);\n        let ui = [\n          this.libs.createElement(\"actionView\", \"\", \"\", this.constants.ELEMENTTYPE.ACTIONVIEW, {\n            elements: [this.libs.createElement(\"settings\", \"\", \"\", this.constants.ELEMENTTYPE.SECTION, { elements: [] })],\n            action: processor._id.toString(),\n            commandText: \"Save Unit Load Configuration\"\n          })\n        ];\n        courseTypes.reduce((sum, x) => {\n          if (!sum[x.category]) {\n            sum[x.category] = 1;\n            ui[0].args.elements[0].args.elements.push(\n              this.libs.createElement(x.category || \"default\", x.category || \"Default\", \"\", this.constants.ELEMENTTYPE.SECTION, {\n                elements: [\n                  this.libs.createElement(\"max\", \"Max\", \"\", this.constants.ELEMENTTYPE.INPUT, {\n                    type: this.constants.INPUTTYPE.NUMBER\n                  }),\n                  this.libs.createElement(\"min\", \"Min\", \"\", this.constants.ELEMENTTYPE.INPUT, {\n                    type: this.constants.INPUTTYPE.NUMBER\n                  })\n                ]\n              })\n            );\n          }\n          return sum;\n        }, {});\n        ui[0].args.elements.push(\n          this.libs.createElement(\"criteria\", \"\", \"\", this.constants.ELEMENTTYPE.HIDDEN, { default: JSON.stringify(this.args) })\n        );\n        return callback(null, { ui, data: { actionView: data } });\n      }\n    );\n  });\n});\n","title":"Get Department Unit Load","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":134}
{"_id":"59f4d6afe8f7410b98bcae17","code":"debug(this.args);\nlet criteria;\ntry {\n  criteria = JSON.parse(this.args.criteria);\n} catch (e) {\n  setImmediate(callback, e);\n}\nconst getSuccessUI = () => {\n  return [\n    Object.assign({ uid: \"INFO\" }, this.libs.createElement(\"message\", \"Status\", \"Successfully saved\", this.constants.ELEMENTTYPE.LABEL))\n  ];\n};\nthis.entityRepo.get(\"DepartmentUnitLoad\", { _id: this.args._id }, (er, exists) => {\n  if (er) return callback(er);\n\n  if (exists.length) {\n    return this.entityRepo.update(Object.assign({}, this.args, { criteria }), er => {\n      if (er) return callback(er);\n\n      return callback(null, getSuccessUI());\n    });\n  }\n\n  return this.entityRepo.create(\"DepartmentUnitLoad\", { criteria, settings: this.args.settings }, er => {\n    if (er) return callback(er);\n\n    return callback(null, getSuccessUI());\n  });\n});\n","title":"Save Department Unit Load","requiresIdentity":true,"__v":0,"uid":"SAVE_DEPARTMENT_CONFIG","meta":{"revision":0,"created":1510640453438,"version":0},"$loki":135}
{"_id":"59f5b46250ee85284c080a9c","code":"debug(\"fetching Course...\");\nthis.$checkDomain = true;\nthis.libs.getEntity.call(this, \"Course\", \"name\", callback);\n","title":"Get Courses","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":136}
{"_id":"59f5b4d050ee85284c080a9d","code":"debug(\"creating new CourseType...\");\n\nlet decision = {\n  SINGLE: () => {\n    this.args.entity.config.domain = this.args.$user.domain;\n    this.entityRepo.create(\"Course\", this.args.entity.config, callback);\n  },\n  UPLOAD: () => {\n    let inf = this.entityRepo.infrastructure(),\n      self = this,\n      fileUpload = inf.fileUpload,\n      fileParser = inf.fileParser,\n      threadPool = inf.threadPool;\n    this.libs.convertFileAndSave(\n      \"Course\",\n      this.args.entity.config.upload,\n      { domain: this.args.$user.domain },\n      [\"name\", \"code\"],\n      null,\n      fileUpload,\n      fileParser,\n      threadPool,\n      this.entityRepo,\n      callback\n    );\n  }\n};\n\ndecision[this.args.entity.decision]();\n","title":"Create Course","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":137}
{"_id":"59f5b4ff50ee85284c080a9e","code":"debug('update Course...'); \n this.entityRepo.update('Course',this.args.entity,callback)","title":"Update Course","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":138}
{"_id":"59f6dbbf50ee85284c080aa9","code":"let elements=[];\n\nfor (var i =100; i > 0; i--) {\n    elements.push({displayLabel:\"\"+i,_id:i});\n}\n\ncallback(null,[{displayLabel:\"\"+1,_id:1}]);","title":"Returns a list of Course Units","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":139}
{"_id":"59f6e0fa50ee85284c080aab","code":"const run = () => {\n  this.args.depth = true;\n  this.$checkDomain = true;\n  debug(this.args);\n  const objectId = prop => {\n    if (this.args.query && this.args.query[prop]) this.args.query[prop] = { isObjectID: true, value: this.args.query[prop] };\n  };\n  //change query to handle objectId\n\n  if (!this.args.query || !this.args.query.studentType) return callback(null, { items: [], total: 0 });\n  objectId(\"studentType\");\n  objectId(\"department\");\n  objectId(\"modeOfEntry\");\n  objectId(\"semester\");\n  objectId(\"session\");\n\n  debug(this.args);\n\n  this.libs.getEntity.call(\n    this,\n    \"CourseAssignment\",\n    \"\",\n    x => {\n      return {\n        _id: x._id,\n        courseType: x.courseType.name,\n        courseName: x.course.name,\n        courseUnit: x.courseUnit,\n        courseCode: x.course.code\n      };\n    },\n    callback\n  );\n};\n\nrun();\n","title":"Get Course Assignments","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":140}
{"_id":"59f6ee0950ee85284c080aaf","code":"this.args.entity.domain = this.args.$user.domain;\ndebug(\"creating new assignment\");\ndebug(this.args.entity);\nlet query = Object.assign({}, this.args.entity);\ndelete query.courseUnit;\ndelete query.courseType;\ndebug(query);\nthis.entityRepo.get(\"CourseAssignment\", query, (er, exists) => {\n  if (er) return callback(er);\n  if (exists.length) return callback(new Error(\"An entry with that configuration already exists please edit the course assignment\"));\n\n  this.entityRepo.create(\"CourseAssignment\", this.args.entity, callback);\n});\n","title":"Create Course Assignment","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":141}
{"_id":"59f6f0a350ee85284c080ab3","code":"debug(this.args);\nthis.entityRepo.get(\"CourseAssignment\", { _id: this.args._id, domain: this.args.$user.domain }, { one: true }, (er,cs)=>{\n    \n    if(er) return debug(er), callback(er);\n    \n    debug(cs);\n    return callback(null,cs);\n});\n","title":"Fetch Course Assignment for Editing","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":142}
{"_id":"59fba95ab94d470c58b8a811","code":"setImmediate(callback,null,{courseForm:\"<div><h1>Registered Successfully</h1></div>\"});","title":"Register Courses","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":143}
{"_id":"59fc1f77fc056f3370470b6a","code":"//if(Array.prototype.isPrototypeOf(this.args)){\ndebug(\"fetching course data template\");\nthis.entityRepo.get(\"Course\", { _id: this.args.course }, { one: true }, (er, result) => {\n  if (er) return callback(er);\n  debug(result);\n  return callback(null, Object.assign({}, this.args, { courseName: result.name, courseCode: result.code }));\n});\n//}\n","title":"Get Registered Courses Item Data Template","requiresIdentity":true,"__v":0,"meta":{"revision":0,"created":1510640453438,"version":0},"$loki":144}
{"_id":"48f600a6-1723-4547-b4ba-99b305bf8b75","code":"callback(null,'testing');","title":"Fake Processor","meta":{"revision":0,"created":1510641562862,"version":0},"$loki":145}
{"_id":"5a0abcdfd9f20d31f0050d50","code":"callback(null,{message:'Testing'});","title":"Fake processor","meta":{"revision":0,"created":1510653151448,"version":0},"$loki":146}
