{"_id":"59aa7b4ed5faa4219026bac1","code":"\r\n\t\t\t\tfunction convertFilter(data) {\r\n\t\t\t\t\tvar query = {};\r\n\t\t\t\t\tObject.keys(data).forEach(function(key) {\r\n\t\t\t\t\t\tif (typeof data[key] == \"string\") {\r\n\t\t\t\t\t\t\tquery[key] = new RegExp(data[key], \"i\");\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (typeof data[key] == \"object\" && !RegExp.prototype.isPrototypeOf(data[key]) && !data[key].isObjectID) {\r\n\t\t\t\t\t\t\tquery[key] = convertFilter(data[key]);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (typeof data[key] == \"object\" && data[key].isObjectID) {\r\n\t\t\t\t\t\t\tquery[key] = data[key].value;\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tquery[key] = data[key];\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn query;\r\n\t\t\t\t}\r\n\t\t\t\texports = convertFilter;\r\n\t\t\t","uid":"convertFilter","__v":0,"meta":{"revision":14,"created":1510640453434,"version":0,"updated":1510652919196},"$loki":1}
{"_id":"59aa7b4ed5faa4219026bac2","code":"\r\n\t\t\t\tfunction convert(prop, list) {\r\n\t\t\t\t\tif (Array.prototype.slice.call(arguments).length == 1) {\r\n\t\t\t\t\t\tlist = prop;\r\n\t\t\t\t\t\tprop = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn list.map(x => ({\r\n\t\t\t\t\t\tdisplayLabel: prop ? x[prop] : x,\r\n\t\t\t\t\t\t_id: x._id || x\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t\texports = convert;\r\n\t\t\t","uid":"convertToSelectableList","__v":0,"meta":{"revision":14,"created":1510640453434,"version":0,"updated":1510652919196},"$loki":2}
{"_id":"59aa7b4ed5faa4219026bac3","code":"\r\n\t\t\t\tfunction create(entityName, entityLabel, menuGroup, menuCategory, schema, fn) {\r\n\t\t\t\t\tdebug(`creating crud for entity ${entityName}`);\r\n\r\n\t\t\t\t\tlet constants = this.constants,\r\n\t\t\t\t\t\tself = this,\r\n\t\t\t\t\t\ttitle = `Manage ${entityName}`,\r\n\t\t\t\t\t\tcreate_uid = `CREATE_${entityName}_${Math.ceil(Math.random() * 10)}`,\r\n\t\t\t\t\t\tupdate_uid = `UPDATE_${entityName}_${Math.ceil(Math.random() * 10)}`,\r\n\t\t\t\t\t\tget_uid = `GET_${entityName}_${Math.ceil(Math.random() * 10)}`,\r\n\t\t\t\t\t\ttemplate = [this.libs.createId()],\r\n\t\t\t\t\t\tuserManager = self.entityRepo.infrastructure().userManager;\r\n\t\t\t\t\tif (!userManager) return fn(new Error(\"Entity Repo does not provide a means of reating menus\"));\r\n\r\n\t\t\t\t\tasync.waterfall(\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\tcallback => {\r\n\t\t\t\t\t\t\t\tthis.entityRepo.saveProcessor({\r\n\t\t\t\t\t\t\t\t\t\ttitle: `Create ${entityName}`,\r\n\t\t\t\t\t\t\t\t\t\tcode: `debug('creating new ${entityName}...'); \\n this.entityRepo.create('${entityName}',this.args.entity,callback)`,\r\n\t\t\t\t\t\t\t\t\t\tuid: create_uid\r\n\t\t\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\t\t\tretrieve: true\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t(er, proc) => {\r\n\t\t\t\t\t\t\t\t\t\tif (er) return callback(er);\r\n\t\t\t\t\t\t\t\t\t\tthis.entityRepo.saveProcessor({\r\n\t\t\t\t\t\t\t\t\t\t\t\ttitle: `Update ${entityName}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\tuid: update_uid,\r\n\t\t\t\t\t\t\t\t\t\t\t\tcode: `debug('update ${entityName}...'); \\n this.entityRepo.update('${entityName}',this.args.entity,callback)`\r\n\t\t\t\t\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\t\t\t\t\tretrieve: true\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t(er, proc) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (er) return callback(er);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.entityRepo.saveProcessor({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: `Get ${entityName}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tuid: get_uid,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcode: `debug('fetching ${entityName}...');\\nthis.$checkDomain=true; \\nthis.libs.getEntity.call(this,'${entityName}','${entityLabel}',callback);`\r\n\t\t\t\t\t\t\t\t\t\t\t\t}, (er, pr) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (er) return callback(er);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.entityRepo.getProcessor({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuid: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$in: [create_uid, update_uid, get_uid, this.constants.UIDS.PROCESSOR.LIST_ENTITY_GENERIC]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(er, list) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (er) return callback(er);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdebug(list);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet _list = list.slice().filter(x => this.constants.UIDS.PROCESSOR.LIST_ENTITY_GENERIC !== x.uid);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tasync.parallel(_list.map(v => userManager.saveClaim.bind(userManager, {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: userManager.constants.CLAIMS.PROCESSOR,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: v.title,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: v._id\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})), (er, _claims) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (er) return callback(er);\r\n                                                                debug(_claims);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tasync.parallel(_claims.map(x => userManager.addClaimToRole.bind(userManager, userManager.defaultRole, null, x[0])), (er) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (er) return callback(er);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn callback(null, list);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t(processors, callback) => {\r\n\t\t\t\t\t\t\t\tif (processors.length !== 4) return callback(new Error(\"Cannot locate all the required processors\"));\r\n\r\n\t\t\t\t\t\t\t\tcallback(\r\n\t\t\t\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t\t\t\tprocessors.reduce((x, y) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (x[y.uid] = y), x;\r\n\t\t\t\t\t\t\t\t\t}, {})\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t(er, result) => {\r\n\t\t\t\t\t\t\tif (er) return fn(er);\r\n\r\n\t\t\t\t\t\t\tdebug(\"located crud processors...\\n converting schema to template...\");\r\n\t\t\t\t\t\t\ttemplate = template.concat(new self.libs.ElementsConverter(self.libs, result, constants).convert(schema));\r\n\t\t\t\t\t\t\tdebug(`finished conversion :${JSON.stringify(template, null, \" \")}`);\r\n\t\t\t\t\t\t\ttemplate.push(\r\n\t\t\t\t\t\t\t\tself.libs.createElement(\"password\", \"Enter Password (Current User)\", \"\", constants.ELEMENTTYPE.INPUT, {\r\n\t\t\t\t\t\t\t\t\ttype: constants.INPUTTYPE.PASSWORD\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tvar processInstance = {\r\n\t\t\t\t\t\t\t\ttitle: title,\r\n\t\t\t\t\t\t\t\tdescription: `System administators can create and edit existing ${entityName}`,\r\n\t\t\t\t\t\t\t\tuid: `${entityName}_CRUD_` + Math.ceil(Math.random() * 10),\r\n\t\t\t\t\t\t\t\tsteps: [{\r\n\t\t\t\t\t\t\t\t\tstepType: constants.STEPTYPE.CLIENT,\r\n\t\t\t\t\t\t\t\t\tmode: constants.STEPMODE.VIEW,\r\n\t\t\t\t\t\t\t\t\tprocessors: [],\r\n\t\t\t\t\t\t\t\t\tform: {\r\n\t\t\t\t\t\t\t\t\t\telements: [\r\n\t\t\t\t\t\t\t\t\t\t\tself.libs.createElement(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"grid\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t`Manage ${entityName}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t`This view lets administators manage ${entityName}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\tconstants.ELEMENTTYPE.GRID, {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmode: constants.GRIDMODE.CRUD,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsource: result[get_uid]._id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgridArgs: `{\"entityName\":\"${entityName}\",\"entityLabel\":\"${entityLabel}\"}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfilter: [\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tself.libs.createElement(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${entityLabel}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`By ${entityLabel[0].toUpperCase() + entityLabel.substring(1)}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconstants.ELEMENTTYPE.INPUT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttemplateConfig: `{\"name\":\"basic\",\"config\":{\"${entityLabel || \"name\"}\":\"Title\"}}`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcommands: [],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\textra: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreateTemplate: template,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreateProcessor: result[create_uid]._id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\teditTemplate: template,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\teditProcessor: result[update_uid]._id\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tself.entityRepo.saveProcess(processInstance, function(er, proc) {\r\n\t\t\t\t\t\t\t\tif (er) return fn(er);\r\n\r\n\t\t\t\t\t\t\t\tasync.waterfall(\r\n\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t\tuserManager.saveClaim.bind(userManager, {\r\n\t\t\t\t\t\t\t\t\t\t\ttype: userManager.constants.CLAIMS.PROCESS,\r\n\t\t\t\t\t\t\t\t\t\t\tdescription: title,\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: proc._id\r\n\t\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\t\tfunction(result) {\r\n\t\t\t\t\t\t\t\t\t\t\tvar args = Array.prototype.slice.call(arguments);\r\n\t\t\t\t\t\t\t\t\t\t\tvar callback = args[args.length - 1];\r\n\t\t\t\t\t\t\t\t\t\t\tuserManager.addClaimToRole(userManager.defaultRole, null, result, function(er, role) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (er) return callback(er);\r\n\t\t\t\t\t\t\t\t\t\t\t\tcallback(null, result);\r\n\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\tfunction(result, callback) {\r\n\t\t\t\t\t\t\t\t\t\t\tuserManager.saveMenu({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisplayLabel: title,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgroup: menuGroup,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ticon: \"process\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclaims: [result._id],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"DYNAMO\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue: proc._id,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcategory: menuCategory || \"MAINMENU\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclient: userManager.webClient.clientId\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\tcallback\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\tfunction(er) {\r\n\t\t\t\t\t\t\t\t\t\tif (er) return fn(er);\r\n\r\n\t\t\t\t\t\t\t\t\t\treturn fn(null, \"successfully created crud process\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\texports = create;\r\n\t\t\t","uid":"createCRUDProcess","__v":0,"meta":{"revision":14,"created":1510640453434,"version":0,"updated":1510652919196},"$loki":3}
{"_id":"59aa7b4ed5faa4219026bac4","code":"exports= function (\r\n\tname,\r\n\tlabel,\r\n\tdescription,\r\n\ttype,\r\n\targs,\r\n\tvalidators,\r\n\tasyncVals\r\n) {\r\n\tif (\r\n\t\ttypeof name !== \"string\" ||\r\n\t\ttypeof label !== \"string\" ||\r\n\t\ttypeof description !== \"string\" ||\r\n\t\ttypeof type !== \"string\" ||\r\n\t\t(args && typeof args !== \"object\")\r\n\t)\r\n\t\tthrow new Error(\"illegal argument(s) passed to createElement\");\r\n\r\n\treturn {\r\n\t\telementType: type,\r\n\t\tlabel: label,\r\n\t\tname: name,\r\n\t\targs: args,\r\n\t\tasyncValidators: asyncVals || [],\r\n\t\tdescription: description,\r\n\t\tvalidators: validators || [],\r\n\t\tcomponent_uid: uuid()\r\n\t};\r\n}","uid":"createElement","__v":0,"meta":{"revision":14,"created":1510640453434,"version":0,"updated":1510652919196},"$loki":4}
{"_id":"59aa7b4ed5faa4219026bac5","code":"\r\n\t\t\t\texports = function() {\r\n\t\t\t\t\treturn this.createElement(\"_id\", \"\", \"\", constants.ELEMENTTYPE.HIDDEN);\r\n\t\t\t\t};\r\n\t\t\t","uid":"createId","__v":0,"meta":{"revision":14,"created":1510640453434,"version":0,"updated":1510652919196},"$loki":5}
{"_id":"59aa7b4ed5faa4219026bac7","code":"\r\n\t\t\t\t//should be called with request scope.\r\n\t\t\t\texports = function(fn) {\r\n\t\t\t\t\tif (!this.args.$authorized) return fn(new Error(\"Unauthorized\"));\r\n\t\t\t\t\tlet userManager = this.entityRepo.infrastructure().userManager,\r\n\t\t\t\t\t\tuser = this.args.$user,\r\n\t\t\t\t\t\tpassword = this.args.password || (this.args.entity && this.args.entity.password);\r\n\t\t\t\t\tif (!userManager) return fn(new Error(\"Entity Repo does not provide a means of checking user password\"));\r\n\r\n\t\t\t\t\tif (!user || !password) return fn(new Error(\"Invalid Credentials\"));\r\n\r\n\t\t\t\t\tuserManager.checkPassword(user.domain, user.client.clientId, user.username, password, (er, valid) => {\r\n\t\t\t\t\t\tif (er) return fn(er);\r\n\t\t\t\t\t\tif (!valid) return fn(new Error(\"Invalid Credentials\"));\r\n\t\t\t\t\t\tfn();\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t","uid":"isAuthorized","__v":0,"meta":{"revision":14,"created":1510640453434,"version":0,"updated":1510652919196},"$loki":6}
{"_id":"59aa7b4ed5faa4219026bac6","code":"\r\n\r\n\t\t\t\tfunction ElementsConverter(libs, processors, constants) {\r\n\t\t\t\t\tthis.libs = libs;\r\n\t\t\t\t\tthis.processors = processors;\r\n\t\t\t\t\tthis.constants = constants;\r\n\t\t\t\t\tdebug(\"elements converter constructor called\");\r\n\t\t\t\t}\r\n\t\t\t\tElementsConverter.prototype.convert = function(x) {\r\n\t\t\t\t\tlet elements = [],\r\n\t\t\t\t\t\tkeys = Object.keys(x),\r\n\t\t\t\t\t\tself = this;\r\n\t\t\t\t\tdebug(\"converting---x\");\r\n\t\t\t\t\tdebug(x);\r\n\t\t\t\t\tdebug(\"------x\");\r\n\t\t\t\t\tdebug(\"number of properties \" + keys.length);\r\n\t\t\t\t\tdebug(keys);\r\n\r\n\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\r\n\t\t\t\t\t\tlet result,\r\n\t\t\t\t\t\t\ty = keys[i];\r\n\r\n\t\t\t\t\t\tif (Array.prototype.isPrototypeOf(x[y])) {\r\n\t\t\t\t\t\t\tdebug(`converting property ${y} which is an array ${JSON.stringify(x[y], null, \" \")} `);\r\n\t\t\t\t\t\t\tresult = self.map[`${constants.ENTITYTYPE.ARRAY}`].call(self, x[y], y);\r\n\t\t\t\t\t\t\tdebug(\"array result-----x\");\r\n\t\t\t\t\t\t\tdebug(result);\r\n\t\t\t\t\t\t\tdebug(\"------x\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (typeof x[y] == \"string\" && self.map[x[y]]) {\r\n\t\t\t\t\t\t\t//this should only happen if entity is a reference in an array.\r\n\t\t\t\t\t\t\tdebug(`converting property ${y} string ${x[y]}`);\r\n\t\t\t\t\t\t\tif (x[y] !== constants.ENTITYTYPE.REFERENCE) throw new Error(\"Must be a Reference\");\r\n\r\n\t\t\t\t\t\t\tresult = self.map[x[y]].call(self, x, y);\r\n\t\t\t\t\t\t\tdebug(\"result-----x\");\r\n\t\t\t\t\t\t\tdebug(result);\r\n\t\t\t\t\t\t\tdebug(\"------x\");\r\n\t\t\t\t\t\t\telements.push(result);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!result && typeof x[y] == \"object\") {\r\n\t\t\t\t\t\t\tdebug(`converting property ${y} which is an object ${JSON.stringify(x[y], null, \" \")} `);\r\n\t\t\t\t\t\t\tif (self.map[x[y].type]) {\r\n\t\t\t\t\t\t\t\tdebug(\"type is known calling the appropriate type\");\r\n\t\t\t\t\t\t\t\tresult = self.map[x[y].type].call(self, x[y], y);\r\n\t\t\t\t\t\t\t\tdebug(\"result-----x\");\r\n\t\t\t\t\t\t\t\tdebug(result);\r\n\t\t\t\t\t\t\t\tdebug(\"-------x\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t//it doesnt have a type therefore treat it like an object.\r\n\t\t\t\t\t\t\t\tdebug(\"type is unknown so treating it like an object...\");\r\n\t\t\t\t\t\t\t\tresult = self.map[`${constants.ENTITYTYPE.OBJECT}`].call(self, x[y], y);\r\n\t\t\t\t\t\t\t\tdebug(\"result-----x\");\r\n\t\t\t\t\t\t\t\tdebug(result);\r\n\t\t\t\t\t\t\t\tdebug(\"-------x\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!result) throw new Error(\"unknown type , could not parse\");\r\n\r\n\t\t\t\t\t\telements.push(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdebug(`elements---------x\\n ${JSON.stringify(elements, null, \" \")}\\n-------x`);\r\n\r\n\t\t\t\t\treturn elements;\r\n\t\t\t\t};\r\n\t\t\t\tElementsConverter.prototype.map = {\r\n\t\t\t\t\t[constants.ENTITYTYPE.STRING]: function(data, name) {\r\n\t\t\t\t\t\tdebug(`converter called with arguments ${JSON.stringify(arguments, null, \" \")}`);\r\n\t\t\t\t\t\treturn this.libs.createElement(name, this.firstWord(name), \"\", this.constants.ELEMENTTYPE.INPUT, {\r\n\t\t\t\t\t\t\ttype: constants.INPUTTYPE.TEXT\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[constants.ENTITYTYPE.NUMBER]: function(data, name) {\r\n\t\t\t\t\t\tdebug(`converter called with arguments ${JSON.stringify(arguments, null, \" \")}`);\r\n\t\t\t\t\t\treturn this.libs.createElement(name, this.firstWord(name), \"\", this.constants.ELEMENTTYPE.INPUT, {\r\n\t\t\t\t\t\t\ttype: constants.INPUTTYPE.NUMBER\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[constants.ENTITYTYPE.BOOLEAN]: function(data, name) {\r\n\t\t\t\t\t\tdebug(`converter called with arguments ${JSON.stringify(arguments, null, \" \")}`);\r\n\t\t\t\t\t\treturn this.libs.createElement(name, this.firstWord(name), \"\", this.constants.ELEMENTTYPE.INPUT, {\r\n\t\t\t\t\t\t\ttype: this.constants.INPUTTYPE.CHECKBOX\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[constants.ENTITYTYPE.DATE]: function(data, name) {\r\n\t\t\t\t\t\tdebug(`converter called with arguments ${JSON.stringify(arguments, null, \" \")}`);\r\n\t\t\t\t\t\treturn this.libs.createElement(name, this.firstWord(name), \"\", this.constants.ELEMENTTYPE.INPUT, {\r\n\t\t\t\t\t\t\ttype: constants.INPUTTYPE.DATE\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[constants.ENTITYTYPE.OBJECT]: function(data, name) {\r\n\t\t\t\t\t\tdebug(`converter called with arguments ${JSON.stringify(arguments, null, \" \")}`);\r\n\t\t\t\t\t\treturn this.libs.createElement(name, this.firstWord(name), \"\", this.constants.ELEMENTTYPE.SECTION, {\r\n\t\t\t\t\t\t\telements: this.convert(data)\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[constants.ENTITYTYPE.ARRAY]: function(data, name) {\r\n\t\t\t\t\t\tdebug(`converter called with arguments ${JSON.stringify(arguments, null, \" \")}`);\r\n\t\t\t\t\t\treturn this.libs.createElement(name, this.firstWord(name), \"\", this.constants.ELEMENTTYPE.LIST, {\r\n\t\t\t\t\t\t\titemTemplate: this.convert(data[0])\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t[constants.ENTITYTYPE.REFERENCE]: function(data, name) {\r\n\t\t\t\t\t\tdebug(`reference converter called with arguments ${JSON.stringify(arguments, null, \" \")}`);\r\n\t\t\t\t\t\treturn this.libs.createElement(name, this.firstWord(name), \"\", this.constants.ELEMENTTYPE.SELECT, {\r\n\t\t\t\t\t\t\ttype: this.constants.ELEMENT_SELECT_SOURCETYPE.PROCESSOR,\r\n\t\t\t\t\t\t\tconfig: {\r\n\t\t\t\t\t\t\t\tvalue: this.processors[this.constants.UIDS.PROCESSOR.LIST_ENTITY_GENERIC]._id\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tcustomArgs: `{\"entityName\":\"${data.ref}\",entityLabel:\"name\"}`\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tElementsConverter.prototype.firstWord = function(string) {\r\n\t\t\t\t\treturn string[0].toUpperCase() + string.substring(1);\r\n\t\t\t\t};\r\n\t\t\t\texports = ElementsConverter;\r\n\r\n\t\t\t","uid":"ElementsConverter","__v":0,"meta":{"revision":14,"created":1510640453434,"version":0,"updated":1510652919196},"$loki":7}
{"_id":"59aad9daf43ed31314c3bb72","code":"exports = function(entityName, entityLabel, extend, fn) {\r\n  var options,\r\n    query = {},\r\n    self = this,\r\n    args = this.args,\r\n    entity = entityName;\r\n  if (Array.prototype.slice.call(arguments).length == 3) {\r\n    fn = extend;\r\n    extend = null;\r\n  }\r\n  if (this.args && this.args.count) {\r\n    options = {\r\n      limit: this.args.count,\r\n      sort: this.args.sort || {\r\n        _id: -1\r\n      }\r\n    };\r\n    if (this.args.depth) {\r\n      options.full = true;\r\n    }\r\n    if (this.args._id)\r\n      if (this.args.prev) {\r\n        query._id = {\r\n          $gt: this.args._id\r\n        };\r\n        options.sort._id = 1;\r\n      } else {\r\n        query._id = {\r\n          $lt: this.args._id\r\n        };\r\n      }\r\n  }\r\n\r\n  if (this.args.query) {\r\n    debug(\"query exists....\");\r\n    Object.assign(query, this.libs.convertFilter(this.args.query));\r\n    debug(query);\r\n  }\r\n\r\n  if (this.$checkDomain && this.args.$user.domain) {\r\n    query.domain = { $in: [this.args.$user.domain, undefined, null] };\r\n  }\r\n  this.entityRepo.get(entity, query, options, function(er, x) {\r\n    if (er) return fn(er);\r\n    var result = !args.full\r\n      ? x.map(function(z) {\r\n          return {\r\n            _id: z._id,\r\n            displayLabel: z[entityLabel]\r\n          };\r\n        })\r\n      : extend ? x.map(v => extend(v)) : x;\r\n    if (!args.count) fn(null, result);\r\n    else {\r\n      if (query._id) delete query._id;\r\n      self.entityRepo.count(entity, query, function(er, count) {\r\n        fn(er, {\r\n          items: result,\r\n          total: count\r\n        });\r\n      });\r\n    }\r\n  });\r\n};\r\n","uid":"getEntity","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":8}
{"_id":"59ad47179d3cb0351012e83e","code":"\r\n\t\t\tfunction convert(entityName, file, context, checks, extend, fileUpload, fileParser, threadPool, entityRepo, fn) {\r\n\t\t\t\tfunction getDefaultChecks(_keys) {\r\n\t\t\t\t\treturn (function(rows, cb) {\r\n\t\t\t\t\t\tlet errors = [],\r\n\t\t\t\t\t\t\trequiredKeys = _keys.sort();\r\n\t\t\t\t\t\tconsole.log(`sorted keys ${requiredKeys}`);\r\n\t\t\t\t\t\ttry {\r\n\r\n\r\n\t\t\t\t\t\t\tfor (var i = 0; i < rows.length; i++) {\r\n\t\t\t\t\t\t\t\tlet keys = Object.keys(rows[i]);\r\n\t\t\t\t\t\t\t\tif (keys.length < requiredKeys.length) {\r\n\t\t\t\t\t\t\t\t\terrors.push(`Missing column(s) row:${i+1}`);\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlet _sortedKeys = keys.sort(),\r\n\t\t\t\t\t\t\t\t\tmustHave = requiredKeys.slice();\r\n\r\n\t\t\t\t\t\t\t\tfor (var z = 0; z < _sortedKeys.length; z++) {\r\n\t\t\t\t\t\t\t\t\tif (rows[i][_sortedKeys[z]]) {\r\n\t\t\t\t\t\t\t\t\t\tmustHave.splice(mustHave.indexOf(_sortedKeys[z]), 1);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (mustHave.length)\r\n\t\t\t\t\t\t\t\t\terrors.push(`row ${i+1} does not have a valid value for column(s) ${mustHave.join(',')}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tconsole.log(errors)\r\n\t\t\t\t\t\t\tif (errors.length) return cb(errors.join('|'));\r\n\r\n\t\t\t\t\t\t\tcb(null, rows);\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\tcb(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).toString().replace('_keys', JSON.stringify(_keys));\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfileUpload.readFile(file, (er, data, description) => {\r\n\t\t\t\t\tif (er) return debug('An error occurred while reading uploaded file'), debug(er), fn(new Error('Error occurred while attempting to read uploaded file'));\r\n\r\n\t\t\t\t\tfileParser.parseOnly(description, data, (er, rows) => {\r\n\t\t\t\t\t\tif (er) return debug('An error occurred while parsing uploaded file'), debug(er), fn(new Error('Error occurred while attempting to parse uploaded file'));\r\n\r\n\t\t\t\t\t\tlet process =\r\n\t\t\t\t\t\t\t\"    console.log('its running at all');\" +\r\n\t\t\t\t\t\t\t\"    if(!data.items.length) return cb(new Error('file has no rows'));\" +\r\n\t\t\t\t\t\t\t\"    let _innerChecks='{i}';\" +\r\n\t\t\t\t\t\t\t\"    try{\" +\r\n\t\t\t\t\t\t\t\"        console.log('converting items...');\" +\r\n\t\t\t\t\t\t\t\"        let joined = data.items.map((x,ind)=>{\" +\r\n\t\t\t\t\t\t\t\"           return Object.assign({},x,data.rest||{});\" +\r\n\t\t\t\t\t\t\t\"        });\" +\r\n\t\t\t\t\t\t\t\"        console.log('conversion successful');\" +\r\n\t\t\t\t\t\t\t\"        if(!_innerChecks)return cb(null,joined);\" +\r\n\t\t\t\t\t\t\t\"        _innerChecks(joined,(er)=>{\" +\r\n\t\t\t\t\t\t\t\"            if(er) return cb(er);\" +\r\n\r\n\t\t\t\t\t\t\t\"            cb(null,joined);\" +\r\n\t\t\t\t\t\t\t\"        });\" +\r\n\r\n\t\t\t\t\t\t\t\"    }catch(e){\" +\r\n\t\t\t\t\t\t\t\"        return cb(new Error('error occurred processing file records'));\" +\r\n\t\t\t\t\t\t\t\"    }\";\r\n\r\n\r\n\t\t\t\t\t\tdebug(rows);\r\n\r\n\t\t\t\t\t\tlet _checks = !checks ? '' : (Function.prototype.isPrototypeOf(checks)) ? checks.toString() : getDefaultChecks(checks),\r\n\t\t\t\t\t\t\t_process = new Function('data', 'cb', process.replace('\\'{i}\\'', _checks));\r\n\r\n\t\t\t\t\t\tthreadPool.run({\r\n\t\t\t\t\t\t\titems: rows,\r\n\t\t\t\t\t\t\trest: context\r\n\t\t\t\t\t\t}, _process, function(er, result) {\r\n\r\n\t\t\t\t\t\t\tif (er) return debug('an error occurred in threadpool'), debug(er), fn(new Error(Array.prototype.isPrototypeOf(er) && er.join() || er));\r\n\r\n\t\t\t\t\t\t\tdebug(result);\r\n\r\n\t\t\t\t\t\t\tdebug('thread pool work completed successfully');\r\n\r\n\t\t\t\t\t\t\textend = extend || function(list, cb) {\r\n\t\t\t\t\t\t\t\tsetImmediate(cb, null, list);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tdebug('finished setting up extend');\r\n\t\t\t\t\t\t\t//debug(extend);\r\n\t\t\t\t\t\t\tdebug(extend.toString());\r\n\t\t\t\t\t\t\textend(result, (er, extendedResult) => {\r\n\t\t\t\t\t\t\t\tdebug('got here');\r\n\t\t\t\t\t\t\t\tif (er) return fn(er);\r\n\r\n\t\t\t\t\t\t\t\tdebug(extendedResult);\r\n\t\t\t\t\t\t\t\tlet tasks = extendedResult.map(x => (entityRepo.create.bind(entityRepo, entityName, x)));\r\n\t\t\t\t\t\t\t\t//debug(tasks);\r\n\r\n\t\t\t\t\t\t\t\tasync.parallel(tasks, function(er) {\r\n\t\t\t\t\t\t\t\t\tif (er) return debug('an error occurred while saving items'), fn(er);\r\n\r\n\t\t\t\t\t\t\t\t\tdebug('finished!!!!');\r\n\r\n\t\t\t\t\t\t\t\t\tfn(null, 'Successfully uploaded records');\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t})\r\n\r\n\r\n\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\texports = convert;\r\n\r\n\t\t","uid":"convertFileAndSave","__v":0,"meta":{"revision":14,"created":1510640453434,"version":0,"updated":1510652919196},"$loki":9}
{"_id":"59b019305fcc3e4704ea0b07","code":"/***\n *  \n * \n * */\nfunction resolve(studentKind,repo,fn){\n        if(!repo){\n            return setImmediate(fn,new Error('entityRepo must be passed'));\n        }\n        switch(studentKind){\n            case 'UNN_Existing_UNDERGRADUATE_Student_Details':\n                studentType=function(x){ return x.group && x.group.toLowerCase().indexOf('under')!==-1;};\n                break;\n            case 'UNN_Existing_PG_Student_Details':\n                studentType=function(x){ return x.group && x.group.toLowerCase().indexOf('pg')!==-1;};\n                break;\n            case 'UNN_Existing_JUPEB_Student_Details':\n                studentType=function(x){ return x.group && x.group.toLowerCase().indexOf('jupeb')!==-1;};\n                break;\n            \n        }\n        repo.get('StudentType',{},(er,types)=>{\n            if(er) return fn(er);\n            if(!types.length) return fn(new Error('Cant find any student types'));\n            \n            debug(types);\n            studentType=types.filter(studentType);\n            if(!studentType.length) return fn(new Error('Cant find student type for that kind of student'));\n            \n            studentType=studentType[0]._id.toString();\n            fn(null,studentType);\n        });\n}\nexports=resolve;\n\n","uid":"resolveStudentType","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":10}
{"_id":"59b0fc6057ee8f2d94b962b6","code":"function getUI(fn){\n\nlet rp=this.entityRepo;\nif(!rp) {\n    setImmediate(fn,new Error('Repo cannot be null'));\n}\nif(!fn)\n  throw new Error('callback func cannot be null');\n  \n   async.waterfall([rp.getProcessor.bind(null,{uid:{$in:['DEPARTMENTS_AND_AREA','GET_UNN_JUPEB_Department_10','GET_SESSIONS','GET_MODEOFENTRY','GET_MODEOFSTUDY','GET_YearOfStudy_5']}})],(er,processors)=>{\n    if(er) return fn(er);\n    if(!processors.length|| processors.length<6) return fn(new Error('could not find all the processors required for selectable options'));\n    \n    processors=processors.reduce((sum,x)=>{\n        return sum[x.uid]=x._id,sum;\n    },{})\n    let optionGroupItems=[],\n    yearOfStudy=this.libs.createElement('yearOfStudy','Year of Study','',this.constants.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_YearOfStudy_5}}),\n    modeOfEntry=this.libs.createElement('modeOfEntry','Mode of Entry','',this.constants.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_MODEOFENTRY}}),\n    modeOfStudy=this.libs.createElement('modeOfStudy','Mode of Study','',this.constants.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_MODEOFSTUDY}}),\n    sessions=this.libs.createElement('session','Session','',this.constants.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_SESSIONS}}),\n    departments=()=>this.libs.createElement('department','Department','',this.constants.ELEMENTTYPE.SELECTSET,{processor:processors.DEPARTMENTS_AND_AREA,path:'departmentOption'}),\n    pgYearOfStudy=Object.assign({},yearOfStudy);\n    pgYearOfStudy.args.customArgs=JSON.stringify({group:'PG'});\n    let yearOfEntry=this.libs.createElement('yearOfEntry','Year of Entry','',this.constants.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_YearOfStudy_5}})\n    \n    const getTypeConfig=(type)=>{\n        let elements,id,dp=departments();\n           dp.args.processorArgs=JSON.stringify({query:{[`studentTypeConfig.${type._id}`]:true}});\n       if(/undergraduate/ig.test(type.group)){\n           \n           elements=[dp,yearOfStudy,modeOfStudy,yearOfEntry];\n           id=\"UNN_Existing_UNDERGRADUATE_Student_Details\";\n       }\n       if(/pg/ig.test(type.group)){\n           elements=[dp,modeOfStudy,pgYearOfStudy];\n           id=\"UNN_Existing_PG_Student_Details\";\n       }\n           if(/jupeb/ig.test(type.group)){\n           elements=[ dp,sessions];\n           id=\"UNN_Existing_JUPEB_Student_Details\";\n       }\n       return { elements,id};\n    };\n   \n   rp.get('StudentType',{domain:this.args.$user.domain},(er,types)=>{\n       if(er) return fn(er);\n       \n\n       fn(null,types.map(type=>{\n           let {elements,id}=getTypeConfig(type);\n           return {\n               displayLabel:type.name,\n               id,\n               elements,\n               _id:type._id\n           }\n       }));\n       \n   })\n   \n   \n});\n}\n\nexports=getUI;","uid":"getStudentProgrammeUI","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":11}
{"_id":"59b2a6e82f0eb326586e9f09","code":"\n\n//check if this student account has already been created.\n//if it has , return the interim username and password.\n//if it hasnt create the student account with an interim username and password.\nfunction verify({studentEntity,studentEntityKindClass,studentRole,domainUID,resolveEntityKind,extendNewStudent},callback){\n    \n    const rollback=(er)=>{\n                    let tasks=[];\n                    if(created.user){\n                        tasks.push(inf.userManager.deleteUser.bind(inf.userManager,created.user));\n                    }\n                    if(created.student){\n                        tasks.push(this.entityRepo.delete.bind(null,studentEntity,created.user));\n                    }\n                    if(!tasks.length) return callback(er);\n                    \n         return async.parallel(tasks,()=>{ callback(er);})\n    };\n    \nconst generateUsername=(details,domain,cb)=>{\n        let username= details.firstName.substring(0,2) + details.surname+(Math.floor(Math.random() * 20));\n        inf.userManager.getUser(username,domain,(er,st)=>{\n           if(er) return cb(er);\n           if(st && st.length) return generateUsername(details,domain,cb); \n           if(!st||!st.length) return cb(null,username);\n         });\n    };\nlet inf = this.entityRepo.infrastructure(),\n    created={},\n    entity = this.args,\n    refNo = entity.option.refNo||entity.option.regNo,\n        initialQuery={studentType:entity.studentType,refNo};\n        debug(initialQuery);\n        if(!inf||!inf.userManager) return callback(new Error('Infrastructure is not properly set up'));\n        \n        async.waterfall([\n            this.entityRepo.get.bind(null,studentEntity,initialQuery),\n            (student,fn)=>{\n                \n                if(!student.length){\n                    //student does not exist so create a new one.\n                    async.waterfall([\n                     (resolveEntityKind) ? resolveEntityKind() : this.entityRepo.get.bind(null,studentEntityKindClass,{refNo}),\n                    (ticket,_fn)=>{\n                        if(!ticket.length) return _fn(new Error('Could not locate student'));\n                        setImmediate(_fn,null,ticket[0]);\n                    },\n                    (ticket,_fn)=>{\n                        //create new student.\n                        let programmeDetails=ticket.programmeDetails,\n                        personalDetails=ticket;\n                        delete personalDetails.programmeDetails;\n                        delete programmeDetails._id\n                        delete personalDetails._id\n                        \n                       \n                        let new_student = Object.assign({},{personalDetails,programmeDetails,refNo,studentType:initialQuery.studentType},(extendNewStudent ? extendNewStudent():{}));\n                        //generate interim password.\n                        new_student.interim='password';\n                        //remove _id\n                        debug(new_student);\n                        \n                        this.entityRepo.create(studentEntity,new_student,(er,result)=>{debug('after creating student'); if(er) return debug(er),_fn(er); return created.student=result._id, debug(result),_fn(null,result);});\n                    },\n                    (new_student,_fn)=>{\n                     \n                      //get domain\n                      inf.userManager.getDomains({uid:domainUID},(er,dms)=>{if(er) return _fn(er);if(!dms.length)return _fn(new Error('cannot find requested domain'));  return new_student.domain=dms[0]._id, _fn(null,new_student);});\n                    },\n                    (new_student,_fn)=>{\n                        //get role\n                      inf.userManager.getRoles({name:studentRole},(er,role)=>{if(er) return _fn(er);if(!role.length)return _fn(new Error('cannot find requested role')); return new_student.role=role[0]._id, _fn(null,new_student);});  \n                    },\n                    (new_student,_fn) => {\n                        debug('----------');\n                        debug(new_student);\n                        debug('----------');\n                       // let username = new_student.personalDetails.firstName.substring(0,2) + new_student.personalDetails.surname+(Math.floor(Math.random() * 10));\n                        \n                        \n                        \n                        generateUsername(new_student.personalDetails,new_student.domain,(er,username)=>{\n                            if(er) return _fn(er);\n                            \n                            //create user.\n                            inf.userManager.register({username,password:new_student.interim,domain:new_student.domain,roles:[new_student.role]},(er,user)=>{\n                                if(er) return _fn(er);\n                                debug('-----registered user-----');\n                                debug(user);\n                                debug('\\t----------------')\n                                created.user=user._id;\n                                this.entityRepo.update(studentEntity,{_id:new_student._id,userId:user._id},(er)=>{if(er) return _fn(er); new_student.userId=user._id; _fn(null,new_student)})\n                            });\n                        });\n                        \n                            \n     \n                    }],(er,new_student)=>{\n                        if(er) return fn(er);\n                        fn(null,new_student);\n                    });\n                    return;\n                }\n                if(student[0].updatedProfile) return setImmediate(fn,new Error('Student has updated his/her profile'));\n                //student already exists so return student.\n               setImmediate(fn,null,student[0]);\n            },\n            (student,fn)=>{\n                debug('found student----x')\n                debug(student);\n                debug('--------x');\n                //get students username and password.\n                inf.userManager.getUserById(student.userId,(er,user)=>{if(er) return fn(er);  fn(null,student,user)});\n            }]\n            ,\n            (er,student,user)=>{\n                if(er)\n                {\n                    return rollback(er);\n                }\n                debug('ran successfully');\n                callback(null,`Use these credentials to login to your account Username:${user.username},Password:${student.interim}`);\n            });\n}\n\nexports=verify;\n   ","uid":"verifyStudent","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":12}
{"_id":"59b316cdd7009723e4f7caad","code":"function studentMustUpdateProfile(menu,fn){\n   let inf= this.entityRepo.infrastructure();\n   inf.userManager.getRoles({name:'unn_student'},(er,roles)=>{\n       if(er) return fn(er);\n       if(!roles.length) return fn(new Error('cant find unn_student role'));\n       let role=roles[0];\n       //debug(this.args.$user);\n       //debug(this.args);\n       if(!this.args.$user|| !this.args.$user.roles||!this.args.$user.roles.length){\n           return fn(new Error('user has no roles'));\n       }\n        \n       if(this.args.$user.roles.filter(x=> x._id== role._id).length){\n           \n           this.entityRepo.get('UNN_Student',{userId:this.args.$user._id},(er,student)=>{\n               if(er) return fn(er);\n               if(!student.length) return fn(new Error('Could not find any student details'));\n               \n               if(!student[0].updatedProfile){\n                        let profile = menu.filter(x=>/unn_student_profile/i.test(x.uid));\n                         if(!profile.length) return debug('profile view not present in this menu category.'),fn(null,[]);\n                         \n                         debug('profile only view');\n                         debug(profile);\n                         profile[0].home=true;\n                         return fn(null,profile);\n               }\n               \n               fn(null,menu);\n           });\n           return;\n       }\n       \n       return fn(null,menu);\n   });\n}\n\nfunction filterPGStudentMenu(menu,fn){\n   let inf= this.entityRepo.infrastructure(),allowed=['admissions','account','acceptance','school fees','hostel allocation','course registration'];\n   if(inf.userManager.inRole('unn_student',this.args.$user)){\n        return this.entityRepo.get('UNN_Student',{userId:this.args.$user._id},{full:true,one:true},(er,student)=>{\n           if(er) return fn(er);\n           if(!student) return fn(new Error('Could not find any student details'));\n           \n           if(student.studentType.group=='PG'){\n               let result= menu.filter(x=>allowed.indexOf(x.group.toLowerCase())!==-1);\n               debug(result);\n               return fn(null,result);\n           }\n           return fn(null,menu);\n        });\n   }\n   \n   return fn(null,menu);\n   \n}\n\nexports=[studentMustUpdateProfile,filterPGStudentMenu];","uid":"menuFilters","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":13}
{"_id":"59b3317a9353150c8880cc95","code":"function ui(student,fn){\n    let e=this.libs.createElement,c=this.constants;\n   function getProgrammeDetailsFor(studentType,processors){\n       let elements=[],\n            yearOfStudy=e('yearOfStudy','Year of Study','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_YearOfStudy_5}}),\n            modeOfEntry=e('modeOfEntry','Mode of Entry','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_MODEOFENTRY}}),\n            modeOfStudy=e('modeOfStudy','Mode of Study','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_MODEOFSTUDY}}),\n            sessions=e('session','Session','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_SESSIONS}}),\n            departments=e('department','Department','',c.ELEMENTTYPE.SELECTSET,{processor:processors.DEPARTMENTS_AND_AREA,path:'departmentOption'}),\n            jupeb_departments=e('department','Department','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_UNN_JUPEB_Department_10}}),\n            programmeOptions=e('programmeOption','Programme','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_SCHOOLPROGRAMME}});\n            \n            \n            \n       \n       if(/pg/ig.test(studentType.group)){\n           programmeOptions.args.config.customArgs = JSON.stringify({query:{group:'PG'}});\n           yearOfStudy.args.config.customArgs= programmeOptions.args.config.customArgs;\n           elements=[departments,yearOfStudy,modeOfStudy,modeOfEntry,sessions,programmeOptions,\n           e('qualifications','Particulars Of Tertiary Institution/Qualification','',c.ELEMENTTYPE.LIST,{\n               itemTemplate:[            e('nameAndAddress','Name & Address of Institution','',c.ELEMENTTYPE.INPUT),\n                                         e('reg No','Reg No','',c.ELEMENTTYPE.INPUT),\n                                         e('from','From','',c.ELEMENTTYPE.INPUT,{type:c.INPUTTYPE.DATE}),\n                                                    e('to','To','',c.ELEMENTTYPE.INPUT,{type:c.INPUTTYPE.DATE}),\n                                        e('certificate','Certificate','',c.ELEMENTTYPE.INPUT),\n            e('fieldOfStudy','Field of Study','',c.ELEMENTTYPE.INPUT),\n            e('grade','Grade','',c.ELEMENTTYPE.INPUT)]\n           }),\n           e('employmentHistory','Employment Since Leaving School, College/University','',c.ELEMENTTYPE.LIST,{\n               itemTemplate:[            e('nameAndAddress','Name & Address of Employer','',c.ELEMENTTYPE.INPUT),\n                                         e('from','From','',c.ELEMENTTYPE.INPUT,{type:c.INPUTTYPE.DATE}),\n                                         e('to','To','',c.ELEMENTTYPE.INPUT,{type:c.INPUTTYPE.DATE}),\n                                         e('reason','Reason for leaving','',c.ELEMENTTYPE.INPUT)]\n           })\n           ];\n       }\n        if(/under/ig.test(studentType.group)){\n            programmeOptions.args.config.customArgs=JSON.stringify({query:{group:'UNDERGRADUATE'}});\n             yearOfStudy.args.config.customArgs= programmeOptions.args.config.customArgs;\n            elements=[departments,yearOfStudy,modeOfStudy,modeOfEntry,sessions,programmeOptions];\n       }\n       \n       if(/jupeb/ig.test(studentType.group)){\n           elements=[jupeb_departments,sessions];\n       }\n       \n       return elements;\n   }\n   \nthis.entityRepo.get('StudentType',{},(er,studentTypes)=>{\n            if(er) return fn(er);\n            if(!studentTypes.length) return fn(new Error('Student types have not been setup'));\n            \n     this.libs.getProcessors(this.entityRepo,['GET_GENDERS','GET_STATES','DEPARTMENTS_AND_AREA','GET_UNN_JUPEB_Department_10','GET_SESSIONS','GET_MODEOFENTRY','GET_MODEOFSTUDY','GET_RELATIONSHIPS','GET_YearOfStudy_5','GET_SCHOOLPROGRAMME'],(er,processors)=>{\n       if(er) return fn(er);\n             try{\n                 debug(processors);\n        let elements= (this.args.$description && this.args.$description.steps[0].form.elements) ||[];\n        elements.length=0;\n        \n        //Personal details\n        elements.push(Object.assign({order:2},e('personalDetails','Personal Details','',c.ELEMENTTYPE.SECTION,{})));\n        elements[0].args.elements=[\n            e('firstName','First Name','',c.ELEMENTTYPE.INPUT),\n            e('middlename','Middlename','',c.ELEMENTTYPE.INPUT),\n            e('surname','Surname','',c.ELEMENTTYPE.INPUT),\n            e('dob','Date of Birth','',c.ELEMENTTYPE.INPUT,{type:c.INPUTTYPE.DATE}),\n            e('gender','Gender','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_GENDERS}}),\n            e('state','State','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_STATES}}),\n            e('homeTown','Home Town','',c.ELEMENTTYPE.INPUT),\n            e('localGovt','LGA','',c.ELEMENTTYPE.INPUT),\n            e('otherNames','Other Names','',c.ELEMENTTYPE.INPUT)];\n           \n        ////////////////////////////////////////////////////////////////////////////////////////////\n        \n        //Contact\n            elements.push(Object.assign({order:3},e('contactDetails','Contact Details','',c.ELEMENTTYPE.SECTION,{})));\n        elements[1].args.elements=[\n            e('mobile','Phone Number','',c.ELEMENTTYPE.INPUT),\n            e('email','Email','',c.ELEMENTTYPE.INPUT),\n            e('contactAddress','Contact Address','',c.ELEMENTTYPE.INPUT),\n            e('permanentAddress','Permanent Home Address','',c.ELEMENTTYPE.INPUT)];\n       \n       \n        ////////////////////////////////////////////////////////////////////////////////////////////\n        \n        //sponsor Details\n        elements.push(Object.assign({order:6},e('sponsorDetails','Sponsor','',c.ELEMENTTYPE.SECTION,{})));\n        elements[2].args.elements=[\n            e('surname','Surname','',c.ELEMENTTYPE.INPUT),\n            e('firstName','First Name','',c.ELEMENTTYPE.INPUT),\n            e('middlename','Middle Name','',c.ELEMENTTYPE.INPUT),\n            e('address','Contact Address','',c.ELEMENTTYPE.INPUT),\n            e('mobile','Phone Number','',c.ELEMENTTYPE.INPUT)\n            ]\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        \n        \n        //next of kin Details\n        elements.push(Object.assign({order:5},e('nextOfKinDetails','Next of Kin','',c.ELEMENTTYPE.SECTION,{})));\n        elements[3].args.elements=[\n            e('surname','Surname','',c.ELEMENTTYPE.INPUT),\n            e('firstName','First Name','',c.ELEMENTTYPE.INPUT),\n            e('middlename','Middle Name','',c.ELEMENTTYPE.INPUT),\n            e('address','Contact Address','',c.ELEMENTTYPE.INPUT),\n            e('mobile','Phone Number','',c.ELEMENTTYPE.INPUT),\n            e('relationship','Relationship','',c.ELEMENTTYPE.SELECT,{type:'PROCESSOR',config:{value:processors.GET_RELATIONSHIPS}})\n            ]\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        \n        //Programme Details\n        let studentType=e('studentType','Student Type','',c.ELEMENTTYPE.SELECTSET,{\n            disabled:true,\n            path:'programmeDetails',\n            items:\n                studentTypes.map(st=>({\n                    id:st._id,\n                    displayLabel:st.name,\n                    elements:getProgrammeDetailsFor(st,processors)\n                }))\n                \n        });\n        elements.push(Object.assign({order:4},studentType));\n        ////////////////////////////////////////////////////////////////////////////////////////////\n            \n        elements.push(Object.assign({order:1,uid:'PROFILE_PIC'},e('profilePic','Passport','All students must upload a passport photograph with either white or black background',this.constants.ELEMENTTYPE.FILEUPLOAD,{ fileType:'png|jpg|jpeg',showPreview:true })));\n       \n        elements.push(e('_id','','',c.ELEMENTTYPE.HIDDEN));\n       \n        setImmediate(fn,null,this.args.$description||elements);\n        }catch(e){\n            debug(e);\n            setImmediate(fn,e);\n        }  \n       \n   });\n       \n});\n       \n\n}\n\nexports=ui;","uid":"studentProfileUI","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":14}
{"_id":"59b3aa56914961318090fc94","code":"function get(repo,list,fn){\n    if(!repo){\n        return setImmediate(fn,new Error('EntityRepo is required to fetch processors'));\n    }\n    if(!list ||!list.length||!Array.prototype.isPrototypeOf(list)){\n        return setImmediate(fn,new Error('Empty list of processors to find'));\n    }\n        repo.getProcessor({uid:{$in:list}},(er,processors)=>{\n        if(er) return fn(er);\n        if(processors.length!==list.length) return fn(new Error('failed to retrieve all the required options'));\n        \n        processors= processors.reduce((sum,x)=>{ return sum[x.uid]=x._id,sum; },{});\n        \n        fn(null,processors);\n    })\n}\n\nexports=get;","uid":"getProcessors","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":15}
{"_id":"59b67e4773ffa85190542980","code":"function getHtml(uid,context,domain,fn){\n    \n    if(Array.prototype.slice.call(arguments).length==3){\n        fn=domain;\n        domain=null;\n    }\n    let inf=this.entityRepo.infrastructure();\n    debug(`html context:${JSON.stringify(context||{},null,' ')}`)\n    if(!inf || !inf.templating){\n        return setImmediate(fn,new Error('Infrastructure missing ejs support'));\n    }\n    \n    if(!this.args.$user){\n        return setImmediate(fn,new Error('A logged in user is required'));\n    }\n    \n    this.entityRepo.get('Report',{domain:domain||this.args.$user.domain,uid},(er,report)=>{\n        if(er) return fn(er);\n        \n        if(!report||!report.length || !report[0].template) return fn(new Error(`Could not find that template:${uid}`));\n        \n        try{\n            let html=inf.templating.render(report[0].template,context);\n            fn(null,html);\n        }catch(e){\n            debug('error occurred while parsing template');\n            debug(e);\n            return fn(e);\n        }\n    });\n    \n}\n\nexports=getHtml;","uid":"getHtml","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":16}
{"_id":"59b7c373965bc733d0b7312f","code":"exports=function(old,exemptFields){\n    if(!exemptFields|| !exemptFields.length) throw new Error('Empty exemption list');\n     let new_obj=Object.assign({},old);\n     exemptFields.reduce((sum,x)=>{ return delete sum[x],sum },new_obj);\n    return new_obj;\n}","uid":"mergeAndProtect","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":17}
{"_id":"59bdbdf9983a4a0e882a61d7","code":"function visitElements(ui,fn){\r\n    function runThroughObj(conditions, data, result = {}, parent = null) {\r\n\tObject.keys(data).forEach(key => {\r\n\t\tlet send = false;\r\n\t\tfor (var v = 0; v < conditions.length; v++) {\r\n\t\t\tif (conditions[v](key, data, result, parent)) return result;\r\n\t\t}\r\n\t\tif (Array.prototype.isPrototypeOf(data[key]))\r\n\t\t\treturn data[key].forEach(function(element) {\r\n\t\t\t\trunThroughObj(conditions, element, result, data);\r\n\t\t\t});\r\n\t\tif (data[key] && typeof data[key] == \"object\")\r\n\t\t\treturn runThroughObj(conditions, data[key], result, data);\r\n\t});\r\n\treturn result;\r\n}\r\n\r\n runThroughObj([function(key,data){\r\n     if(key == 'elementType'){\r\n         fn(data);\r\n     }\r\n }],ui);\r\n}\r\n\r\n\r\nexports=visitElements\r\n","uid":"visitElements","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":18}
{"_id":"59c02c04f0c3e43dcc70c4e0","code":"function clear(entityName,fn){\n    debug(arguments);\n    \n    if(!this.args.entity.clearance)\n      return setImmediate(fn,null,'No changes');\n    \n    let clearance=this.args.entity.clearance,\n    cleared=false;\n    this.entityRepo.get('ClearanceDocument',{domain:this.args.$user.domain},(er,docs)=>{\n       if(er) return fn(er);\n       \n       if(!docs.length) return fn(null,'Clearance hasnt been setup for this student type');\n       \n       let i=0;\n       docs.forEach(x=>{\n          if(clearance[x._id]){\n              i++;\n          }\n       });\n       \n       if(i>=docs.length)\n        cleared=true;\n        \n        this.entityRepo.update(entityName,{_id:this.args.entity._id,cleared,clearance},(er)=>{\n            if(er) return fn(er);\n            \n            debug(entityName);\n            fn(null,`Successfully ${(cleared && 'Cleared')||'Updated'} Student`);\n        })       \n       \n    });\n    \n    \n\n}\n\n\n\n\n\nexports=clear","uid":"clearStudent","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":19}
{"_id":"59c89a5d755d4031cc8d3d31","code":"exports = function(obj) {\r\n    function toDot(ob, parentName, result = {}) {\r\n\r\n        Object.keys(ob).forEach(prop => {\r\n            let propName = parentName ? `${parentName}.${prop}` : prop;\r\n            if (typeof ob[prop] == 'object') {\r\n                return toDot(ob[prop], propName, result);\r\n            }\r\n            result[propName] = ob[prop];\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n    if (typeof obj !== 'object') {\r\n        throw new Error('object to transform must be of type object and not null');\r\n    }\r\n    \r\n    return toDot(obj)\r\n\r\n}","uid":"convertObjectToDotNotation","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":20}
{"_id":"59c8c659755d4031cc8d3d36","code":"    /*jshint esversion:6 */\r\n\r\n\r\n\r\n    function generateRemitaRRR(invoice, fn) {\r\n         if(!invoice.amount){\r\n             return setImmediate(fn,new Error('All payments must have a valid amount'));\r\n         }\r\n\r\n        function createLineItem(id, name, account, bankCode, amount, deductFeeFrom) {\r\n            return {\r\n                lineItemsId: id,\r\n                beneficiaryName: name,\r\n                beneficiaryAccount: account,\r\n                bankCode: bankCode,\r\n                beneficiaryAmount: \"\"+amount,\r\n                deductFeeFrom: deductFeeFrom\r\n            };\r\n        }\r\n        const inf = this.entityRepo.infrastructure(),\r\n            request = inf.request,\r\n            url = inf.url,\r\n            crypto = inf.crypto,\r\n            uuid = inf.uuid;\r\n        let merchant = invoice.merchant,\r\n        feeAccount=merchant.feeAccount;\r\n        if (!merchant) return fn(new Error('Merchant has no remita configuration'));\r\n        let orderId = uuid(),\r\n            data = {\r\n                merchantId: merchant.id,\r\n                serviceTypeId: merchant.serviceTypeId,\r\n                orderId,\r\n                payerName: invoice.data.payerName || merchant.defaultPayerName,\r\n                payerEmail: invoice.data.payerEmail || merchant.defaultPayerEmail,\r\n               // totalAmount: \"\"+ invoice.amount,\r\n               // payerPhone:invoice.data.payerPhone || '08068809131',\r\n                //paymenttype: merchant.paymentType,\r\n                hash: this.libs.generateHash.call(crypto,merchant.id, merchant.serviceTypeId, orderId, invoice.amount, merchant.responseUrl, merchant.apiKey),\r\n                responseurl: merchant.responseUrl\r\n            },\r\n            postObj = {\r\n                url: merchant.baseUrl + (invoice.splitFee ? merchant.generateRRRUrl:merchant.generateRRRUrlNonSplit)\r\n            };\r\n\r\n\r\n      if(invoice.splitFee){\r\n        let share = merchant.share,\r\n            fee = invoice.amount * parseFloat(share);\r\n            \r\n        data.lineItems = [\r\n            createLineItem(\"MerchantAccount\", merchant.accountName, merchant.accountNumber, merchant.accountBankCode, invoice.amount - fee, \"1\"),\r\n            createLineItem(\"feeAccount\", feeAccount.name, feeAccount.number, feeAccount.bankCode, fee, \"0\")\r\n        ];\r\n        data.totalAmount= invoice.amount;\r\n        data.payerPhone=invoice.data.payerPhone || '08068809131';\r\n        postObj.json=data;\r\n      }else{\r\n          data.amt=invoice.amount;\r\n          data.paymenttype=merchant.paymentType;\r\n          postObj.form=data;\r\n      }\r\n        \r\n        \r\n        debug(JSON.stringify(postObj,null,' '));\r\n        request.post(postObj, (er, httpResponse, body) => {\r\n             \r\n             debug('error occurred while generating rrr ?');\r\n             debug(er);\r\n             debug('---------------x')\r\n            if (er) return debug(er),fn(er);\r\n            \r\n            // let RRR=''+ (new Date().getTime()).toString().substring(0,8);\r\n            // this.entityRepo.create(merchant.invoiceClass,{\r\n            //         invoiceNumber: RRR,\r\n            //         orderId: orderId,\r\n            //         userId:invoice.data.userId,\r\n            //         feeId:invoice.data.feeId\r\n            //     }, function(er) {\r\n            //         if (er) return fn(er);\r\n                    \r\n                    \r\n            //         fn(null,{orderId,RRR});\r\n            //     });\r\n           // debug(httpResponse);\r\n           //debug(httpResponse.headers);\r\n           //jsonp({\"statuscode\":\"025\",\"RRR\":\"170007648874\",\"orderID\":\"0469ab32-8f5f-4d0b-b6a9-9582463fcc17\",\"status\":\"Payment Reference generated\"})\r\n            debug(httpResponse.statusCode);\r\n            var loc = httpResponse.headers.location;\r\n\r\n            if (loc && httpResponse.statusCode == 302|| httpResponse.statusCode==200) {\r\n                let RRR;\r\n                if(httpResponse.statusCode == 302){\r\n                var url_parts = url.parse(loc, true);\r\n                    RRR = url_parts.query.RRR || url_parts.query.rrr;\r\n                }\r\n                if(httpResponse.statusCode ==200){\r\n                    \r\n                    debug(body);\r\n                    var match=/jsonp\\((.+)\\)/ig.exec(body||\"\");\r\n                    debug(match);\r\n                    if(match && match.length > 1){ RRR=JSON.parse(match[1]).RRR; }\r\n                }\r\n\r\n                if (!RRR) {\r\n                    fn(new Error('Failed to generate RRR'));\r\n                    return;\r\n                }\r\n                RRR = /\\d+/.exec(RRR)[0];\r\n                this.entityRepo.create(merchant.invoiceClass,{\r\n                    invoiceNumber: RRR,\r\n                    vendor:\"remita\",\r\n                    orderId: orderId,\r\n                    userId:invoice.data.userId,\r\n                    feeId:invoice.data.feeId\r\n                }, function(er) {\r\n                    if (er) return fn(er);\r\n                    \r\n                    \r\n                    fn(null,{orderId,RRR});\r\n                });\r\n                return;\r\n            }\r\n\r\n            return fn(new Error('Failed to generate RRR:' + body + \" status:\" + httpResponse.statusCode));\r\n\r\n        });\r\n\r\n    }\r\n\r\n    exports = generateRemitaRRR;","uid":"generateRemitaRRR","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":21}
{"_id":"59ca4a32694f112a181c4998","code":"function getConfig(name, obj) {\r\n    let result = {};\r\n    Object.keys(obj).map(x => {\r\n        if (x.indexOf(name) !== -1 && /\\.+/.test(x)) {\r\n            let t = x.split('.');\r\n            result[t[t.length - 1]] = obj[x];\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nexports=getConfig","uid":"flattenByNamespace","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":22}
{"_id":"59ca5cae66f6e53e90b00ae1","code":"        function generateHash() {\r\n            var words = Array.prototype.slice.call(arguments).reduce((total, x) => {\r\n                return total += x, total;\r\n            });\r\n            const hash = this.createHash('sha512');\r\n            hash.update(words);\r\n            return hash.digest('hex');\r\n        }\r\n        exports=generateHash;","uid":"generateHash","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":23}
{"_id":"59cae86f3e190314b0d2d7a2","code":"function getStudent(query,fn){\n    \n    async.waterfall([\n        \n        this.entityRepo.get.bind(null,this.args.$domain.config.studentClass,query,{one:true,full:true}),\n        (student,callback)=>{\n            \n            if(Array.prototype.slice.call(arguments).length==1){\n                return callback(new Error('Couldnt find a student matching that criteria'));\n            }\n            \n            let tasks=[];\n            \n            if(student.studentType && /PG/i.test( student.studentType.group)||/UNDERGRADUATE/i.test(student.studentType.group)){\n                tasks.push(this.entityRepo.get.bind(null,'Department',{_id:student.programmeDetails.department},{one:true}));\n                tasks.push(this.entityRepo.get.bind(null,'YearOfStudy',{_id:student.programmeDetails.yearOfStudy},{one:true}));\n                tasks.push(this.entityRepo.get.bind(null,'Session',{_id:student.programmeDetails.session},{one:true}));\n                tasks.push(this.entityRepo.get.bind(null,'ModeOfStudy',{_id:student.programmeDetails.modeOfStudy},{one:true}));\n                tasks.push(this.entityRepo.get.bind(null,'ModeOfEntry',{_id:student.programmeDetails.modeOfEntry},{one:true}));\n            }\n            \n            if(student.studentType && /PG/i.test( student.studentType.group)){\n                tasks.push(this.entityRepo.get.bind(null,'ProgrammeOption',{_id:student.programmeDetails.programmeOption},{one:true}));\n            }\n            \n            if(student.studentType && /JUPEB/i.test( student.studentType.group)){\n                tasks.push(this.entityRepo.get.bind(null,'JUPEB_Department',{_id:student.programmeDetails.department},{one:true}));\n            } \n            \n            \n            async.parallel(tasks,(er,info)=>{\n                    \n                    if(er) return callback(er);\n                    \n            if(student.studentType && /PG/i.test( student.studentType.group)||/UNDERGRADUATE/i.test(student.studentType.group)){\n                Object.assign(student.programmeDetails,{department:info[0],yearOfStudy:info[1],session:info[2],modeOfStudy:info[3],modeOfEntry:info[4]});\n            }\n            \n            if(student.studentType && /PG/i.test( student.studentType.group)){\n                student.programmeDetails.schoolProgramme=info[5];\n            }\n            \n            if(student.studentType && /JUPEB/i.test( student.studentType.group)){\n                student.programmeDetails.department=info[0];\n            } \n        \n            callback(null,student);\n                \n            })\n            \n            \n        }\n        \n        \n        ],(er,student)=>{\n            if(er) return fn(er);\n            \n            debug(student);\n            fn(null,student);\n        })\n    \n    \n}\n\nexports=getStudent;","uid":"getStudent","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":24}
{"_id":"59cb6d7fe27d30233c010152","code":"exports = function confirm(invoiceNumber, merchant, fn) {\r\n  let STATUS = {\r\n      \"00\": true,\r\n      \"01\": true,\r\n      \"02\": \"Transaction Failed\",\r\n      \"012\": \"User Aborted Transaction\",\r\n      \"020\": \"Invalid User Authentication\",\r\n      \"021\": \"Transaction Pending\",\r\n      \"022\": \"Invalid Request\",\r\n      \"023\": \"Service Type or Merchant Does not Exist\",\r\n      \"025\": \"Payment Reference Generated\",\r\n      \"029\": \"Invalid Bank Code\",\r\n      \"030\": \"Insufficient Balance\",\r\n      \"031\": \"No Funding Account\",\r\n      \"032\": \"Invalid Date Format\",\r\n      \"040\": \"Initial Request OK\",\r\n      \"999\": \"Unknown Error\"\r\n    },\r\n    SUCCESSFUL = \"Successful\";\r\n  debug(merchant);\r\n  if (!merchant) return setImmediate(fn, new Error(\"Merchant has no remita configuration\"));\r\n  let inf = this.entityRepo.infrastructure(),\r\n    crypto = inf.crypto,\r\n    request = inf.request;\r\n  this.entityRepo.get(\r\n    this.args.$domain.config.invoiceClass,\r\n    {\r\n      invoiceNumber\r\n    },\r\n    (er, invoice) => {\r\n      if (er) return fn(er);\r\n\r\n      if (!invoice.length) return fn(new Error(\"Could not find that invoice\"));\r\n      invoice = invoice.shift();\r\n      debug(\"payment:\" + JSON.stringify(invoice, null, \" \"));\r\n      debug(\"merchant config:\" + JSON.stringify(merchant, null, \" \"));\r\n\r\n      if (invoice.payment && invoice.successful) {\r\n        return fn(null, true);\r\n      }\r\n\r\n      this.entityRepo.get(\r\n        \"Fee\",\r\n        {\r\n          _id: invoice.feeId\r\n        },\r\n        {\r\n          one: true\r\n        },\r\n        (er, fee) => {\r\n          if (er) return callback(er);\r\n\r\n          if (!fee) return callback(new Error(\"Could not locate a fee for that payment\"));\r\n\r\n          debug(`fee:${JSON.stringify(fee, null, \" \")}`);\r\n\r\n          let url =\r\n            merchant.baseUrl +\r\n            \"/\" +\r\n            merchant.id +\r\n            \"/\" +\r\n            invoice.invoiceNumber +\r\n            \"/\" +\r\n            this.libs.generateHash.call(crypto, invoice.invoiceNumber, merchant.apiKey, merchant.id) +\r\n            \"/status.reg\";\r\n          debug(url);\r\n          request.get(url, (er, httpResponse, body) => {\r\n            if (er) return fn(er);\r\n            var response;\r\n            try {\r\n              debug(body);\r\n              debug(httpResponse.status);\r\n              response = JSON.parse(body);\r\n            } catch (e) {\r\n              // statements\r\n              return fn(new Error(\"Could not confirm transaction status from remita\"));\r\n            }\r\n            if (parseInt(response.amount) !== fee.fee) {\r\n              return fn(new Error(\"Amounts do not match\"));\r\n            }\r\n            response.status_description = typeof STATUS[response.status] == \"boolean\" ? SUCCESSFUL : STATUS[response.status];\r\n            var result = {\r\n              paid: response.status_description == SUCCESSFUL,\r\n              info: response\r\n            };\r\n\r\n            if (result.paid) {\r\n              this.entityRepo.update(\r\n                this.args.$domain.config.invoiceClass,\r\n                { _id: invoice._id, payment: response, successful: true },\r\n                er => {\r\n                  if (er) return fn(er);\r\n\r\n                  return fn(null, true);\r\n                }\r\n              );\r\n              return;\r\n            }\r\n\r\n            fn(new Error(response.status_description));\r\n          });\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n","uid":"confirmRemitaPayment","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":25}
{"_id":"59dd06839af69d1ff8ade08a","code":"function HostelApi(_request,token){\n    this.baseUrl='http://localhost:3350/api';\n    this._request=_request;\n    this.GET='GET';\n    this.POST='POST';\n    this.DELETE='DELETE';\n    this.token=token;\n}\n\nHostelApi.prototype.request = function(path,method,body,fn){\n    let reqBody={uri:`${this.baseUrl}${path}`,headers:{authorization:this.token}},_method=method.toLowerCase(),returned=false;\n    if(_method =='get')reqBody.qs=body;\n    else{\n       reqBody.body=body;\n       reqBody.json=true;\n    }\n    this._request[_method.toLowerCase()](reqBody,(er,response,body)=>{\n        if(er) return returned=true, fn(new Error(er.error||er));\n        \n        debug(body);\n        debug(er);\n        debug(typeof body);\n        \n\n          \n          if(typeof body !=='object'){\n              try{\n                  body=JSON.parse(body);\n              }catch(e){\n                  return fn(e);\n              }\n          }\n        if(response.statusCode!== 200){\n            \n            return returned=true, fn(new Error(body && typeof body=='string' && body || typeof body =='object' && body.error ||'Unknown error'));\n        } \n        \n            return returned=true,fn(null,body);\n    }).on('error',function(err){\n        if(!returned) return returned=true, debug(err)//, fn(err);\n    });\n}\n\nHostelApi.prototype.createABooking=function(query,fn){\n    this.request('/booking',this.POST,query,fn);\n}\nHostelApi.prototype.saveABooking=function(booking_id,fn){\n    this.request('/booking/save',this.POST,{booking_id},fn);\n}\nHostelApi.prototype.deleteABooking=function(booking_id,fn){\n    this.request('/booking',this.DELETE,{booking_id},fn);\n}\n\n\nHostelApi.prototype.getHostels=function(query,fn){\n    this.request('/hostel',this.GET,query,fn);\n}\nHostelApi.prototype.createHostel=function(hostel,fn){\n    this.request('/hostel',this.POST,hostel,fn);\n}\nHostelApi.prototype.updateHostel=function(hostel,fn){\n    this.request(`/hostel/${hostel._id}`,this.POST,hostel,fn);\n}\nHostelApi.prototype.createRule=function(rule,fn){\n    this.request('/rules',this.POST,rule,fn);\n}\nHostelApi.prototype.getRules=function(query,fn){\n    this.request('/rules',this.GET,query,fn);\n}\nHostelApi.prototype.updateRule=function(rule,fn){\n    this.request(`/rules/${rule._id}`,this.POST,rule,fn);\n}\nHostelApi.prototype.checkEligibility=function(fn){\n    this.request(`/rules/run/eligible`,this.GET,null,fn);\n}\nexports = HostelApi;","uid":"HostelAPI","__v":0,"meta":{"revision":0,"created":1510640453434,"version":0},"$loki":26}
