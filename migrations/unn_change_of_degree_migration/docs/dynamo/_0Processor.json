[{"_id":{"$objectID":"5a6abc4cb0e23c31183e6fbd"},"code":"this.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n\n  let merchantConfig = this.libs.flattenByNamespace(\"remita\", domain.config);\n  this.debug(merchantConfig);\n  this.libs.confirmRemitaPayment.call(this, this.args.invoiceNumber, merchantConfig, domain, (er, status) => {\n    if (er) return callback(er);\n\n    if (!status) return callback(new Error(\"You have been unable to confirm payment has been made against \" + this.args.invoiceNumber));\n\n    this.debug('payment successfully confirmed');\n    callback(null, { _invoiceNumber: this.args.invoiceNumber });\n  });\n});\n","title":"Check RRR transaction status","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a70cb6ea5538a22fc20eac6"},"code":"//NOTE: No user should ever be issued a claim to call this processor\nthis.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n  Object.defineProperties(this.args, {\n    $appDomain: {\n      enumerable: false,\n      get: function() {\n        return domain;\n      }\n    }\n  });\n  callback(null, this.args);\n});\n","title":"Get Domain Config [NEVER ISSUE THIS CLAIM TO ANY USER]","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a72b60d48dda81fc8cd8f15"},"code":"setImmediate(callback, null, (Object.keys(this.args).length && this.args) || null);\n","title":"Make args initial data for a process","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a93f71433b254467c688536"},"code":"var self = this;\r\nnew self.libs.ExternalApplication(self).getInfo(\"invoiceClass\", { invoiceNumber: self.args.invoiceNumber }, function(error, invoice) {\r\n  if (error) {\r\n    self.debug(`an error occurred while trying to get entity info: \\n ${error}`);\r\n    return callback(new Error(\"An error occurred.\"));\r\n  }\r\n  let registrationNumber;\r\n  if (invoice && (invoice.extra || invoice[0].extra)) {\r\n    registrationNumber = invoice.extra ? invoice.extra.registrationNumber : invoice[0].extra.registrationNumber;\r\n  }\r\n  self.entityRepo.get(self.args.$appDomain.config[\"studentClass\"], { regNo: registrationNumber }, function(error, student) {\r\n    if (error) {\r\n      self.debug(`an error occurred while trying to get entity info: \\n ${error}`);\r\n      return callback(new Error(\"An error occurred.\"));\r\n    }\r\n    if (student[0] && student[0].programmeDetails && student[0].programmeDetails.yearOfStudy) {\r\n      self.entityRepo.get(\"YearOfStudy\", { _id: student[0].programmeDetails.yearOfStudy }, function(error, yearOfStudy) {\r\n        if (error) {\r\n          self.debug(`an error occurred while trying to get the year of study: \\n ${error}`);\r\n          return callback(new Error(\"An error occurred.\"));\r\n        }\r\n        let level = yearOfStudy ? yearOfStudy.name || yearOfStudy[0].name : 0;\r\n        if (level != \"200 LEVEL\") {\r\n          return callback(new Error(\"You should be in 200 level to apply.\"));\r\n        }\r\n        self.args.registrationNumber = registrationNumber;\r\n        return callback(null, self.args);\r\n      });\r\n    } else {\r\n      return callback(new Error(\"Sorry there is no student with that registration number.\\n Confirm and try again.\"));\r\n    }\r\n  });\r\n});\r\n","title":"Confirm student is in 200 level","uid":"CONFIRM_STUDENT_200_LEVEL","standalone":true,"__v":0,"requiresIdentity":false},{"_id":{"$objectID":"5a9416d133b254467c68853e"},"code":"this.libs.confirmInvoiceIsFor.call(this,this.args.invoiceNumber, \"CHANGE_OF_DEGREE\", er => {\r\n  if (er) return callback(er);\r\n\r\n  return this.libs.skipApplicationIfAllowed.call(\r\n    this,\r\n    this.args.$appDomain.config.changeOfDegreeApplicationClass,\r\n    \"SUBMIT_CHANGE_OF_DEGREE_FORM\",\r\n    callback\r\n  );\r\n});\r\n","title":"Confirm invoice is for change of degree","uid":"CONFIRM_INVOICE_IS_FOR_CHANGE_OF_DEGREE","__v":0,"standalone":false,"requiresIdentity":true},{"_id":{"$objectID":"5a941ad233b254467c68853f"},"code":"this.debug(\"=============================\");\r\nthis.debug(this.args.personalDetails.currentYearOfStudy);\r\nthis.entityRepo.get(\"YearOfStudy\", { _id: this.args.personalDetails.currentYearOfStudy.$objectID }, (error, yearOfStudy) => {\r\n  if (error) return callback(new Error(error));\r\n  this.debug(yearOfStudy);\r\n  if (yearOfStudy && yearOfStudy[0] && yearOfStudy[0].name !== \"200 LEVEL\") {\r\n    return callback(new Error(\"You should be in 200 level to apply.\"));\r\n  }\r\n  new this.libs.ExternalApplication(this).register(\r\n    \"changeOfDegreeApplicationClass\",\r\n    [\"CHANGE_OF_DEGREE_DETAILS\"],\r\n    [\r\n      function(application, cb) {\r\n        setImmediate(cb, null, [[\"GENERAL_STYLES\", \"TABLE_STYLES\"]]);\r\n      }\r\n    ],\r\n    callback\r\n  );\r\n});\r\n","title":"Submit change of degree form","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5a9814bf8e96860c303b4d4e"},"code":"var self = this;\nself.debug(\"registration number is: \");\nself.debug(self.args.registrationNumber);\nthis.libs.getStudent.call(\n  this,\n  { regNo: self.args.registrationNumber },\n  (error, student) => {\n    if (error) {\n      this.debug(error);\n      return callback(new Error(\"Student not found\"));\n    }\n    if (!student) {\n      return callback(new Error(\"Student not found\"));\n    }\n\n    this.args.details = {\n      department: student.programmeDetails.department,\n      yearOfStudy: student.programmeDetails.yearOfStudy\n    };\n\n    let e = (...rest) => {\n        return this.libs.createElement.apply(this, rest);\n      },\n      disable = function(list, element) {\n        if (list && list.length && list.indexOf(element.name) !== -1) element.args = Object.assign(element.args || {}, { disabled: true });\n      },\n      c = this.constants,\n      required = this.libs.createRequiredValidator,\n      personalDetails = e(\"personalDetails\", \"BIO DATA (SECTION A)\", \"\", c.ELEMENTTYPE.SECTION, {\n        elements: [\n          e(\n            \"registrationNumber\",\n            \"JAMB/ Reg Number\",\n            \"\",\n            c.ELEMENTTYPE.INPUT,\n            { type: c.INPUTTYPE.TEXT, default: student.regNo, order: 1 },\n            [required()]\n          ),\n          e(\n            \"firstName\",\n            \"First Name\",\n            \"\",\n            c.ELEMENTTYPE.INPUT,\n            { type: c.INPUTTYPE.TEXT, default: student.personalDetails.firstName, order: 2 },\n            [required()]\n          ),\n          e(\"middleName\", \"Middle Name\", \"\", c.ELEMENTTYPE.INPUT, {\n            type: c.INPUTTYPE.TEXT,\n            default: student.personalDetails.middlename,\n            order: 3\n          }),\n          e(\n            \"surname\",\n            \"Surname\",\n            \"\",\n            c.ELEMENTTYPE.INPUT,\n            { type: c.INPUTTYPE.TEXT, default: student.personalDetails.surname, order: 4 },\n            [required()]\n          ),\n          e(\"confirmationNumber\", \"Confirmation Number\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT, order: 5 }, [required()]),\n          e(\n            \"invoiceNumber\",\n            \"Invoice Number\",\n            \"\",\n            c.ELEMENTTYPE.INPUT,\n            { type: c.INPUTTYPE.NUMBER, order: 6, default: self.args.invoiceNumber },\n            [required()]\n          ),\n          e(\"bankName\", \"Bank Name\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT, order: 7 }, [required()]),\n          e(\"bankBranchName\", \"Bank Branch Name\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT, order: 8 }, [required()]),\n          e(\"datePaid\", \"Date Paid\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.DATE, order: 9 }, [required()]),\n          e(\n            \"programme\",\n            \"Programme\",\n            \"\",\n            c.ELEMENTTYPE.SELECTSET,\n            {\n              type: \"PROCESSOR\",\n              mode: c.ENTRYMODE.OBJECTID,\n              items: [\n                {\n                  id: student.programmeDetails.programmeOption,\n                  displayLabel: student.programmeDetails.programmeOption\n                }\n              ],\n              order: 10\n            },\n            [required()]\n          ),\n          e(\n            \"currentDepartment\",\n            \"Current Department\",\n            \"\",\n            c.ELEMENTTYPE.SELECTSET,\n            {\n              type: \"PROCESSOR\",\n              mode: c.ENTRYMODE.OBJECTID,\n              items: [\n                {\n                  id: student.programmeDetails.department._id,\n                  displayLabel: student.programmeDetails.department.name,\n                  elements: [\n                    this.libs.createElement(\"areaOfSpecialization\", \"Area of Specialization\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                      order: 12,\n                      items: student.programmeDetails.department.areasOfSpecialization.map(a => ({\n                        id: a._id || \"\",\n                        displayLabel: a.name || \"\"\n                      }))\n                    })\n                  ]\n                }\n              ],\n              path: \"config\",\n              order: 11\n            },\n            [required()]\n          ),\n          e(\n            \"currentYearOfStudy\",\n            \"Year Of Study\",\n            \"\",\n            c.ELEMENTTYPE.SELECTSET,\n            {\n              type: \"PROCESSOR\",\n              mode: c.ENTRYMODE.OBJECTID,\n              items: [\n                {\n                  id: student.programmeDetails.yearOfStudy._id,\n                  displayLabel: student.programmeDetails.yearOfStudy.name\n                }\n              ],\n              order: 13\n            },\n            [required()]\n          )\n        ]\n      });\n\n    let disabled = ['firstName', 'middleName', 'surname', 'registrationNumber', 'invoiceNumber'];\n    disable.bind(this, disabled);\n    this.args.$nextStep.form.elements.unshift(personalDetails);\n    setImmediate(callback, null, this.args);\n  },\n  this.args.$appDomain.config[\"studentClass\"]\n);\n","title":"Get Student Details and build UI","requiresIdentity":false,"standalone":true,"__v":0}]
