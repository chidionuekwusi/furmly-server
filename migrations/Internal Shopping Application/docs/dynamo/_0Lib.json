[{"_id":{"$objectID":"5a7302ee14d02c3ab879c634"},"code":"exports = {\n  POST_UTME_SCREENING: function(args, callback) {\n    //check all the jamb blah blah\n    this.debug(\"checking jamb info\");\n    this.debug(\"app domain:\" + this.args.$appDomain._id);\n    const validators = {\n      minScore: function(info, config) {\n        if (!info.totalScore || info.totalScore < config.min)\n          return `You scored below the minimum required score stipulated by the University (${config.min})`;\n      },\n      regex: function(info, config) {\n        return (info[config.property] && new RegExp(config.regex).test(info[config.property])) || `Your ${config.property} is invalid`;\n      }\n    };\n    this.entityRepo.get(\n      \"JambList\",\n      { regNumb: args.registrationNumber, domain: this.args.$appDomain._id },\n      { one: true },\n      (er, jambInfo) => {\n        if (er) return callback(er);\n        if (!jambInfo) return callback(new Error(\"Sorry we cannot find your information from Jamb\"));\n\n        this.debug(\"successfully retrieved jamb info\");\n        this.debug(jambInfo);\n        this.debug(this.args.$appDomain.config);\n        if (!this.args.$appDomain.config.jambValidation) return callback();\n        let jambValidation = JSON.parse(this.args.$appDomain.config.jambValidation);\n        this.async.parallel(\n          jambValidation.map(v => {\n            return fn => {\n              let validator = validators[v.name];\n              if (!validator) return fn(new Error(\"Unknown Validator\"));\n              let result = validator(jambInfo, v);\n              if (typeof result === \"string\") return fn(new Error(result));\n              fn();\n            };\n          }),\n          callback\n        );\n      }\n    );\n  },\n  INTERNAL_SHOPPING : function(args,callback){\n      let c = this.constants;\n      this.args.$nextStep.form.elements.push(this.libs.createElement(\"jambRegNumber\",\"Jamb Registration Number\",\"\",\n      c.ELEMENTTYPE.INPUT,{ type : c.INPUTTYPE.TEXT},[\n          this.libs.createRequiredValidator(),\n          this.libs.createRegexValidator(\"^\\\\d{6,8}[a-zA-Z]{2,2}$\",\"You must enter a valid jamb registration number\")]));\n      callback(null);\n  }\n};\n","uid":"APPLICATION_INVOICE_GENERATION_VALIDATION","__v":0},{"_id":{"$objectID":"5aa0fa2caacfaa3f6c2583bd"},"code":"exports = function(application, _fn) {\n    \n    let d = application.bioData,\n        l = application.departmentAlternative;\n    this.async.parallel([\n        this.entityRepo.get.bind(null,\"SchoolProgramme\",{_id : d.programme},{one : true }),\n        this.entityRepo.get.bind(null,\"Department\", { _id : d.currentDepartment},{one : true}),\n        this.entityRepo.get.bind(null,\"Department\", { _id : l.facultyOption.department},{one : true })\n        ],(er,data)=>{\n            this.debug(\"#################################################\");\n            this.debug(data);\n            this.debug(\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\");\n        let areaOfSpecialization = (l.facultyOption && l.facultyOption.areasOfSpecialization) ?\n        data[2].areasOfSpecialization.filter(x => x._id.toString() == l.facultyOption.areaOfSpecialization).map(x => x.name) : \"NONE\";\n       return _fn(null, [\n          [\n            \"PERSONAL_DETAILS\",\n            {\n              details: [\n                [\"Registration Number\", d.registrationNumber],\n                [\"Surname\", d.surname],\n                [\"First Name\", d.firstName],\n                [\"Middle Name\", d.middleName],\n                [\"Student Type\", data[0].group],\n                [\"Current Department\", data[1].name],\n                [\"Current Department Option\",\"NONE\"],\n                [\"Alternative Department\", data[2].name ],\n                [\"Alternative Department Option\", areaOfSpecialization ],\n                [\"Reason for Transfer\", l.transferReason],\n                [\"Confirmation Number\", d.confirmationNumber]\n              ]\n            }\n          ]\n        ]);\n    });\n};\n","uid":"prepareInternalShopping","__v":0}]
