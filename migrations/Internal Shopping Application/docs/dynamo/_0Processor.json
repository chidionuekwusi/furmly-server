[{"_id":{"$objectID":"5a6737785773415b3c17c393"},"code":"this.entityRepo.get(\"Fee\", { _id: this.args.applicationType }, { one: true, full: true }, (er, fee) => {\n  if (er) return callback(er);\n  if (!fee) return callback(new Error(\"Could not find the fee\"));\n  let result = { _fee: this.args.applicationType, _form: this.args._form, registrationNumber: this.args.registrationNumber },\n    domain = this.args.$appDomain;\n  //check if an invoice exists for this registrationNumber\n  this.entityRepo.get(\n    domain.config.invoiceClass,\n    { \"extra.registrationNumber\": this.args.registrationNumber, feeId: this.args.applicationType },\n    { one: true },\n    (er, invoice) => {\n      if (er) return callback(er);\n\n      if (invoice) {\n        //invoice exists so skip to last step.\n        return this.args.$process.steps[this.args.$process.steps.length - 1].describe((er, description) => {\n          this.args.$nextStep = description;\n          if (invoice.successful) this.libs.findElementByName(this.args.$nextStep.form.elements, \"pay\").args.disabled = true;\n          let messageContext = Object.assign({}, { form: this.args._form, RRR: invoice.invoiceNumber }),\n            info = this.libs.APPLICATION_TYPE_TO_INFO[fee.uid] || this.libs.APPLICATION_TYPE_TO_INFO.default,\n            exp = /\\{(\\w+)\\}/gi,\n            _info = \"\" + info,\n            match = exp.exec(info);\n          while (match !== null) {\n            _info = _info.replace(match[0], messageContext[match[1]]);\n            // matched text: match[0]\n            // match start: match.index\n            // capturing group n: match[n]\n            match = exp.exec(info);\n          }\n          let url = encodeURIComponent(`${domain.config[\"remita.payUrl\"]}?RRR=${invoice.invoiceNumber}&domain=${domain._id}`);\n          callback(null, {\n            info:\n              _info ||\n              `Successfully generated Invoice Number ${invoice.invoiceNumber} , please use this invoice number to make payment at any bank branch nationwide`,\n            navigation: {\n              pay: `WEBVIEW|url=${url}|title=Fees`,\n              fill: `${this.args._form}|invoiceNumber=${invoice.invoiceNumber}`\n            }\n          });\n        });\n      }\n      if (this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.feePurpose.uid]) {\n        this.debug(\"has validation rules...\");\n        return this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.feePurpose.uid].call(this, this.args,(er,extraInfo) => {\n          if (er) return callback(er);\n          this.debug(\"all validation rules for pass\");\n          return callback(null, Object.assign(result,extraInfo || {}));\n        });\n      }\n      return callback(null, result);\n    }\n  );\n});\n","title":"Initial checks for generating RRR for Anon Applications","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a6abc4cb0e23c31183e6fbd"},"code":"this.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n\n  let merchantConfig = this.libs.flattenByNamespace(\"remita\", domain.config);\n  this.debug(merchantConfig);\n  this.libs.confirmRemitaPayment.call(this, this.args.invoiceNumber, merchantConfig, domain, (er, status) => {\n    if (er) return callback(er);\n\n    if (!status) return callback(new Error(\"You have been unable to confirm payment has been made against \" + this.args.invoiceNumber));\n\n    this.debug('payment successfully confirmed');\n    callback(null, { _invoiceNumber: this.args.invoiceNumber });\n  });\n});\n","title":"Check RRR transaction status","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a70cb6ea5538a22fc20eac6"},"code":"//NOTE: No user should ever be issued a claim to call this processor\nthis.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n  Object.defineProperties(this.args, {\n    $appDomain: {\n      enumerable: false,\n      get: function() {\n        return domain;\n      }\n    }\n  });\n  callback(null, this.args);\n});\n","title":"Get Domain Config [NEVER ISSUE THIS CLAIM TO ANY USER]","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a72b60d48dda81fc8cd8f15"},"code":"setImmediate(callback, null, (Object.keys(this.args).length && this.args) || null);\n","title":"Make args initial data for a process","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a98fe75b49aa340848f3d39"},"code":"this.debug(this.args);\nthis.async.waterfall([\n    (fn)=>{\n        this.libs.getDomain.call(this,(er,domain)=>{\n            fn(er,domain);\n        });\n    },\n    (domain,fn) =>{\n        this.entityRepo.aggregate(\"Faculty\",[{\n            $lookup :{\n                from : \"departments\",\n                localField : \"_id\",\n                foreignField : \"faculty\",\n                as : \"department\"\n            }\n        },{\n            $project : {\n                \"_id\" : 1,\n                \"name\" : 1,\n                \"department\" : 1\n            }\n        }],(er,facs) =>{\n            if(er) return fn(er);\n            if(!facs.length) return fn(null,facs);\n            fn(null,facs);\n        });\n    }],\n    (er,facs) =>{\n        setImmediate(callback,null,\n        facs.map(x=>(\n            {\n                id:x._id,\n                displayLabel:x.name,\n                elements:[\n                        this.libs.createElement(\"department\", \"Department shopping into\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                            mode : this.constants.ENTRYMODE.OBJECTID,\n                        items: ((typeof(x.department) !='undefined' && x.department) ? x.department.map(d => {\n                          return {\n                            id: d._id,\n                            displayLabel: d.name,\n                            elements: [\n                              this.libs.createElement(\"areaOfSpecialization\", \"Area of Specialization\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                                mode : this.constants.ENTRYMODE.OBJECTID,\n                                items: ((typeof(d.areasOfSpecialization) != 'undefined' && d.areasOfSpecialization) ? d.areasOfSpecialization.map(c => {\n                                  return {\n                                    id: c._id,\n                                    displayLabel: c.name,\n                                    elements: []\n                                  };\n                                }):[])\n                              })\n                            ]\n                          };\n                        }):[])\n                  },[this.libs.createRequiredValidator()])\n                ]\n        })));\n    });","title":"Get Faculty and Department Set","uid":"FACULTY_AND_DEPT","requiresIdentity":false,"standalone":true,"__v":0},{"_id":{"$objectID":"5a9e44624c2c032e7423d236"},"code":"this.debug(this.args);\nthis.async.waterfall([(fn)=>{\n    this.entityRepo.get(this.args.$appDomain.config.invoiceClass,{ invoiceNumber : this.args.invoiceNumber },{ one : true},(er,invoice)=>{\n        if(er)  return fn(er);\n        if(!result) return fn(new Error(\"No invoice found\"));        \n        return fn(null,invoice);\n    });\n    },\n    (invoice,fn) => {\n        this.entityRepo.get(this.args.$appDomain.config.studentClass,{ refNo : invoice.extra.jambRegNumber},{one : true, full :true},(er,student)=>{\n           return fn(er,student);\n        });\n    }],\n    (er,result)=>{\n        if(er) return callback(er);\n        if(!result) return callback(new Error(`No student record matches the RRR[${this.args.invoiceNumber}]`));\n        this.async.parallel([\n            this.entityRepo.get.bind(null,\"SchoolProgramme\",{ _id : result.programmeDetails.programmeOption },{ one : true}),\n            this.entityRepo.get.bind(null,\"Department\",{_id : result.programmeDetails.department},{one : true})\n            ],(er,data)=>{\n        let obj = {\n            bioData :{\n                registrationNumber :result.refNo,\n                surname : result.personalDetails.surname,\n                firstName : result.personalDetails.firstName,\n                middleName : result.personalDetails.middleName,\n                confirmationNumber : this.args.invoiceNumber,\n                invoiceNumber : this.args.invoiceNumber\n            },\n            currentFaculty : data[1].faculty\n        };\n        \n        let required = this.libs.createRequiredValidator,\n        e = this.libs.createElement.bind(this),\n        c = this.constants,\n        elements = [\n            e(\"bioData\", \"BIO DATA (SECTION A)\", \"\", c.ELEMENTTYPE.SECTION, {\n              elements : [\n                  e(\"registrationNumber\",\"Jamb Registration Number\",\"\", c.ELEMENTTYPE.INPUT, { type : c.INPUTTYPE.TEXT, disabled : true },[required()]),\n                  e(\"surname\", \"Surname\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT, disabled : true }, [required()]),\n                  e(\"firstName\", \"First Name\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT, disabled : true }, [required()]),\n                  e(\"middleName\", \"Middle Name\", \"\", c.ELEMENTTYPE.INPUT, { type : c.INPUTTYPE.TEXT, disabled : true }),\n                  e(\"confirmationNumber\",\"Confirmation No\", \"\", c.ELEMENTTYPE.INPUT, { type : c.INPUTTYPE.TEXT, disabled : true },[required()]),\n                  e(\"invoiceNumber\",\"Invoice No\", \"\", c.ELEMENTTYPE.INPUT,{ type : c.INPUTTYPE.TEXT, disabled : true },[required()]),\n                  e(\"programme\",\"Programme\",\"\",c.ELEMENTTYPE.SELECTSET,{ items : [{ id : data[0]._id, displayLabel : data[0].group }] }),\n                  e(\"currentDepartment\",\"Current Department\",\"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id : data[1]._id, displayLabel : data[1].name }] })\n              ]\n            }),\n            this.libs.createElement(\"departmentAlternative\",\"DEPARTMENT ALTERNATIVE (SECTION B)\",\"\",c.ELEMENTTYPE.SECTION,{\n                elements : [\n                     e(\"faculty\", \"Faculty Shopping into\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                         mode: c.ENTRYMODE.OBJECTID,\n                         processor: \"FACULTY_AND_DEPT\",\n                         path: \"facultyOption\"\n                      },[required()]),\n                  e(\"transferReason\",\"Reason for Transfer\", \"\", c.ELEMENTTYPE.INPUT,{ type : c.INPUTTYPE.TEXT },[required()]),    \n                    \n            ]}),\n                  e(\"currentFaculty\",\"\", \"\", c.ELEMENTTYPE.HIDDEN,{ type : c.INPUTTYPE.TEXT }),    \n        ];\n        this.args.$nextStep.form.elements.push(...elements);\n        return callback(null, Object.assign(this.args,obj));\n});\n    });","title":"Inject Personal and Shopping Ui","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5a9fe5406a30b31358380b70"},"code":"this.libs.confirmInvoiceIsFor.call(this, this.args.invoiceNumber, \"INTERNAL_SHOPPING\", er => {\n  if (er) return callback(er);\n    this.debug(\"Internal Shopping class is : \\n\" + this.args.$appDomain.config.internalShoppingApplicationClass);\n  return  this.libs.skipApplicationIfAllowed.call(this, \n  this.args.$appDomain.config.internalShoppingApplicationClass, \n  \"SUBMIT_INTERNAL_SHOPPING_FORM\", \n  callback);\n});","title":"Confirm Invoice is for Internal Shopping","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5aa00cb2218dc230a0630489"},"code":"if(this.args.currentFaculty){\n    if(this.args.currentFaculty.toString() !== this.args.departmentAlternative.faculty.$objectID.toString()){\n        setImmediate(callback,new Error(\"Shopping in the same faculty not allowed\"));\n    }\n}\nnew this.libs.ExternalApplication(this).register(\n  \"internalShoppingApplicationClass\",\n  [\"INTERNAL_SHOPPING\"],\n  [\n    function(application, cb) {\n      setImmediate(cb, null, [[\"TABLE_STYLES\"]]);\n    }\n  ],\n  callback\n);","title":"submit Internal Shopping form","requiresIdentity":true,"standalone":false,"__v":0,"uid":"SUBMIT_INTERNAL_SHOPPING_FORM"}]
