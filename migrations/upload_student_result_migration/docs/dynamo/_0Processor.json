[{"_id":{"$objectID":"5ae7165ded96bc603898dc9b"},"code":"this.args.depth = true;\r\nthis.$checkDomain = true;\r\nconst objectId = prop => {\r\n  if (this.args.query && this.args.query[prop])\r\n    this.args.query[prop] = {\r\n      isObjectID: true,\r\n      value: this.args.query[prop]\r\n    };\r\n};\r\nconst run = {\r\n  extended: () => {\r\n    if (!this.args.query || !this.args.query.studentType)\r\n      return callback(null, {\r\n        items: [],\r\n        total: 0\r\n      });\r\n    objectId(\"studentType\");\r\n    objectId(\"department\");\r\n    objectId(\"semester\");\r\n    objectId(\"session\");\r\n    this.debug(this.args);\r\n    if (this.args.query && this.args.query[\"campus\"]) delete this.args.query[\"campus\"];\r\n\r\n    let extra = {\r\n      department: this.args.query[\"department\"].value,\r\n      semester: this.args.query[\"semester\"].value,\r\n      session: this.args.query[\"session\"].value,\r\n      studentType: this.args.query[\"studentType\"].value\r\n    };\r\n\r\n    this.libs.getEntity.call(\r\n      this,\r\n      \"CourseAssignment\",\r\n      \"\",\r\n      x => {\r\n        return Object.assign(extra, {\r\n          _id: x._id,\r\n          courseType: x.courseType.name,\r\n          courseName: x.course.name,\r\n          courseUnit: x.courseUnit,\r\n          courseCode: x.course.code,\r\n          courseId: x.course._id\r\n        });\r\n      },\r\n      (error, result) => {\r\n        if (error || !result) callback(new Error(\"could not find course assignment for the criteria\"));\r\n\r\n        if (!result.items) callback(null, result);\r\n        result.items.forEach((item, index) => {\r\n          this.entityRepo.get(\r\n            \"CourseLecturerAssignment\",\r\n            {\r\n              course: item.courseId\r\n            },\r\n            {\r\n              one: true\r\n            },\r\n            (error, assignment) => {\r\n              if (assignment) {\r\n                result.items[index] = Object.assign(\r\n                  {\r\n                    lecturer: assignment.lecturer\r\n                  },\r\n                  item\r\n                );\r\n              }\r\n              if (index == result.items.length - 1) {\r\n                callback(null, result);\r\n              }\r\n            }\r\n          );\r\n        });\r\n      }\r\n    );\r\n  },\r\n  stripped: () => {\r\n    if (!this.args.query)\r\n      return callback(null, {\r\n        items: [],\r\n        total: 0\r\n      });\r\n\r\n    this.entityRepo.get(\r\n      \"Staff\",\r\n      {\r\n        userId: this.args.$user._id\r\n      },\r\n      {\r\n        one: true\r\n      },\r\n      (er, staff) => {\r\n        if (er) return callback(er);\r\n        if (!staff) return callback(new Error(\"You have to be a staff to perform this operation\"));\r\n        this.args.query[\"department\"] = staff.department.toString();\r\n        this.args.query[\"lecturer\"] = staff._id.toString();\r\n        let extra = {\r\n          semester: this.args.query[\"semester\"],\r\n          session: this.args.query[\"session\"],\r\n          department: this.args.query[\"department\"]\r\n        };\r\n\r\n        objectId(\"semester\");\r\n        objectId(\"session\");\r\n        objectId(\"department\");\r\n        objectId(\"lecturer\");\r\n\r\n        this.debug(this.args.query);\r\n\r\n        this.libs.getEntity.call(\r\n          this,\r\n          \"CourseLecturerAssignment\",\r\n          \"\",\r\n          x => {\r\n            return Object.assign(extra, {\r\n              _id: x._id,\r\n              courseName: x.course.name,\r\n              courseCode: x.course.code,\r\n              courseId: x.course._id\r\n            });\r\n          },\r\n          (error, result) => {\r\n            this.debug(result);\r\n            if (error || !result || (result && result.items.length < 1))\r\n              callback(new Error(\"could not find course assignment for the criteria\"));\r\n\r\n            callback(null, result);\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nif (this.args.query && this.args.query[\"department\"]) run[\"extended\"]();\r\nelse run[\"stripped\"]();\r\n","title":"Get Course Lecturer assignment","requiresIdentity":true,"standalone":true,"__v":0},{"_id":{"$objectID":"5aeae84ab8ff605b883f098b"},"code":"let inf = this.entityRepo.infrastructure(),\n  fileUpload = inf.fileUpload,\n  fileParser = inf.fileParser,\n  threadPool = inf.threadPool;\nthis.debug(\"=============================================================\");\nthis.debug(this.args);\nthis.libs.parseObjectIds.call(this, this.args);\nlet uploadResult = () => {\n  let args = this.args.entity,\n    contx = {\n      semester: args.semester,\n      session: args.session,\n      department: args.department,\n      course: args.courseId\n    };\n  this.libs.convertFileAndSave(\n    this.args.$domain.config.resultClass,\n    args.file,\n    contx,\n    [\"regNo\", \"fullName\", \"examScore\", \"courseCode\", \"examDate\"],\n    null,\n    fileUpload,\n    fileParser,\n    threadPool,\n    this.entityRepo,\n    this.args.$user,\n    callback\n  );\n};\n\nif (!fileUpload || !fileParser || !threadPool) {\n  this.debug(`something is undefined ...fileUpload:${!!fileUpload}, fileParser:${!!fileParser}, threadPool:${!!threadPool}`),\n    callback(new Error(\"Infrastructure has a problem\"));\n} else if (!this.args.entity && !this.args.entity.file) {\n  this.debug(\"user didnt upload any file\");\n  callback(new Error(\"Missing Result file. Try uploading the file again, if this was already done.\"));\n} else uploadResult();\n","title":"upload student results","uid":"UPLOAD_STUDENT_RESULT","requiresIdentity":true,"standalone":true,"__v":0}]
