[{"_id":{"$objectID":"59b3317a9353150c8880cc95"},"code":"function ui(student, fn) {\r\n  let e = this.libs.createElement.bind(this),\r\n    c = this.constants;\r\n\r\n  function getProgrammeDetailsFor(studentType, processors) {\r\n    let elements = [],\r\n      yearOfStudy = e(\"yearOfStudy\", \"Year of Study\", \"\", c.ELEMENTTYPE.SELECT, {\r\n        type: \"PROCESSOR\",\r\n        mode: c.ENTRYMODE.OBJECTID,\r\n        config: {\r\n          value: processors.GET_YearOfStudy_5\r\n        }\r\n      }),\r\n      modeOfEntry = e(\"modeOfEntry\", \"Mode of Entry\", \"\", c.ELEMENTTYPE.SELECT, {\r\n        type: \"PROCESSOR\",\r\n        mode: c.ENTRYMODE.OBJECTID,\r\n        config: {\r\n          value: processors.GET_MODEOFENTRY\r\n        }\r\n      }),\r\n      modeOfStudy = e(\"modeOfStudy\", \"Mode of Study\", \"\", c.ELEMENTTYPE.SELECT, {\r\n        type: \"PROCESSOR\",\r\n        mode: c.ENTRYMODE.OBJECTID,\r\n        config: {\r\n          value: processors.GET_MODEOFSTUDY\r\n        }\r\n      }),\r\n      sessions = e(\"session\", \"Session\", \"\", c.ELEMENTTYPE.SELECT, {\r\n        type: \"PROCESSOR\",\r\n        config: {\r\n          value: processors.GET_SESSIONS\r\n        }\r\n      }),\r\n      departments = e(\"department\", \"Department\", \"\", c.ELEMENTTYPE.SELECTSET, {\r\n        processor: processors.DEPARTMENTS_AND_AREA,\r\n        mode: c.ENTRYMODE.OBJECTID,\r\n        path: \"departmentOption\"\r\n      }),\r\n      jupeb_departments = e(\"department\", \"Department\", \"\", c.ELEMENTTYPE.SELECT, {\r\n        type: \"PROCESSOR\",\r\n        mode: c.ENTRYMODE.OBJECTID,\r\n        config: {\r\n          value: processors.GET_UNN_JUPEB_Department_10\r\n        }\r\n      }),\r\n      programmeOptions = e(\"programmeOption\", \"Programme\", \"\", c.ELEMENTTYPE.SELECT, {\r\n        type: \"PROCESSOR\",\r\n        mode: c.ENTRYMODE.OBJECTID,\r\n        config: {\r\n          value: processors.GET_SCHOOLPROGRAMME\r\n        }\r\n      });\r\n\r\n    if (/pg/gi.test(studentType.group)) {\r\n      programmeOptions.args.config.customArgs = JSON.stringify({\r\n        query: {\r\n          group: \"PG\"\r\n        }\r\n      });\r\n      yearOfStudy.args.config.customArgs = programmeOptions.args.config.customArgs;\r\n      elements = [\r\n        departments,\r\n        yearOfStudy,\r\n        modeOfStudy,\r\n        modeOfEntry,\r\n        sessions,\r\n        programmeOptions,\r\n        e(\"qualifications\", \"Particulars Of Tertiary Institution/Qualification\", \"\", c.ELEMENTTYPE.LIST, {\r\n          itemTemplate: [\r\n            e(\"nameAndAddress\", \"Name & Address of Institution\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"regNo\", \"Reg No\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"from\", \"From\", \"\", c.ELEMENTTYPE.INPUT, {\r\n              type: c.INPUTTYPE.DATE\r\n            }),\r\n            e(\"to\", \"To\", \"\", c.ELEMENTTYPE.INPUT, {\r\n              type: c.INPUTTYPE.DATE\r\n            }),\r\n            e(\"certificate\", \"Certificate\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"fieldOfStudy\", \"Field of Study\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"grade\", \"Grade\", \"\", c.ELEMENTTYPE.INPUT)\r\n          ]\r\n        }),\r\n        e(\"employmentHistory\", \"Employment Since Leaving School, College/University\", \"\", c.ELEMENTTYPE.LIST, {\r\n          itemTemplate: [\r\n            e(\"nameAndAddress\", \"Name & Address of Employer\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"from\", \"From\", \"\", c.ELEMENTTYPE.INPUT, {\r\n              type: c.INPUTTYPE.DATE\r\n            }),\r\n            e(\"to\", \"To\", \"\", c.ELEMENTTYPE.INPUT, {\r\n              type: c.INPUTTYPE.DATE\r\n            }),\r\n            e(\"reason\", \"Reason for leaving\", \"\", c.ELEMENTTYPE.INPUT)\r\n          ]\r\n        })\r\n      ];\r\n    }\r\n    if (/under/gi.test(studentType.group)) {\r\n      programmeOptions.args.config.customArgs = JSON.stringify({\r\n        query: {\r\n          group: \"UNDERGRADUATE\"\r\n        }\r\n      });\r\n      yearOfStudy.args.config.customArgs = programmeOptions.args.config.customArgs;\r\n      elements = [departments, yearOfStudy, modeOfStudy, modeOfEntry, sessions, programmeOptions];\r\n    }\r\n\r\n    if (/jupeb/gi.test(studentType.group)) {\r\n      elements = [jupeb_departments, sessions];\r\n    }\r\n\r\n    return elements;\r\n  }\r\n\r\n  this.entityRepo.get(\"StudentType\", {}, (er, studentTypes) => {\r\n    if (er) return fn(er);\r\n    if (!studentTypes.length) return fn(new Error(\"Student types have not been setup\"));\r\n\r\n    this.libs.getProcessors(\r\n      this.entityRepo,\r\n      [\r\n        \"GET_MARITAL_STATUS\",\r\n        \"GET_GENDERS\",\r\n        \"GET_STATES\",\r\n        \"DEPARTMENTS_AND_AREA\",\r\n        \"GET_UNN_JUPEB_Department_10\",\r\n        \"GET_SESSIONS\",\r\n        \"GET_MODEOFENTRY\",\r\n        \"GET_MODEOFSTUDY\",\r\n        \"GET_RELATIONSHIPS\",\r\n        \"GET_YearOfStudy_5\",\r\n        \"GET_SCHOOLPROGRAMME\",\r\n        \"GET_RELIGIONS\",\r\n        \"GET_MEDICAL_HISTORY\"\r\n      ],\r\n      (er, processors) => {\r\n        if (er) return fn(er);\r\n        try {\r\n          this.debug(processors);\r\n          let elements = (this.args.$description && this.args.$description.steps[0].form.elements) || [];\r\n          elements.length = 0;\r\n\r\n          //Personal details\r\n          elements.push(\r\n            Object.assign(\r\n              {\r\n                order: 2\r\n              },\r\n              e(\"personalDetails\", \"Personal Details\", \"\", c.ELEMENTTYPE.SECTION, {})\r\n            )\r\n          );\r\n          elements[0].args.elements = [\r\n            e(\"firstName\", \"First Name\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"middlename\", \"Middlename\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"surname\", \"Surname\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"dob\", \"Date of Birth\", \"\", c.ELEMENTTYPE.INPUT, {\r\n              type: c.INPUTTYPE.DATE\r\n            }),\r\n            e(\"gender\", \"Gender\", \"\", c.ELEMENTTYPE.SELECT, {\r\n              type: \"PROCESSOR\",\r\n              config: {\r\n                value: processors.GET_GENDERS\r\n              }\r\n            }),\r\n            e(\"religion\", \"Religion\", \"\", c.ELEMENTTYPE.SELECT, {\r\n              type: \"PROCESSOR\",\r\n              config: {\r\n                value: processors.GET_RELIGIONS\r\n              }\r\n            }),\r\n            e(\"state\", \"State\", \"\", c.ELEMENTTYPE.SELECT, {\r\n              type: \"PROCESSOR\",\r\n              config: {\r\n                value: processors.GET_STATES\r\n              }\r\n            }),\r\n            e(\"homeTown\", \"Home Town\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"localGovt\", \"LGA\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"otherNames\", \"Other Names\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"maritalStatus\", \"Marital Status\", \"\", c.ELEMENTTYPE.SELECT, {\r\n              type: \"PROCESSOR\",\r\n              config: {\r\n                value: processors.GET_MARITAL_STATUS\r\n              }\r\n            })\r\n          ];\r\n\r\n          ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n          //Contact\r\n          elements.push(\r\n            Object.assign(\r\n              {\r\n                order: 3\r\n              },\r\n              e(\"contactDetails\", \"Contact Details\", \"\", c.ELEMENTTYPE.SECTION, {})\r\n            )\r\n          );\r\n          elements[1].args.elements = [\r\n            e(\"mobile\", \"Phone Number\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"email\", \"Email\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"contactAddress\", \"Contact Address\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"permanentAddress\", \"Permanent Home Address\", \"\", c.ELEMENTTYPE.INPUT)\r\n          ];\r\n\r\n          ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n          //sponsor Details\r\n          elements.push(\r\n            Object.assign(\r\n              {\r\n                order: 8\r\n              },\r\n              e(\"sponsorDetails\", \"Sponsor\", \"\", c.ELEMENTTYPE.SECTION, {})\r\n            )\r\n          );\r\n          elements[2].args.elements = [\r\n            e(\"surname\", \"Surname\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"firstName\", \"First Name\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"middlename\", \"Middle Name\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"address\", \"Contact Address\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"mobile\", \"Phone Number\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"relationship\", \"Relationship\", \"\", c.ELEMENTTYPE.SELECT, {\r\n              type: \"PROCESSOR\",\r\n              config: {\r\n                value: processors.GET_RELATIONSHIPS\r\n              }\r\n            })\r\n          ];\r\n          /////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n          //next of kin Details\r\n          elements.push(\r\n            Object.assign(\r\n              {\r\n                order: 7\r\n              },\r\n              e(\"nextOfKinDetails\", \"Next of Kin\", \"\", c.ELEMENTTYPE.SECTION, {})\r\n            )\r\n          );\r\n          elements[3].args.elements = [\r\n            e(\"surname\", \"Surname\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"firstName\", \"First Name\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"middlename\", \"Middle Name\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"address\", \"Contact Address\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"mobile\", \"Phone Number\", \"\", c.ELEMENTTYPE.INPUT),\r\n            e(\"relationship\", \"Relationship\", \"\", c.ELEMENTTYPE.SELECT, {\r\n              type: \"PROCESSOR\",\r\n              config: {\r\n                value: processors.GET_RELATIONSHIPS\r\n              }\r\n            })\r\n          ];\r\n\r\n          /////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n          //Programme Details\r\n          let studentType = e(\"studentType\", \"Student Type\", \"\", c.ELEMENTTYPE.SELECTSET, {\r\n            disabled: true,\r\n            path: \"programmeDetails\",\r\n            items: studentTypes.map(st => ({\r\n              id: st._id,\r\n              displayLabel: st.name,\r\n              elements: getProgrammeDetailsFor(st, processors)\r\n            }))\r\n          });\r\n          elements.push(\r\n            Object.assign(\r\n              {\r\n                order: 4\r\n              },\r\n              studentType\r\n            )\r\n          );\r\n          ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n          elements.push(\r\n            Object.assign(\r\n              {\r\n                order: 5\r\n              },\r\n              e(\"regNo\", \"Registration Number\", \"\", c.ELEMENTTYPE.INPUT)\r\n            )\r\n          );\r\n          elements.push(\r\n            Object.assign(\r\n              {\r\n                order: 6\r\n              },\r\n              e(\"refNo\", \"Entry Number\", \"\", c.ELEMENTTYPE.INPUT)\r\n            )\r\n          );\r\n\r\n          let filteredStudentType = studentTypes.filter(type => type._id.toString() == student.studentType);\r\n          if (/pg/gi.test(filteredStudentType[0].group)) {\r\n            elements[0].args.elements.push(e(\"maidenName\", \"Maiden Name\", \"\", c.ELEMENTTYPE.INPUT));\r\n            elements.push(\r\n              Object.assign(\r\n                {\r\n                  order: 9\r\n                },\r\n                e(\"medicalDetails\", \"Medical Details\", \"\", c.ELEMENTTYPE.SECTION, {\r\n                  elements: [\r\n                    e(\"hasDisabilities\", \"Do you have disability?\", \"\", c.ELEMENTTYPE.INPUT),\r\n                    e(\"disability\", \"If yes, please explain\", \"\", c.ELEMENTTYPE.INPUT)\r\n                  ]\r\n                })\r\n              )\r\n            );\r\n          }\r\n\r\n          if (/under/gi.test(filteredStudentType[0].group)) {\r\n            elements.push(\r\n              Object.assign(\r\n                {\r\n                  order: 4\r\n                },\r\n                e(\"medicalDetails\", \"Medical Details\", \"\", c.ELEMENTTYPE.SECTION, {\r\n                  elements: [\r\n                    e(\"bloodGroup\", \"Blood Group\", \"\", c.ELEMENTTYPE.INPUT),\r\n                    e(\"genotype\", \"Genotype\", \"\", c.ELEMENTTYPE.INPUT),\r\n                    Object.assign(\r\n                      e(\r\n                        \"medicalHistory\",\r\n                        \"Medical History\",\r\n                        \"Fill medical history if any.\",\r\n                        c.ELEMENTTYPE.LIST,\r\n                        {\r\n                          itemTemplate: [\r\n                            e(\r\n                              \"disease\",\r\n                              \"Disease/Infection\",\r\n                              \"\",\r\n                              c.ELEMENTTYPE.SELECT,\r\n                              {\r\n                                type: \"PROCESSOR\",\r\n                                config: {\r\n                                  value: processors.GET_MEDICAL_HISTORY\r\n                                }\r\n                              },\r\n                              [this.libs.createRequiredValidator()]\r\n                            ),\r\n                            e(\"diseaseDetails\", \"Disease Details\", \"\", c.ELEMENTTYPE.INPUT)\r\n                          ]\r\n                        }\r\n                      ),\r\n                      {\r\n                        uid: \"table\"\r\n                      }\r\n                    )\r\n                  ]\r\n                })\r\n              )\r\n            );\r\n          }\r\n\r\n          elements.unshift(\r\n            Object.assign(\r\n              {\r\n                order: 1,\r\n                uid: \"PROFILE_PIC\"\r\n              },\r\n              e(\r\n                \"profilePic\",\r\n                \"Passport\",\r\n                \"All students must upload a passport photograph with either white or black background\",\r\n                this.constants.ELEMENTTYPE.FILEUPLOAD,\r\n                {\r\n                  fileType: \"png|jpg|jpeg\",\r\n                  showPreview: true\r\n                }\r\n              )\r\n            )\r\n          );\r\n\r\n          elements.push(e(\"_id\", \"\", \"\", c.ELEMENTTYPE.HIDDEN));\r\n\r\n          setImmediate(fn, null, this.args.$description || elements);\r\n        } catch (e) {\r\n          this.debug(e);\r\n          setImmediate(fn, e);\r\n        }\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nexports = ui;\r\n","uid":"studentProfileUI","__v":0}]
