[{"_id":{"$objectID":"59aad814f43ed31314c3bb6e"},"code":"//get the uploaded list from storage and loop over the list.\n//will need to use a web worker if this is too CPU intensive.\n\nlet inf = this.entityRepo.infrastructure(),\n  self = this,\n  fileUpload = inf.fileUpload,\n  fileParser = inf.fileParser,\n  threadPool = inf.threadPool;\nthis.debug(\"=============================================================\");\nthis.debug(this.args);\nthis.libs.parseObjectIds.call(this, this.args);\nlet branches = {\n  EXISTING: () => {\n    let args = this.args.config,\n      studentKind = args.studentKind;\n\n    this.libs.resolveStudentType(studentKind, this.entityRepo, (er, studentType) => {\n      if (er) return callback(er);\n\n      if ((studentKind.indexOf(\"UNDERGRADUATE\") !== -1 || studentKind.indexOf(\"PG\") !== -1) && args.studentDetails.departmentOption) {\n        args.studentDetails.departmentOption = args.studentDetails.departmentOption.areaOfSpecialization;\n      }\n      if (studentKind.indexOf(\"UNDERGRADUATE\") !== -1) {\n        //arrange the select set options properly.\n        studentType = args.studentDetails.studentMode;\n        args.studentDetails.modeOfEntry = args.studentDetails.modeOfEntry.value;\n      }\n\n      let contx = { studentKind, studentType };\n      this.debug(contx);\n      try {\n        this.libs.convertFileAndSave(\n          this.args.$domain.config.existingStudentClass,\n          this.args.config.list,\n          contx,\n          [\"firstName\", \"surname\", \"middlename\", \"regNo\"],\n          (list, fn) => {\n            this.async.parallel(list.map(() => this.entityRepo.create.bind(null, studentKind, args.studentDetails)), (er, details) => {\n              if (er) return fn(er);\n              this.debug(\"saved everything we need to save.\");\n              this.debug(\"will assign and return\");\n              this.debug(details);\n              fn(\n                null,\n                list.map((x, index) => {\n                  return (x.programmeDetails = details[index][0]._id.toString()), x;\n                })\n              );\n            });\n          },\n          fileUpload,\n          fileParser,\n          threadPool,\n          this.entityRepo,\n          this.args.$user,\n          callback\n        );\n      } catch (e) {\n        this.debug(\"synchronous error caught\");\n        callback(e);\n      }\n    });\n  },\n  NEW: () => {\n    let args = this.args.config,\n      contx = { studentType: args.studentType, programmeDetails: args.programmeDetails };\n    this.libs.convertFileAndSave(\n      this.args.$domain.config.admissionTicketClass,\n      args._list,\n      contx,\n      [\"firstName\", \"surname\", \"middlename\", \"refNo\"],\n      null,\n      fileUpload,\n      fileParser,\n      threadPool,\n      this.entityRepo,\n      this.args.$user,\n      callback\n    );\n  }\n};\n\nif (!fileUpload || !fileParser || !threadPool) {\n  this.debug(`something is undefined ...fileUpload:${!!fileUpload}, fileParser:${!!fileParser}, threadPool:${!!threadPool}`),\n    callback(new Error(\"Infrastructure has a problem\"));\n} else if (!this.args.config || (!this.args.config.list && !this.args.config._list)) {\n  this.debug(\"user didnt upload any file\"), callback(new Error(\"Missing Student data file\"));\n} else branches[this.args.studentType]();\n","title":"Upload Admission List","requiresIdentity":true,"__v":0,"standalone":true}]
