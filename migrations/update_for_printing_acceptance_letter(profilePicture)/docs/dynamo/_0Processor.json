[{"_id":{"$objectID":"5ae2d82cdaf4ff233c73e431"},"code":"var self = this;\r\nthis.libs.getDomain.call(this, (er, domain) => {\r\n  if (er) return callback(er);\r\n  Object.defineProperties(this.args, {\r\n    $appDomain: {\r\n      enumerable: false,\r\n      get: function() {\r\n        return domain;\r\n      }\r\n    }\r\n  });\r\n\r\n  this.entityRepo.aggregate(\r\n    this.args.$domain.config.invoiceClass,\r\n    [\r\n      {\r\n        $match: {\r\n          userId: {\r\n            $objectID: this.args.$user._id\r\n          },\r\n          successful: true\r\n        }\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: \"fees\",\r\n          localField: \"feeId\",\r\n          foreignField: \"_id\",\r\n          as: \"_fee\"\r\n        }\r\n      },\r\n      {\r\n        $unwind: {\r\n          path: \"$_fee\",\r\n          preserveNullAndEmptyArrays: true\r\n        }\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: \"feepurposes\",\r\n          localField: \"_fee.feePurpose\",\r\n          foreignField: \"_id\",\r\n          as: \"_feePurpose\"\r\n        }\r\n      },\r\n      {\r\n        $match: {\r\n          $or: [\r\n            {\r\n              \"_feePurpose.name\": \"Acceptance Fee\"\r\n            },\r\n            {\r\n              \"_feePurpose.uid\": \"ACCEPTANCE_FEES\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        $unwind: {\r\n          path: \"$_feePurpose\",\r\n          preserveNullAndEmptyArrays: true\r\n        }\r\n      },\r\n      {\r\n        $project: {\r\n          _id: 0,\r\n          invoiceNumber: 1\r\n        }\r\n      },\r\n      {\r\n        $limit: 1\r\n      }\r\n    ],\r\n    (error, invoice) => {\r\n      if (error) callback(error);\r\n      if (!invoice || invoice.length < 1) callback(new Error(\"Please pay your acceptance fee before printing the letter\"));\r\n      this.debug(invoice);\r\n      this.async.parallel(\r\n        [\r\n          cb => {\r\n            this.debug(\"about to get the session\");\r\n            this.entityRepo.get(\r\n              \"Session\",\r\n              this.args.session\r\n                ? {\r\n                    _id: this.args.session\r\n                  }\r\n                : {\r\n                    isCurrent: true\r\n                  },\r\n              {\r\n                one: true\r\n              },\r\n              (er, session) => {\r\n                if (er) return cb(er);\r\n                if (!session) return cb(new Error(\"Invalid session\"));\r\n                cb(null, session);\r\n              }\r\n            );\r\n          },\r\n          cb => {\r\n            this.debug(\"about to get the student\");\r\n            this.libs.getStudent.call(\r\n              this,\r\n              {\r\n                userId: this.args.$user._id\r\n              },\r\n              (er, student) => {\r\n                if (er) cb(er);\r\n                if (!student)\r\n                  cb(\r\n                    new Error(\r\n                      \"Are you sure you are a student?, because we could not find your details. Kindly contact your school authorities\"\r\n                    )\r\n                  );\r\n                cb(null, student);\r\n              }\r\n            );\r\n          },\r\n          cb => {\r\n            this.debug(\"about to get the user\");\r\n            this.entityRepo.infrastructure().userManager.getUserById(this.args.$user._id, (error, user) => {\r\n              if (error || !user) cb(error);\r\n              if (!user) this.debug(\"the user could not be ascertained -----------=================%%%%%%$$$$$$$\");\r\n              cb(null, user);\r\n            });\r\n          }\r\n        ],\r\n        (error, results) => {\r\n          self.debug(\"i got to the end of the first async statement\");\r\n          self.debug(\"the result length is \" + results.length);\r\n          if (!results || results.length != 3) callback(new Error(\"An error occurred while trying to prepare the letter\"));\r\n          let student = results[1];\r\n          let user = results[2];\r\n\r\n          self.async.parallel(\r\n            [\r\n              cb => {\r\n                this.debug(\"about to get student type\");\r\n                this.entityRepo.get(\r\n                  \"StudentType\",\r\n                  {\r\n                    _id: student.studentType\r\n                  },\r\n                  {\r\n                    one: true\r\n                  },\r\n                  (error, studentType) => {\r\n                    if (error || !studentType) cb(new Error(error));\r\n                    cb(null, studentType);\r\n                  }\r\n                );\r\n              },\r\n              cb => {\r\n                this.debug(\"about to get the department\");\r\n                this.entityRepo.get(\r\n                  \"Department\",\r\n                  {\r\n                    _id: student.programmeDetails.department\r\n                  },\r\n                  {\r\n                    one: true\r\n                  },\r\n                  (error, department) => {\r\n                    this.debug(\"about to get a faculty\");\r\n                    if (error || !department) cb(error);\r\n                    this.entityRepo.get(\r\n                      \"Faculty\",\r\n                      {\r\n                        _id: department.faculty\r\n                      },\r\n                      {\r\n                        one: true\r\n                      },\r\n                      (error, faculty) => {\r\n                        if (error || !faculty) cb(error);\r\n                        cb(\r\n                          null,\r\n                          Object.assign(\r\n                            {},\r\n                            {\r\n                              department: department.name,\r\n                              faculty: faculty.name\r\n                            }\r\n                          )\r\n                        );\r\n                      }\r\n                    );\r\n                  }\r\n                );\r\n              },\r\n              cb => {\r\n                this.debug(\"about to get the student profile picture\");\r\n                this.entityRepo.infrastructure().fileUpload.readFile(student.profilePic, null, (er, data, description) => {\r\n                  if (er) return cb(er);\r\n                  let profilePic;\r\n                  if (data) {\r\n                    profilePic = `data:${description.mime};base64,${data.toString(\"base64\")}`;\r\n                  }\r\n                  this.debug(profilePic);\r\n                  cb(null, profilePic);\r\n                });\r\n              }\r\n            ],\r\n            (error, results) => {\r\n              this.debug(\"i got to the end of the second async\");\r\n              if (error || !results.length) callback(new Error(\"An error has occured unfortunately\"));\r\n\r\n              let acceptance = {\r\n                fullName: `${student.personalDetails.surname}, ${student.personalDetails.firstName} ${student.personalDetails.middlename}`,\r\n                refNo: student.refNo || student.regNo,\r\n                lga: student.personalDetails.localGovt,\r\n                state: student.personalDetails.state.name,\r\n                studentType: results[0].name,\r\n                department: results[1].department,\r\n                faculty: results[1].faculty,\r\n                receiptNo: invoice.invoiceNumber || invoice[0].invoiceNumber,\r\n                profilePic: results.length > 2 && results[2]\r\n              };\r\n\r\n              return this.libs.getHtml.call(\r\n                this,\r\n                \"ACCEPTANCE_LETTER\",\r\n                Object.assign(\r\n                  {},\r\n                  {\r\n                    acceptance: acceptance\r\n                  }\r\n                ),\r\n                (er, form) => {\r\n                  if (er) return callback(er);\r\n                  return callback(null, {\r\n                    acceptance: form\r\n                  });\r\n                }\r\n              );\r\n            }\r\n          );\r\n        }\r\n      );\r\n    }\r\n  );\r\n});\r\n","title":"Processor for print acceptance letter","requiresIdentity":true,"standalone":false,"__v":0}]
