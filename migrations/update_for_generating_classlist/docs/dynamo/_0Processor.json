[{"_id":{"$objectID":"5a62ffaf10545852b0cec697"},"code":"this.entityRepo.get(\"Staff\", { userId: this.args.$user._id }, { one: true }, (er, staff) => {\n  if (er) return callback(er);\n  if (!staff) return callback(new Error(\"You have to have a staff profile to download a class list\"));\n  this.entityRepo.aggregate(\n    \"CourseForm\",\n    [\n      {\n        $match: {\n          approved: true,\n          session: { $objectID: this.args.session },\n          courses: { $objectID: this.args.course }\n        }\n      },\n      {\n        $lookup: {\n          from: this.entityRepo.getCollectionName(this.args.$domain.config.studentClass),\n          localField: \"studentId\",\n          foreignField: \"_id\",\n          as: \"_student\"\n        }\n      },\n      {\n        $match: {\n          \"_student.programmeDetails.department\": { $in: (staff.classListDepartments || []).map(x => ({ $objectID: x.department })) }\n        }\n      },\n      {\n        $unwind: \"$_student\"\n      },\n      {\n        $project: {\n          _id: 0,\n          \"Reg No\": \"$_student.refNo\",\n          \"Full Name\": {\n            $concat: [\n              \"$_student.personalDetails.firstName\",\n              \" \",\n              \"$_student.personalDetails.middlename\",\n              \" \",\n              \"$_student.personalDetails.surname\"\n            ]\n          }\n        }\n      }\n    ],\n    (er, data) => {\n      if (er) return callback(er);\n      if (!data || !data.length) return callback(new Error(\"No Student has enrolled!\"));\n\n      this.debug(data);\n      this.entityRepo.get(\"Course\", { _id: this.args.course }, { one: true }, (error, course) => {\n        if (error) callback(error);\n        else {\n          let i = 1;\n          data = data.map(x =>\n            Object.assign(\n              {\n                \"S/N\": i++\n              },\n              x,\n              {\n                \"Exam Score\": \"\",\n                \"Course Code\": course.code,\n                \"Exam Date\": \"\"\n              }\n            )\n          );\n          let inf = this.entityRepo.infrastructure();\n\n          this.debug(this.args.$user);\n          this.debug(\"about to generate an xlsx workbook\");\n          inf.fileParser.generate(\"xlsx\", { sheetName: \"Sheet 1\", arr: data }, (er, workbook, fileType) => {\n            if (er) return callback(er);\n            this.debug(\"file type---x\");\n            this.debug(fileType);\n            inf.fileUpload.generateTempFile(this.args.$user, \"xlsx\", workbook, \"Class List\", (er, saved) => {\n              if (er) return callback(er);\n\n              let accessToken = inf.userManager.generateScopedToken(\"download\", saved, 600);\n\n              callback(null, [\n                this.libs.createElement(\"download\", \"Download\", \"\", this.constants.ELEMENTTYPE.COMMAND, {\n                  commandText: \"Download Class List\",\n                  commandIcon: \"cloud_download\",\n                  commandType: this.constants.COMMANDTYPE.DOWNLOAD,\n                  commandProcessorArgs: JSON.stringify(\n                    Object.assign(\n                      {},\n                      {\n                        mime: inf.fileUpload.MIMES.xlsx,\n                        description: \"Class List\",\n                        access_token: accessToken\n                      },\n                      saved\n                    )\n                  )\n                })\n              ]);\n            });\n          });\n        }\n      });\n    }\n  );\n});\n","title":"Generate Class list Excel","requiresIdentity":true,"__v":0,"standalone":true}]
