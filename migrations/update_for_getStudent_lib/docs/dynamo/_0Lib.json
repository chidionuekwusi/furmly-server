[{"_id":{"$objectID":"59cae86f3e190314b0d2d7a2"},"code":"function getStudent(query, studentClass, fn) {\n  if (Array.prototype.slice.call(arguments).length == 2) {\n    fn = studentClass;\n    studentClass = null;\n  }\n  this.async.waterfall(\n    [\n      this.entityRepo.get.bind(null, studentClass || this.args.$domain.config.studentClass, query, { one: true, full: true }),\n      (student, callback) => {\n        if (Array.prototype.slice.call(arguments).length == 1) {\n          return callback(new Error(\"Couldnt find a student matching that criteria\"));\n        }\n\n        let tasks = [];\n\n        if ((student.studentType && /PG/i.test(student.studentType.group)) || /UNDERGRADUATE/i.test(student.studentType.group)) {\n          tasks.push(callback => {\n            this.entityRepo.get(\"Department\", { _id: student.programmeDetails.department }, { one: true, full: true }, (er, dep) => {\n              if (er) return callback(er);\n\n              if (student.programmeDetails.departmentOption && student.programmeDetails.departmentOption.areaOfSpecialization) {\n                let area = dep.areasOfSpecialization.filter(\n                  x => x._id.toString() == student.programmeDetails.departmentOption.areaOfSpecialization\n                );\n                if (area.length) student.programmeDetails.departmentOption.areaOfSpecialization = area[0];\n              }\n\n              callback(null, dep);\n            });\n          });\n          tasks.push(this.entityRepo.get.bind(null, \"YearOfStudy\", { _id: student.programmeDetails.yearOfStudy }, { one: true }));\n          tasks.push(this.entityRepo.get.bind(null, \"Session\", { _id: student.programmeDetails.session }, { one: true }));\n          tasks.push(this.entityRepo.get.bind(null, \"ModeOfStudy\", { _id: student.programmeDetails.modeOfStudy }, { one: true }));\n          tasks.push(this.entityRepo.get.bind(null, \"ModeOfEntry\", { _id: student.programmeDetails.modeOfEntry }, { one: true }));\n        }\n\n        if (student.studentType && /PG/i.test(student.studentType.group)) {\n          tasks.push(this.entityRepo.get.bind(null, \"ProgrammeOption\", { _id: student.programmeDetails.programmeOption }, { one: true }));\n        }\n\n        if (student.studentType && /JUPEB/i.test(student.studentType.group)) {\n          tasks.push(this.entityRepo.get.bind(null, \"JUPEB_Department\", { _id: student.programmeDetails.department }, { one: true }));\n        }\n\n        this.async.parallel(tasks, (er, info) => {\n          if (er) return callback(er);\n\n          if ((student.studentType && /PG/i.test(student.studentType.group)) || /UNDERGRADUATE/i.test(student.studentType.group)) {\n            Object.assign(student.programmeDetails, {\n              department: info[0],\n              yearOfStudy: info[1],\n              session: info[2],\n              modeOfStudy: info[3],\n              modeOfEntry: info[4]\n            });\n          }\n\n          if (student.studentType && /PG/i.test(student.studentType.group)) {\n            student.programmeDetails.schoolProgramme = info[5];\n          }\n\n          if (student.studentType && /JUPEB/i.test(student.studentType.group)) {\n            student.programmeDetails.department = info[0];\n          }\n\n          callback(null, student);\n        });\n      }\n    ],\n    (er, student) => {\n      if (er) return fn(er);\n\n      this.debug(student);\n      fn(null, student);\n    }\n  );\n}\n\nexports = getStudent;\n","uid":"getStudent","__v":0}]
