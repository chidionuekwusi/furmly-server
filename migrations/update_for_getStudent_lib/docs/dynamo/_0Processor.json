[{"_id":{"$objectID":"5a9814bf8e96860c303b4d4e"},"code":"var self = this;\nself.debug(\"registration number is: \");\nself.debug(self.args.registrationNumber);\nthis.libs.getStudent.call(\n  this,\n  { regNo: self.args.registrationNumber },\n  this.args.$appDomain.config[\"studentClass\"],\n  (error, student) => {\n    if (error) {\n      this.debug(error);\n      return callback(new Error(\"Student not found\"));\n    }\n    if (!student) {\n      return callback(new Error(\"Student not found\"));\n    }\n\n    this.args.details = {\n      department: student.programmeDetails.department,\n      yearOfStudy: student.programmeDetails.yearOfStudy\n    };\n\n    let e = (...rest) => {\n        return this.libs.createElement.apply(this, rest);\n      },\n      disable = function(list, element) {\n        if (list && list.length && list.indexOf(element.name) !== -1) element.args = Object.assign(element.args || {}, { disabled: true });\n      },\n      c = this.constants,\n      required = this.libs.createRequiredValidator,\n      personalDetails = e(\"personalDetails\", \"BIO DATA (SECTION A)\", \"\", c.ELEMENTTYPE.SECTION, {\n        elements: [\n          e(\n            \"registrationNumber\",\n            \"JAMB/ Reg Number\",\n            \"\",\n            c.ELEMENTTYPE.INPUT,\n            { type: c.INPUTTYPE.TEXT, default: student.regNo, order: 1 },\n            [required()]\n          ),\n          e(\n            \"firstName\",\n            \"First Name\",\n            \"\",\n            c.ELEMENTTYPE.INPUT,\n            { type: c.INPUTTYPE.TEXT, default: student.personalDetails.firstName, order: 2 },\n            [required()]\n          ),\n          e(\"middleName\", \"Middle Name\", \"\", c.ELEMENTTYPE.INPUT, {\n            type: c.INPUTTYPE.TEXT,\n            default: student.personalDetails.middlename,\n            order: 3\n          }),\n          e(\n            \"surname\",\n            \"Surname\",\n            \"\",\n            c.ELEMENTTYPE.INPUT,\n            { type: c.INPUTTYPE.TEXT, default: student.personalDetails.surname, order: 4 },\n            [required()]\n          ),\n          e(\"confirmationNumber\", \"Confirmation Number\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT, order: 5 }, [required()]),\n          e(\n            \"invoiceNumber\",\n            \"Invoice Number\",\n            \"\",\n            c.ELEMENTTYPE.INPUT,\n            { type: c.INPUTTYPE.NUMBER, order: 6, default: self.args.invoiceNumber },\n            [required()]\n          ),\n          e(\"bankName\", \"Bank Name\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT, order: 7 }, [required()]),\n          e(\"bankBranchName\", \"Bank Branch Name\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT, order: 8 }, [required()]),\n          e(\"datePaid\", \"Date Paid\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.DATE, order: 9 }, [required()]),\n          e(\n            \"programme\",\n            \"Programme\",\n            \"\",\n            c.ELEMENTTYPE.SELECTSET,\n            {\n              type: \"PROCESSOR\",\n              mode: c.ENTRYMODE.OBJECTID,\n              items: [\n                {\n                  id: student.programmeDetails.programmeOption,\n                  displayLabel: student.programmeDetails.programmeOption\n                }\n              ],\n              order: 10\n            },\n            [required()]\n          ),\n          e(\n            \"currentDepartment\",\n            \"Current Department\",\n            \"\",\n            c.ELEMENTTYPE.SELECTSET,\n            {\n              type: \"PROCESSOR\",\n              mode: c.ENTRYMODE.OBJECTID,\n              items: [\n                {\n                  id: student.programmeDetails.department._id,\n                  displayLabel: student.programmeDetails.department.name,\n                  elements: [\n                    this.libs.createElement(\"areaOfSpecialization\", \"Area of Specialization\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                      order: 12,\n                      items: student.programmeDetails.department.areasOfSpecialization.map(a => ({\n                        id: a._id || \"\",\n                        displayLabel: a.name || \"\"\n                      }))\n                    })\n                  ]\n                }\n              ],\n              path: \"config\",\n              order: 11\n            },\n            [required()]\n          ),\n          e(\n            \"currentYearOfStudy\",\n            \"Year Of Study\",\n            \"\",\n            c.ELEMENTTYPE.SELECTSET,\n            {\n              type: \"PROCESSOR\",\n              mode: c.ENTRYMODE.OBJECTID,\n              items: [\n                {\n                  id: student.programmeDetails.yearOfStudy._id,\n                  displayLabel: student.programmeDetails.yearOfStudy.name\n                }\n              ],\n              order: 13\n            },\n            [required()]\n          )\n        ]\n      });\n\n    let disabled = ['firstName', 'middleName', 'surname', 'registrationNumber', 'invoiceNumber'];\n    disable.bind(this, disabled);\n    this.args.$nextStep.form.elements.unshift(personalDetails);\n    setImmediate(callback, null, this.args);\n  }\n);\n","title":"Get Student Details and build UI","requiresIdentity":false,"standalone":true,"__v":0}]
