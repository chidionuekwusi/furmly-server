[{"_id":{"$objectID":"5a202b8bb3d34529b068ed1b"},"code":"function print(inv, confirm = true, callback) {\r\n  let printReceipt = invoice => {\r\n      if (invoice) {\r\n        fetchReceiptInfo(invoice);\r\n      } else {\r\n        this.entityRepo.get(\r\n          this.args.$domain.config.invoiceClass,\r\n          {\r\n            invoiceNumber: inv\r\n          },\r\n          { one: true, full: true },\r\n          (er, invoice) => {\r\n            if (er) return callback(er);\r\n            if (!invoice) return callback(new Error(\"Could not find any payment for that reference number\"));\r\n            fetchReceiptInfo(invoice);\r\n          }\r\n        );\r\n      }\r\n    },\r\n    decisionTree = {\r\n      PRINT: () => {\r\n        return printReceipt();\r\n      },\r\n      CONFIRM: () => {\r\n        this.entityRepo.get(\r\n          this.args.$domain.config.invoiceClass,\r\n          {\r\n            invoiceNumber: inv\r\n          },\r\n          {\r\n            one: true,\r\n            full: true\r\n          },\r\n          (er, invoice) => {\r\n            if (er) return callback(er);\r\n\r\n            if (!invoice) return callback(new Error(\"Could not find any payment for that reference\"));\r\n\r\n            //ive got the invoice.\r\n            this.debug(`invoice:${JSON.stringify(invoice, null, \" \")}\\n----x`);\r\n            switch (invoice.vendor) {\r\n              case \"remita\":\r\n                this.libs.confirmRemitaPayment.call(\r\n                  this,\r\n                  invoice.invoiceNumber,\r\n                  this.libs.flattenByNamespace(\"remita\", this.args.$domain.config),\r\n                  (er, paid) => {\r\n                    if (er) return callback(er);\r\n                    if (paid) return this.debug(\"invoice has been paid\"), printReceipt(invoice);\r\n\r\n                    return callback(new Error(\"Fee has not been paid\"));\r\n                  }\r\n                );\r\n                break;\r\n              case \"etranzact\":\r\n                break;\r\n              default:\r\n                return callback(new Error(\"Unknown Invoice Vendor, could not confirm transaction status\"));\r\n            }\r\n          }\r\n        );\r\n      }\r\n    },\r\n    fetchReceiptInfo = invoice => {\r\n      this.async.parallel(\r\n        [\r\n          this.entityRepo.get.bind(\r\n            null,\r\n            \"Fee\",\r\n            {\r\n              _id: invoice.feeId\r\n            },\r\n            {\r\n              one: true,\r\n              full: true\r\n            }\r\n          ),\r\n          this.libs.getStudent.bind(this, {\r\n            userId: invoice.userId\r\n          })\r\n        ],\r\n        (er, info) => {\r\n          if (er) return callback(er);\r\n\r\n          let fee = info[0],\r\n            student = info[1];\r\n\r\n          getTemplateFor(student, fee, invoice);\r\n        }\r\n      );\r\n    },\r\n    getTemplateFor = (student, fee, invoice) => {\r\n      //   let p = student.personalDetails,\r\n      //     header = [],\r\n      //     footer = [];\r\n\r\n      //   if (/school\\s*fees/i.test(fee.feePurpose.name)) {\r\n      //     header.push({\r\n      //       \"Matriculation Number\": student.regNo\r\n      //     });\r\n      //     header.push({\r\n      //       Department: student.programmeDetails.department.name\r\n      //     });\r\n      //     footer.push({\r\n      //       \"Being payment for \": student.programmeDetails.session.name\r\n      //     });\r\n      //   }\r\n      let hidden = /^_/;\r\n      invoice.created = invoice.created.toLocaleDateString();\r\n      invoice.domainName = this.args.$domain.name;\r\n      (invoice.feeId.feeBreakdown || []).forEach(x => (x.amount = this.libs.formatThousands(x.amount)));\r\n      invoice.feeId.fee = this.libs.formatThousands(invoice.feeId.fee);\r\n      invoice.extra = Object.keys(invoice.extra || {}).reduce((sum, x) => {\r\n        if (hidden.test(x)) return sum;\r\n        return (sum[x] = invoice.extra[x]), sum;\r\n      }, {});\r\n\r\n      this.libs.getHtmlTemplates.call(\r\n        this,\r\n        [[\"GENERAL_STYLES\"], [\"BOOTSTRAP\"], [\"FeeReceipt\", invoice]],\r\n        this.args.$user.domain,\r\n        (er, html) => {\r\n          if (er) return callback(er);\r\n\r\n          return callback(null, [\r\n            this.libs.createElement(\"receipt\", \"\", \"\", this.constants.ELEMENTTYPE.HTMLVIEW, {\r\n              html: html.reduce((sum, x) => {\r\n                return (sum += x.render()), sum;\r\n              }, \"\")\r\n            })\r\n          ]);\r\n        }\r\n      );\r\n    };\r\n\r\n  this.debug(this.args);\r\n\r\n  decisionTree[(confirm && \"CONFIRM\") || \"PRINT\"].call(this);\r\n}\r\n\r\nexports = print;\r\n","uid":"printReceipt","__v":0}]
