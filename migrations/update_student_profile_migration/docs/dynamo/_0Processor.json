[{"_id":{"$objectID":"59b31b66fdd70b00b82d4bb6"},"code":"//this.debug(this.args);\n//first fetch the current users information.\nfunction disable(list, element) {\n  if (list && list.length && list.indexOf(element.name) !== -1) element.args = Object.assign(element.args || {}, { disabled: true });\n}\nif (this.entityRepo.infrastructure().userManager.inRole(this.args.$domain.config.studentRole, this.args.$user)) {\n  this.entityRepo.get(this.args.$domain.config.studentClass, { userId: this.args.$user._id }, (er, student) => {\n    this.debug(student);\n    if (er) return callback(er);\n    if (!student.length) return callback(new Error(\"couldnt find user profile\"));\n    student = student[0];\n\n    return this.libs.studentProfileUI.call(this, student, (er, ui) => {\n      //check if user is student.\n      this.entityRepo.get(\"StudentType\", { _id: student.studentType, group: /undergraduate/i }, (er, isUndergraduate) => {\n        if (er) return callback(er);\n        let disabled = [\"firstName\", \"middlename\", \"otherNames\", \"surname\", \"regNo\", \"refNo\"];\n        if (isUndergraduate.length) {\n          disabled = disabled.concat([\"department\", \"session\", \"studentType\", \"modeOfEntry\"]);\n\n          if (student.updatedProfile) disabled.push(\"yearOfStudy\");\n        }\n        this.libs.visitElements(ui, disable.bind(this, disabled));\n        callback(er, student, ui);\n      });\n    });\n  });\n} else {\n  callback(new Error(\"This view is strickly for Logged in Students\"));\n}\n","title":"Fetches student data + builds UI","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5ad9e8677c72ff6c4038945b"},"code":"this.entityRepo.get(\"MedicalRecord\", {}, {}, (error, result) => {\n  if (error) callback(new Error(error));\n  result = result.map(r => {\n    return {\n      _id: r.name,\n      displayLabel: r.name\n    };\n  });\n  callback(null, result);\n});\n","title":"Get Medical History","uid":"GET_MEDICAL_HISTORY","requiresIdentity":false,"standalone":true,"__v":0}]
