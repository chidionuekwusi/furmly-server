[{"_id":{"$objectID":"5a6737785773415b3c17c393"},"code":"this.entityRepo.get(\"Fee\", { _id: this.args.applicationType }, { one: true, full: true }, (er, fee) => {\n  if (er) return callback(er);\n  if (!fee) return callback(new Error(\"Could not find the fee\"));\n\n  let result = { _fee: this.args.applicationType, _form: this.args._form, registrationNumber: this.args.registrationNumber },\n    domain = this.args.$appDomain;\n  //check if an invoice exists for this registrationNumber\n  this.entityRepo.get(\n    domain.config.invoiceClass,\n    { \"extra.registrationNumber\": this.args.registrationNumber, feeId: this.args.applicationType },\n    { one: true },\n    (er, invoice) => {\n      if (er) return callback(er);\n\n      if (invoice) {\n        //invoice exists so skip to last step.\n        return this.args.$process.steps[this.args.$process.steps.length - 1].describe((er, description) => {\n          this.args.$nextStep = description;\n          if (invoice.successful) this.libs.findElementByName(this.args.$nextStep.form.elements, \"pay\").args.disabled = true;\n          let messageContext = Object.assign({}, { form: this.args._form, RRR: invoice.invoiceNumber }),\n            info = this.libs.APPLICATION_TYPE_TO_INFO[fee.uid] || this.libs.APPLICATION_TYPE_TO_INFO.default,\n            exp = /\\{(\\w+)\\}/gi,\n            _info = \"\" + info,\n            match = exp.exec(info);\n          while (match !== null) {\n            _info = _info.replace(match[0], messageContext[match[1]]);\n            // matched text: match[0]\n            // match start: match.index\n            // capturing group n: match[n]\n            match = exp.exec(info);\n          }\n          let url = `${domain.config[\"remita.payUrl\"]}?RRR=${invoice.invoiceNumber}&domain=${domain._id}`;\n          callback(null, {\n            info:\n              _info ||\n              `Successfully generated Invoice Number ${invoice.invoiceNumber} , please use this invoice number to make payment at any bank branch nationwide`,\n            navigation: {\n              pay: `WEBVIEW|url=${encodeURIComponent(url)}|title=Fees`,\n              fill: `${this.args._form}|invoiceNumber=${invoice.invoiceNumber}`,\n              receipt: `RECEIPT_VIEW|invoiceNumber=${invoice.invoiceNumber}`\n            }\n          });\n        });\n      }\n\n      if (this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.feePurpose.uid]) {\n        this.debug(\"has validation rules...\");\n        return this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.feePurpose.uid].call(this, this.args, (er, extraInfo) => {\n          if (er) return callback(er);\n          this.debug(\"all validation rules for pass\");\n          return callback(null, Object.assign(result, extraInfo || {}));\n        });\n      }\n\n      return callback(null, result);\n    }\n  );\n});\n","title":"Initial checks for generating RRR for Anon Applications","requiresIdentity":true,"__v":0,"standalone":false,"_references":["findElementByName","APPLICATION_TYPE_TO_INFO","APPLICATION_INVOICE_GENERATION_VALIDATION"],"_code":"this.entityRepo.get(\"Fee\", { _id: this.args.applicationType }, { one: true, full: true }, (er, fee) => {\ntry{\n{\n  if (er) return callback(er);\n  if (!fee) return callback(new Error(\"Could not find the fee\"));\n\n  let result = { _fee: this.args.applicationType, _form: this.args._form, registrationNumber: this.args.registrationNumber },\n    domain = this.args.$appDomain;\n  //check if an invoice exists for this registrationNumber\n  this.entityRepo.get(\n    domain.config.invoiceClass,\n    { \"extra.registrationNumber\": this.args.registrationNumber, feeId: this.args.applicationType },\n    { one: true },\n    (er, invoice) => {\ntry{\n{\n      if (er) return callback(er);\n\n      if (invoice) {\n        //invoice exists so skip to last step.\n        return this.args.$process.steps[this.args.$process.steps.length - 1].describe((er, description) => {\ntry{\n{\n          this.args.$nextStep = description;\n          if (invoice.successful) this.libs.findElementByName(this.args.$nextStep.form.elements, \"pay\").args.disabled = true;\n          let messageContext = Object.assign({}, { form: this.args._form, RRR: invoice.invoiceNumber }),\n            info = this.libs.APPLICATION_TYPE_TO_INFO[fee.uid] || this.libs.APPLICATION_TYPE_TO_INFO.default,\n            exp = /\\{(\\w+)\\}/gi,\n            _info = \"\" + info,\n            match = exp.exec(info);\n          while (match !== null) {\n            _info = _info.replace(match[0], messageContext[match[1]]);\n            // matched text: match[0]\n            // match start: match.index\n            // capturing group n: match[n]\n            match = exp.exec(info);\n          }\n          let url = `${domain.config[\"remita.payUrl\"]}?RRR=${invoice.invoiceNumber}&domain=${domain._id}`;\n          callback(null, {\n            info:\n              _info ||\n              `Successfully generated Invoice Number ${invoice.invoiceNumber} , please use this invoice number to make payment at any bank branch nationwide`,\n            navigation: {\n              pay: `WEBVIEW|url=${encodeURIComponent(url)}|title=Fees`,\n              fill: `${this.args._form}|invoiceNumber=${invoice.invoiceNumber}`,\n              receipt: `RECEIPT_VIEW|invoiceNumber=${invoice.invoiceNumber}`\n            }\n          });\n        }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n      }\n\n      if (this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.feePurpose.uid]) {\n        this.debug(\"has validation rules...\");\n        return this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.feePurpose.uid].call(this, this.args, (er, extraInfo) => {\ntry{\n{\n          if (er) return callback(er);\n          this.debug(\"all validation rules for pass\");\n          return callback(null, Object.assign(result, extraInfo || {}));\n        }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n      }\n\n      return callback(null, result);\n    }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n  );\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n"},{"_id":{"$objectID":"5a6c14a15b87762c201de8d8"},"code":"this.entityRepo.get(\"Fee\", { _id: this.args._fee }, { full: true, one: true }, (er, fee) => {\n  if (er) return callback(er);\n  //generate RRR\n  //if successful pass the rrr/microcopy to the next view.\n  if (!fee) {\n    return callback(new Error(\"Could not find fee\"));\n  }\n  this.debug(fee);\n  let _continue = er => {\n    this.libs.getDomain.call(this, (er, domain) => {\n      if (er) return callback(er);\n\n      this.debug(domain);\n      let config = this.libs.flattenByNamespace(\"remita\", domain.config),\n        context = {\n          splitFee: !!fee.feePurpose.hasCommission,\n          merchant: Object.assign(config, {\n            feeAccount: this.libs.flattenByNamespace(\"feeAccount\", domain.config)\n          }),\n          data: {\n            feeId: fee._id,\n            extra: this.args,\n            payerName: `${this.args.firstName} ${this.args.middleName} ${this.args.surname}`,\n            payerEmail: this.args.email\n          },\n          amount: fee.fee\n        };\n      this.debug(config);\n      this.debug(\"x=========x\");\n      this.debug(context);\n      return this.libs.generateRemitaRRR.call(this, context, (er, { RRR } = {}) => {\n        if (er || !RRR)\n          return this.debug(\"error occurred while generating RRR\"), callback(er || new Error(\"Remita did not return RRR, please retry\"));\n\n        let messageContext = Object.assign({}, { form: this.args._form, RRR }),\n          info = this.libs.APPLICATION_TYPE_TO_INFO[fee.uid] || this.libs.APPLICATION_TYPE_TO_INFO.default,\n          exp = /\\{(\\w+)\\}/gi,\n          _info = \"\" + info,\n          match = exp.exec(info);\n        while (match !== null) {\n          _info = _info.replace(match[0], messageContext[match[1]]);\n          // matched text: match[0]\n          // match start: match.index\n          // capturing group n: match[n]\n          match = exp.exec(info);\n        }\n\n        this.entityRepo.getProcess(\n          {\n            uid: \"WEBVIEW\"\n          },\n          {\n            one: true\n          },\n          (er, process) => {\n            let warning = null;\n            if (er || !process)\n              this.debug(\"could not locate webview process\"), (warning = (process && \"Unknown Error\") || \"Couldn't locate pay now view\");\n\n            // this.libs.findElementByName(this.args.$nextStep.form.elements, \"receipt\").args.disabled = true;\n            let url = `${config.payUrl}?RRR=${RRR}&domain=${domain._id}`;\n            callback(null, {\n              message: warning || \"Successful\",\n              info:\n                _info ||\n                `Successfully generated Invoice Number ${RRR} , please use this invoice number to make payment at any bank branch nationwide`,\n              navigation: {\n                pay:\n                  (!warning && `${process && process._id}|url=${encodeURIComponent(url)}|title=Fees`) || \"cannot pay now , retry later....\",\n                fill: `${this.args._form}|invoiceNumber=${RRR}`\n              }\n            });\n          }\n        );\n      });\n    });\n  };\n  if (this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.uid]) {\n    return this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.uid].call(this, this.args.registrationNumber, fee, _continue);\n  }\n\n  _continue();\n});\n","title":"Generate RRR for Application Forms","requiresIdentity":true,"__v":0,"standalone":false,"_references":["getDomain","flattenByNamespace","generateRemitaRRR","APPLICATION_TYPE_TO_INFO","APPLICATION_INVOICE_GENERATION_VALIDATION"],"_code":"this.entityRepo.get(\"Fee\", { _id: this.args._fee }, { full: true, one: true }, (er, fee) => {\ntry{\n{\n  if (er) return callback(er);\n  //generate RRR\n  //if successful pass the rrr/microcopy to the next view.\n  if (!fee) {\n    return callback(new Error(\"Could not find fee\"));\n  }\n  this.debug(fee);\n  let _continue = er => {\ntry{\n{\n    this.libs.getDomain.call(this, (er, domain) => {\ntry{\n{\n      if (er) return callback(er);\n\n      this.debug(domain);\n      let config = this.libs.flattenByNamespace(\"remita\", domain.config),\n        context = {\n          splitFee: !!fee.feePurpose.hasCommission,\n          merchant: Object.assign(config, {\n            feeAccount: this.libs.flattenByNamespace(\"feeAccount\", domain.config)\n          }),\n          data: {\n            feeId: fee._id,\n            extra: this.args,\n            payerName: `${this.args.firstName} ${this.args.middleName} ${this.args.surname}`,\n            payerEmail: this.args.email\n          },\n          amount: fee.fee\n        };\n      this.debug(config);\n      this.debug(\"x=========x\");\n      this.debug(context);\n      return this.libs.generateRemitaRRR.call(this, context, (er, { RRR } = {}) => {\ntry{\n{\n        if (er || !RRR)\n          return this.debug(\"error occurred while generating RRR\"), callback(er || new Error(\"Remita did not return RRR, please retry\"));\n\n        let messageContext = Object.assign({}, { form: this.args._form, RRR }),\n          info = this.libs.APPLICATION_TYPE_TO_INFO[fee.uid] || this.libs.APPLICATION_TYPE_TO_INFO.default,\n          exp = /\\{(\\w+)\\}/gi,\n          _info = \"\" + info,\n          match = exp.exec(info);\n        while (match !== null) {\n          _info = _info.replace(match[0], messageContext[match[1]]);\n          // matched text: match[0]\n          // match start: match.index\n          // capturing group n: match[n]\n          match = exp.exec(info);\n        }\n\n        this.entityRepo.getProcess(\n          {\n            uid: \"WEBVIEW\"\n          },\n          {\n            one: true\n          },\n          (er, process) => {\ntry{\n{\n            let warning = null;\n            if (er || !process)\n              this.debug(\"could not locate webview process\"), (warning = (process && \"Unknown Error\") || \"Couldn't locate pay now view\");\n\n            // this.libs.findElementByName(this.args.$nextStep.form.elements, \"receipt\").args.disabled = true;\n            let url = `${config.payUrl}?RRR=${RRR}&domain=${domain._id}`;\n            callback(null, {\n              message: warning || \"Successful\",\n              info:\n                _info ||\n                `Successfully generated Invoice Number ${RRR} , please use this invoice number to make payment at any bank branch nationwide`,\n              navigation: {\n                pay:\n                  (!warning && `${process && process._id}|url=${encodeURIComponent(url)}|title=Fees`) || \"cannot pay now , retry later....\",\n                fill: `${this.args._form}|invoiceNumber=${RRR}`\n              }\n            });\n          }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n        );\n      }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n    }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n  }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}};\n  if (this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.uid]) {\n    return this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.uid].call(this, this.args.registrationNumber, fee, _continue);\n  }\n\n  _continue();\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n"},{"_id":{"$objectID":"5a7082296d13a0126442a20d"},"code":"if (this.args.applicationType) {\n  this.entityRepo.aggregate(\n    \"Fee\",\n    [\n      { $match: { domain: { $objectID: this.args.$requestContext.dynamodomain } } },\n      {\n        $lookup: {\n          from: this.entityRepo.getCollectionName(\"FeePurpose\"),\n          localField: \"feePurpose\",\n          foreignField: \"_id\",\n          as: \"_fee\"\n        }\n      },\n      {\n        $unwind: \"$_fee\"\n      },\n      {\n        $match: {\n          \"_fee.uid\": this.args.applicationType,\n          \"_fee.group\": \"APPLICATION\"\n        }\n      },\n      {\n        $project: {\n          applicationType: \"$_id\",\n          _id: 0\n        }\n      }\n    ],\n    (er, fee) => {\n      if (er) return callback(er);\n      if (!fee.length) return callback(new Error(\"Cannot find any application fee matching that type\"));\n      this.libs.findElementByName(this.args.$description.steps[0].form.elements, \"applicationType\").args.disabled = true;\n      return callback(null, Object.assign({},this.args,fee[0]));\n    }\n  );\n} else setImmediate(callback);\n","title":"Prepare Application Type","requiresIdentity":true,"__v":0,"standalone":true,"_references":["findElementByName"],"_code":"if (this.args.applicationType) {\n  this.entityRepo.aggregate(\n    \"Fee\",\n    [\n      { $match: { domain: { $objectID: this.args.$requestContext.dynamodomain } } },\n      {\n        $lookup: {\n          from: this.entityRepo.getCollectionName(\"FeePurpose\"),\n          localField: \"feePurpose\",\n          foreignField: \"_id\",\n          as: \"_fee\"\n        }\n      },\n      {\n        $unwind: \"$_fee\"\n      },\n      {\n        $match: {\n          \"_fee.uid\": this.args.applicationType,\n          \"_fee.group\": \"APPLICATION\"\n        }\n      },\n      {\n        $project: {\n          applicationType: \"$_id\",\n          _id: 0\n        }\n      }\n    ],\n    (er, fee) => {\ntry{\n{\n      if (er) return callback(er);\n      if (!fee.length) return callback(new Error(\"Cannot find any application fee matching that type\"));\n      this.libs.findElementByName(this.args.$description.steps[0].form.elements, \"applicationType\").args.disabled = true;\n      return callback(null, Object.assign({},this.args,fee[0]));\n    }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n  );\n} else setImmediate(callback);\n"},{"_id":{"$objectID":"5a70cb6ea5538a22fc20eac6"},"code":"//NOTE: No user should ever be issued a claim to call this processor\nthis.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n  Object.defineProperties(this.args, {\n    $appDomain: {\n      enumerable: false,\n      get: function() {\n        return domain;\n      }\n    }\n  });\n  callback(null, this.args);\n});\n","title":"Get Domain Config [NEVER ISSUE THIS CLAIM TO ANY USER]","requiresIdentity":true,"uid":"GET_DOMAIN_CONFIG","__v":0,"standalone":false,"_references":["getDomain"],"_code":"//NOTE: No user should ever be issued a claim to call this processor\nthis.libs.getDomain.call(this, (er, domain) => {\ntry{\n{\n  if (er) return callback(er);\n  Object.defineProperties(this.args, {\n    $appDomain: {\n      enumerable: false,\n      get: function() {\n        return domain;\n      }\n    }\n  });\n  callback(null, this.args);\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n"}]
