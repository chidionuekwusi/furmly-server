[{"_id":{"$objectID":"59c268574677422190abd672"},"code":"const required = [\r\n  {\r\n    validatorType: \"REQUIRED\"\r\n  }\r\n];\r\n//debugger;\r\nthis.libs.getProcessors(\r\n  this.entityRepo,\r\n  [\"GET_SESSIONS\", \"GET_YearOfStudy_5\", \"GET_MODEOFSTUDY\", \"GET_SCHOOLPROGRAMME\", \"GET_PaymentType_8\"],\r\n  (er, processors) => {\r\n    if (er) return callback(er);\r\n\r\n    this.entityRepo.get(\r\n      \"StudentType\",\r\n      {\r\n        domain: this.args.$user.domain\r\n      },\r\n      (er, studentTypes) => {\r\n        if (er) return callback(er);\r\n\r\n        let elements = [],\r\n          e = this.libs.createElement.bind(this),\r\n          c = this.constants;\r\n\r\n        this.entityRepo.get(\r\n          \"FeePurpose\",\r\n          {\r\n            domain: this.args.$user.domain\r\n          },\r\n          (er, feePurposes) => {\r\n            if (er) return callback(er);\r\n            const getSession = () =>\r\n              e(\r\n                \"session\",\r\n                \"Session\",\r\n                \"\",\r\n                c.ELEMENTTYPE.SELECT,\r\n                {\r\n                  type: \"PROCESSOR\",\r\n                  config: {\r\n                    value: processors.GET_SESSIONS\r\n                  }\r\n                },\r\n                required\r\n              );\r\n            let items = feePurposes.map(f =>{\r\n              let _elements = [];\r\n              if (/school\\s*fees/gi.test(f.name) || /acceptance/gi.test(f.name)) {\r\n                _elements.push(\r\n                  e(\r\n                    \"studentType\",\r\n                    \"Student Type\",\r\n                    \"\",\r\n                    c.ELEMENTTYPE.SELECTSET,\r\n                    {\r\n                      path: \"config\",\r\n                      items: studentTypes.map(x => ({\r\n                        displayLabel: x.name,\r\n                        id: x._id.toString(),\r\n                        elements: getFor(x, processors)\r\n                      }))\r\n                    },\r\n                    required\r\n                  )\r\n                );\r\n\r\n                _elements.push(getSession());\r\n              }\r\n\r\n              return {\r\n                id: f._id,\r\n                displayLabel: f.name,\r\n                elements: _elements\r\n              };\r\n            });\r\n\r\n            let feePurpose = e(\"feePurpose\", \"Fee Purpose\", \"\", c.ELEMENTTYPE.SELECTSET, {\r\n              path: \"criteria\",\r\n              items\r\n            });\r\n            elements.push(feePurpose);\r\n\r\n            callback(null, elements);\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n);\r\n\r\nconst getFor = (x, processors) => {\r\n  let paymentType = this.libs.createElement(\r\n      \"paymentType\",\r\n      \"Payment Type\",\r\n      \"\",\r\n      this.constants.ELEMENTTYPE.SELECT,\r\n      {\r\n        type: \"PROCESSOR\",\r\n        config: {\r\n          value: processors.GET_PaymentType_8,\r\n          customArgs: JSON.stringify({\r\n            query: {\r\n              group: x.group\r\n            }\r\n          })\r\n        }\r\n      },\r\n      required\r\n    ),\r\n    yearOfStudy = this.libs.createElement(\r\n      \"yearOfStudy\",\r\n      \"Year of Study\",\r\n      \"\",\r\n      this.constants.ELEMENTTYPE.SELECT,\r\n      {\r\n        type: \"PROCESSOR\",\r\n        config: {\r\n          customArgs: JSON.stringify({ query: { group: \"UNDERGRADUATE\" } }),\r\n          value: processors.GET_YearOfStudy_5\r\n        }\r\n      },\r\n      required\r\n    );\r\n  if (/pg/i.test(x.group)) {\r\n    yearOfStudy.args.config.customArgs = JSON.stringify({ query: { group: \"PG\" } });\r\n    return [\r\n      yearOfStudy,\r\n      paymentType,\r\n      this.libs.createElement(\r\n        \"programmeOption\",\r\n        \"Programme Options\",\r\n        \"\",\r\n        this.constants.ELEMENTTYPE.SELECT,\r\n        {\r\n          type: \"PROCESSOR\",\r\n          config: {\r\n            value: processors.GET_SCHOOLPROGRAMME,\r\n            customArgs: JSON.stringify({\r\n              query: {\r\n                group: x.group\r\n              }\r\n            })\r\n          }\r\n        },\r\n        required\r\n      ),\r\n      this.libs.createElement(\r\n        \"forStaff\",\r\n        \"Staff\",\r\n        \"\",\r\n        this.constants.ELEMENTTYPE.INPUT,\r\n        {\r\n          type: this.constants.INPUTTYPE.CHECKBOX\r\n        },\r\n        required\r\n      ),\r\n      this.libs.createElement(\r\n        \"modeOfStudy\",\r\n        \"Mode of Study\",\r\n        \"\",\r\n        this.constants.ELEMENTTYPE.SELECT,\r\n        {\r\n          type: \"PROCESSOR\",\r\n          config: {\r\n            value: processors.GET_MODEOFSTUDY\r\n          }\r\n        },\r\n        required\r\n      )\r\n    ];\r\n  }\r\n  if (/undergraduate/i.test(x.group)) {\r\n    return [\r\n      paymentType,\r\n      yearOfStudy,\r\n      this.libs.createElement(\"yearOfEntry\", \"Year of Entry\", \"\", this.constants.ELEMENTTYPE.SELECT, {\r\n        type: \"PROCESSOR\",\r\n        config: {\r\n          value: processors.GET_YearOfStudy_5\r\n        }\r\n      })\r\n    ];\r\n  }\r\n\r\n  return [];\r\n};\r\n","title":"Get Fee Assignment UI","requiresIdentity":true,"__v":0,"standalone":true},{"_id":{"$objectID":"59c2b6d74677422190abd67b"},"code":"this.debug(this.args);\r\nif (!this.args.query || !this.args.query.feePurpose)\r\n  callback(null, { message: \"You must select a fee purpose to continue\", items: [], total: 0 });\r\nelse\r\n  this.entityRepo.get(\r\n    \"FeePurpose\",\r\n    {\r\n      _id: this.args.query && this.args.query.feePurpose\r\n    },\r\n    {\r\n      one: true\r\n    },\r\n    (er, feePurpose) => {\r\n      if (er) return callback(er);\r\n      if (!feePurpose) return callback(null, { items: [], total: 0 });\r\n      let query = this.args.query || {},\r\n        departmentQuery = {};\r\n\r\n      if (feePurpose.everyone) {\r\n        let _query = Object.assign({}, query, this.libs.convertObjectToDotNotation({ criteria: query.criteria }));\r\n        delete _query.criteria;\r\n        return this.entityRepo.get(\"Fee\", _query, { one: true }, (er, config) => {\r\n          if (er) return callback(er);\r\n          this.debug(config);\r\n          callback(null, {\r\n            items: [\r\n              {\r\n                _id: \"$everyone\",\r\n                configId: config && config._id,\r\n                fee: config && config.fee,\r\n                feePurpose: feePurpose._id,\r\n                feeBreakdown: config.feeBreakdown,\r\n                name: \"For Everyone\",\r\n                criteria: Object.assign({}, this.args.query.criteria, (config && config.criteria) || {})\r\n              }\r\n            ],\r\n            total: 1\r\n          });\r\n        });\r\n      }\r\n      if (/school/gi.test(feePurpose.name) || /acceptance/gi.test(feePurpose.name)) {\r\n        if (this.args.$user.domain) {\r\n          query.domain = this.args.$user.domain;\r\n          departmentQuery.domain = this.args.$user.domain;\r\n          departmentQuery[`studentTypeConfig.${query.criteria.studentType}`] = true;\r\n        }\r\n      }\r\n      return this.entityRepo.get(\"Department\", departmentQuery, (er, departments) => {\r\n        if (er) return callback(er);\r\n        this.debug(departments);\r\n\r\n        let _query = Object.assign({}, query, this.libs.convertObjectToDotNotation({ criteria: query.criteria }));\r\n        delete _query.criteria;\r\n        this.debug(`=====query=====\\n${JSON.stringify(_query, null, \" \")}\\n=========\\n`);\r\n        this.entityRepo.get(\"Fee\", _query, (er, config) => {\r\n          if (er) return callback(er);\r\n          this.debug(config);\r\n\r\n          callback(null, {\r\n            items: departments.map(x => {\r\n              let cf = config.filter(f => f.criteria && f.criteria.department && f.criteria.department === x._id.toString());\r\n              this.debug(cf);\r\n              return Object.assign({}, query, {\r\n                _id: x._id,\r\n                configId: (cf.length && cf[0]._id) || null,\r\n                fee: (cf.length && cf[0].fee) || null,\r\n                feePurpose: feePurpose._id,\r\n                feeBreakdown: cf.length && cf[0].feeBreakdown,\r\n                name: x.name,\r\n                criteria: Object.assign(\r\n                  {},\r\n                  {\r\n                    department: x._id\r\n                  },\r\n                  this.args.query.criteria,\r\n                  (cf.length && cf[0].criteria) || {}\r\n                )\r\n              });\r\n            }),\r\n            total: departments.length\r\n          });\r\n        });\r\n      });\r\n    }\r\n  );\r\n","title":"Get Fees","requiresIdentity":true,"__v":0,"standalone":true}]
