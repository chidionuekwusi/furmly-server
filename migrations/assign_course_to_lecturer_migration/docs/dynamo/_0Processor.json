[{"_id":{"$objectID":"5ae6f5aeed96bc603898dc96"},"code":"this.args.entity.domain = this.args.$user.domain;\nthis.debug(\"creating new assignment\");\nthis.debug(this.args);\nlet query = {\n  course: this.args.entity.courseId,\n  department: this.args.entity.department,\n  lecturer: this.args.entity.lecturer,\n  session: this.args.entity.session,\n  domain: this.args.$user.domain,\n  semester: this.args.entity.semester,\n  studentType: this.args.entity.studentType\n};\nthis.debug(query);\n\nthis.entityRepo.get(\"CourseLecturerAssignment\", query, (error, exists) => {\n  if (error) return callback(error);\n  if (exists.length)\n    return callback(new Error(\"An entry with that configuration already exists please edit the course to lecturer assignment\"));\n\n  this.entityRepo.create(\"CourseLecturerAssignment\", query, callback);\n});\n","title":"Assign course to lecturer","requiresIdentity":true,"standalone":true,"__v":0},{"_id":{"$objectID":"5ae7165ded96bc603898dc9b"},"code":"const run = () => {\n  this.args.depth = true;\n  this.$checkDomain = true;\n  const objectId = prop => {\n    if (this.args.query && this.args.query[prop]) this.args.query[prop] = { isObjectID: true, value: this.args.query[prop] };\n  };\n  //change query to handle objectId\n\n  if (!this.args.query || !this.args.query.studentType) return callback(null, { items: [], total: 0 });\n  objectId(\"studentType\");\n  objectId(\"department\");\n  objectId(\"semester\");\n  objectId(\"session\");\n  this.debug(this.args);\n  if (this.args.query && this.args.query[\"campus\"]) delete this.args.query[\"campus\"];\n\n  let extra = {\n    department: this.args.query[\"department\"].value,\n    semester: this.args.query[\"semester\"].value,\n    session: this.args.query[\"session\"].value,\n    studentType: this.args.query[\"studentType\"].value\n  };\n\n  this.libs.getEntity.call(\n    this,\n    \"CourseAssignment\",\n    \"\",\n    x => {\n      return Object.assign(extra, {\n        _id: x._id,\n        courseType: x.courseType.name,\n        courseName: x.course.name,\n        courseUnit: x.courseUnit,\n        courseCode: x.course.code,\n        courseId: x.course._id\n      });\n    },\n    (error, result) => {\n      if (error || !result) callback(new Error(\"could not find course assignment for the criteria\"));\n\n      if (!result.items) callback(null, result);\n      result.items.forEach((item, index) => {\n        this.entityRepo.get(\"CourseLecturerAssignment\", { course: item.courseId }, { one: true }, (error, assignment) => {\n          if (assignment) {\n            result.items[index] = Object.assign({ lecturer: assignment.lecturer }, item);\n          }\n          if (index == result.items.length - 1) {\n            callback(null, result);\n          }\n        });\n      });\n    }\n  );\n};\n\nrun();\n","title":"Get Course Lecturer assignment","requiresIdentity":true,"standalone":true,"__v":0},{"_id":{"$objectID":"5ae72b21ed96bc603898dc9d"},"code":"this.entityRepo.infrastructure().userManager.getRoles({ name: this.args.$domain.config['lecturerRole'] }, (error, role) => {\n  if (error || (role && role.length <= 0)) callback(new Error(\"There is a config error. Role could not be found\"));\n\n  if (role instanceof Array) role = role[0];\n  \n  this.entityRepo.infrastructure().userManager.getUsersByParam({ roles: role._id}, (error, users) => {\n    if (error || (users && users.length <= 0)) callback(new Error(\"Lecturers have not been setup\"));\n\n    users = users.map(user => user._id);\n    this.entityRepo.get(\"Staff\", { userId: { $in: users } }, (error, staffs) => {\n      if (error || (staffs && staffs.length <= 0)) {\n        callback(new Error(\"Could not find the staff profiles. Ensure that the lecturers have successfully been registered as staffs\"));\n      }\n\n      staffs = staffs.map(staff => {\n        return {\n          _id: staff._id,\n          displayLabel: staff.fullName\n        };\n      });\n      return callback(null, staffs);\n    });\n  });\n});\n","title":"Get Lecturers","uid":"GET_LECTURERS","requiresIdentity":true,"standalone":true,"__v":0}]
