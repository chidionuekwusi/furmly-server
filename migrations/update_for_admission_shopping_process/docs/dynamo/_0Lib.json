[{"_id":{"$objectID":"5a7302ee14d02c3ab879c634"},"code":"exports = {\n  POST_UTME_SCREENING: function(args, callback) {\n    //check all the jamb blah blah\n    this.debug(\"checking jamb info\");\n    this.debug(\"app domain:\" + this.args.$appDomain._id);\n    const validators = {\n      minScore: function(info, config) {\n        if (!info.totalScore || info.totalScore < config.min)\n          return `You scored below the minimum required score stipulated by the University (${config.min})`;\n      },\n      regex: function(info, config) {\n        return (info[config.property] && new RegExp(config.regex).test(info[config.property])) || `Your ${config.property} is invalid`;\n      }\n    };\n    this.entityRepo.get(\n      \"JambList\",\n      { regNumb: args.registrationNumber, domain: this.args.$appDomain._id },\n      { one: true },\n      (er, jambInfo) => {\n        if (er) return callback(er);\n        if (!jambInfo) return callback(new Error(\"Sorry we cannot find your information from Jamb\"));\n\n        this.debug(\"successfully retrieved jamb info\");\n        this.debug(jambInfo);\n        this.debug(this.args.$appDomain.config);\n        if (!this.args.$appDomain.config.jambValidation) return callback();\n        let jambValidation = JSON.parse(this.args.$appDomain.config.jambValidation);\n        this.async.parallel(\n          jambValidation.map(v => {\n            return fn => {\n              let validator = validators[v.name];\n              if (!validator) return fn(new Error(\"Unknown Validator\"));\n              let result = validator(jambInfo, v);\n              if (typeof result === \"string\") return fn(new Error(result));\n              fn();\n            };\n          }),\n          callback\n        );\n      }\n    );\n  },\n   INTERNAL_SHOPPING : function(args,callback){\n      let c = this.constants;\n      this.args.$nextStep.form.elements.push(this.libs.createElement(\"jambRegNumber\",\"Jamb Registration Number\",\"\",\n      c.ELEMENTTYPE.INPUT,{ type : c.INPUTTYPE.TEXT},[\n          this.libs.createRequiredValidator(),\n          this.libs.createRegexValidator(\"^\\\\d{6,8}[a-zA-Z]{2,2}$\",\"You must enter a valid jamb registration number\")]));\n      callback(null);\n  },\n  DIRECT_ENTRY: function(...args) {\n    exports.POST_UTME_SCREENING.apply(this, args);\n  },\n  ADMISSION_SHOPPING: function(...args) {\n    exports.POST_UTME_SCREENING.apply(this, args);\n  }\n};\n","uid":"APPLICATION_INVOICE_GENERATION_VALIDATION","__v":0,"_references":["createElement","createRequiredValidator","createRegexValidator"],"_code":"exports = {\n  POST_UTME_SCREENING: function(args, callback) {\ntry{\n{\n    //check all the jamb blah blah\n    this.debug(\"checking jamb info\");\n    this.debug(\"app domain:\" + this.args.$appDomain._id);\n    const validators = {\n      minScore: function(info, config) {\n        if (!info.totalScore || info.totalScore < config.min)\n          return `You scored below the minimum required score stipulated by the University (${config.min})`;\n      },\n      regex: function(info, config) {\n        return (info[config.property] && new RegExp(config.regex).test(info[config.property])) || `Your ${config.property} is invalid`;\n      }\n    };\n    this.entityRepo.get(\n      \"JambList\",\n      { regNumb: args.registrationNumber, domain: this.args.$appDomain._id },\n      { one: true },\n      (er, jambInfo) => {\ntry{\n{\n        if (er) return callback(er);\n        if (!jambInfo) return callback(new Error(\"Sorry we cannot find your information from Jamb\"));\n\n        this.debug(\"successfully retrieved jamb info\");\n        this.debug(jambInfo);\n        this.debug(this.args.$appDomain.config);\n        if (!this.args.$appDomain.config.jambValidation) return callback();\n        let jambValidation = JSON.parse(this.args.$appDomain.config.jambValidation);\n        this.async.parallel(\n          jambValidation.map(v => {\n            return fn => {\ntry{\n{\n              let validator = validators[v.name];\n              if (!validator) return fn(new Error(\"Unknown Validator\"));\n              let result = validator(jambInfo, v);\n              if (typeof result === \"string\") return fn(new Error(result));\n              fn();\n            }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}};\n          }),\n          callback\n        );\n      }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n    );\n  }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}},\n   INTERNAL_SHOPPING : function(args,callback){\ntry{\n{\n      let c = this.constants;\n      this.args.$nextStep.form.elements.push(this.libs.createElement(\"jambRegNumber\",\"Jamb Registration Number\",\"\",\n      c.ELEMENTTYPE.INPUT,{ type : c.INPUTTYPE.TEXT},[\n          this.libs.createRequiredValidator(),\n          this.libs.createRegexValidator(\"^\\\\d{6,8}[a-zA-Z]{2,2}$\",\"You must enter a valid jamb registration number\")]));\n      callback(null);\n  }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}},\n  DIRECT_ENTRY: function(...args) {\n    exports.POST_UTME_SCREENING.apply(this, args);\n  },\n  ADMISSION_SHOPPING: function(...args) {\n    exports.POST_UTME_SCREENING.apply(this, args);\n  }\n};\n"}]
