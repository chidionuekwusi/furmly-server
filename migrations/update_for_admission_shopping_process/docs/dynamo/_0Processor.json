[{"_id":{"$objectID":"5a6a2d6174f6f43d249e3f49"},"code":"const logic = {\n  POST_UTME_SCREENING: x => {\n    return fn => {\n      fn(null, {\n        id: x._id,\n        displayLabel: x.name,\n        elements: [\n          this.libs.createElement(\"registrationNumber\", \"JAMB Registration Number\", \"\", this.constants.ELEMENTTYPE.INPUT, {\n            type: this.constants.INPUTTYPE.TEXT\n          },[this.libs.createRequiredValidator(),this.libs.createRegexValidator(this.libs.REGEX.jambNumber)])\n        ]\n      });\n    };\n  },\n  STAFF_REQUEST: x => {\n    return logic.POST_UTME_SCREENING(x);\n  },\n  DIRECT_ENTRY: x => {\n    return logic.POST_UTME_SCREENING(x);\n  },\n  CHANGE_OF_DEGREE: x => {\n    return fn => {\n      fn(null, {\n        id: x._id,\n        displayLabel: x.name,\n        elements: [\n          this.libs.createElement(\n            \"registrationNumber\",\n            \"Matriculation Number\",\n            \"\",\n            this.constants.ELEMENTTYPE.INPUT,\n            {\n              type: this.constants.INPUTTYPE.TEXT\n            },\n            [\n              this.libs.createRegexValidator(\n                this.libs.REGEX.jambNumber + \"|\\\\d{5,6}\",\n                \"Enter a valid matriculation number\"\n              ),\n              this.libs.createRequiredValidator()\n            ]\n          )\n        ]\n      });\n    };\n  },\n  ADMISSION_SHOPPING: x => {\n    return logic.POST_UTME_SCREENING(x);  \n  },\n  SHOPPING:x=>{\n    return logic.POST_UTME_SCREENING(x);  \n  },\n  default: x => {\n    return fn => {\n      fn(null, {\n        id: x._id,\n        displayLabel: x.name,\n        elements: [\n          this.libs.createElement(\n            \"registrationNumber\",\n            \"Telephone Number\",\n            \"\",\n            this.constants.ELEMENTTYPE.INPUT,\n            {\n              type: this.constants.INPUTTYPE.TEXT\n            },\n            [this.libs.createRequiredValidator(),this.libs.createRegexValidator(\"^[0-9]{11,12}$\", \"You must enter a 11-12 digit phone number\")]\n          )\n        ]\n      });\n    };\n  }\n};\n\nthis.entityRepo.get(\"Session\", { domain: this.args.$requestContext.dynamodomain, isCurrent: true }, { one: true }, (er, session) => {\n  if (er) return callback(er);\n\n  this.entityRepo.aggregate(\n    \"Fee\",\n    [\n      {\n        $match: {\n          domain: { $objectID: this.args.$requestContext.dynamodomain },\n          \"criteria.session\": { $in: [this.args.session, undefined] }\n        }\n      },\n      {\n        $lookup: {\n          from: this.entityRepo.getCollectionName(\"FeePurpose\"),\n          localField: \"feePurpose\",\n          foreignField: \"_id\",\n          as: \"_feePurpose\"\n        }\n      },\n      {\n        $unwind: \"$_feePurpose\"\n      },\n      {\n        $match: { \"_feePurpose.group\": \"APPLICATION\" }\n      },\n      {\n        $project: {\n          _id: 1,\n          name: { $concat: [\"$_feePurpose.name\", \" - \", { $substr: [\"$fee\", 0, -1] }] },\n          uid: \"$_feePurpose.uid\",\n          _feePurpose: 1\n        }\n      }\n    ],\n    (er, applicationTypes) => {\n      if (er) return callback(er);\n\n      this.debug(applicationTypes);\n\n      let tasks = applicationTypes.map(x => (logic[x.uid] && logic[x.uid](x)) || logic.default(x));\n\n      this.async.parallel(tasks, (er, elements) => {\n        return callback(er, elements);\n      });\n    }\n  );\n});\n","title":"Application Type UI for Invoice Generation","requiresIdentity":false,"__v":0,"standalone":true,"_references":["createElement","createRequiredValidator","createRegexValidator","REGEX"],"_code":"const logic = {\n  POST_UTME_SCREENING: x => {\n    return fn => {\ntry{\n{\n      fn(null, {\n        id: x._id,\n        displayLabel: x.name,\n        elements: [\n          this.libs.createElement(\"registrationNumber\", \"JAMB Registration Number\", \"\", this.constants.ELEMENTTYPE.INPUT, {\n            type: this.constants.INPUTTYPE.TEXT\n          },[this.libs.createRequiredValidator(),this.libs.createRegexValidator(this.libs.REGEX.jambNumber)])\n        ]\n      });\n    }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}};\n  },\n  STAFF_REQUEST: x => {\n    return logic.POST_UTME_SCREENING(x);\n  },\n  DIRECT_ENTRY: x => {\n    return logic.POST_UTME_SCREENING(x);\n  },\n  CHANGE_OF_DEGREE: x => {\n    return fn => {\ntry{\n{\n      fn(null, {\n        id: x._id,\n        displayLabel: x.name,\n        elements: [\n          this.libs.createElement(\n            \"registrationNumber\",\n            \"Matriculation Number\",\n            \"\",\n            this.constants.ELEMENTTYPE.INPUT,\n            {\n              type: this.constants.INPUTTYPE.TEXT\n            },\n            [\n              this.libs.createRegexValidator(\n                this.libs.REGEX.jambNumber + \"|\\\\d{5,6}\",\n                \"Enter a valid matriculation number\"\n              ),\n              this.libs.createRequiredValidator()\n            ]\n          )\n        ]\n      });\n    }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}};\n  },\n  ADMISSION_SHOPPING: x => {\n    return logic.POST_UTME_SCREENING(x);  \n  },\n  SHOPPING:x=>{\n    return logic.POST_UTME_SCREENING(x);  \n  },\n  default: x => {\n    return fn => {\ntry{\n{\n      fn(null, {\n        id: x._id,\n        displayLabel: x.name,\n        elements: [\n          this.libs.createElement(\n            \"registrationNumber\",\n            \"Telephone Number\",\n            \"\",\n            this.constants.ELEMENTTYPE.INPUT,\n            {\n              type: this.constants.INPUTTYPE.TEXT\n            },\n            [this.libs.createRequiredValidator(),this.libs.createRegexValidator(\"^[0-9]{11,12}$\", \"You must enter a 11-12 digit phone number\")]\n          )\n        ]\n      });\n    }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}};\n  }\n};\n\nthis.entityRepo.get(\"Session\", { domain: this.args.$requestContext.dynamodomain, isCurrent: true }, { one: true }, (er, session) => {\ntry{\n{\n  if (er) return callback(er);\n\n  this.entityRepo.aggregate(\n    \"Fee\",\n    [\n      {\n        $match: {\n          domain: { $objectID: this.args.$requestContext.dynamodomain },\n          \"criteria.session\": { $in: [this.args.session, undefined] }\n        }\n      },\n      {\n        $lookup: {\n          from: this.entityRepo.getCollectionName(\"FeePurpose\"),\n          localField: \"feePurpose\",\n          foreignField: \"_id\",\n          as: \"_feePurpose\"\n        }\n      },\n      {\n        $unwind: \"$_feePurpose\"\n      },\n      {\n        $match: { \"_feePurpose.group\": \"APPLICATION\" }\n      },\n      {\n        $project: {\n          _id: 1,\n          name: { $concat: [\"$_feePurpose.name\", \" - \", { $substr: [\"$fee\", 0, -1] }] },\n          uid: \"$_feePurpose.uid\",\n          _feePurpose: 1\n        }\n      }\n    ],\n    (er, applicationTypes) => {\ntry{\n{\n      if (er) return callback(er);\n\n      this.debug(applicationTypes);\n\n      let tasks = applicationTypes.map(x => (logic[x.uid] && logic[x.uid](x)) || logic.default(x));\n\n      this.async.parallel(tasks, (er, elements) => {\ntry{\n{\n        return callback(er, elements);\n      }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n    }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n  );\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n"},{"_id":{"$objectID":"5a9d091095d1293b84be9180"},"code":"this.libs.confirmInvoiceIsFor.call(this, this.args.invoiceNumber, \"ADMISSION_SHOPPING\", er => {\n  if (er) return callback(er);\n\n  return this.libs.skipApplicationIfAllowed.call(\n    this,\n    this.args.$appDomain.config.admissionShopping,\n    \"SUBMIT_ADMISSION_SHOPPING\",\n    callback\n  );\n});\n","title":"Check if Admission Shopping Exists","requiresIdentity":true,"standalone":false,"__v":0,"_references":["confirmInvoiceIsFor","skipApplicationIfAllowed"],"_code":"this.libs.confirmInvoiceIsFor.call(this, this.args.invoiceNumber, \"ADMISSION_SHOPPING\", er => {\ntry{\n{\n  if (er) return callback(er);\n\n  return this.libs.skipApplicationIfAllowed.call(\n    this,\n    this.args.$appDomain.config.admissionShopping,\n    \"SUBMIT_ADMISSION_SHOPPING\",\n    callback\n  );\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n"},{"_id":{"$objectID":"5a9d091095d1293b84be9181"},"code":"this.async.waterfall([\n    (fn) =>{\n        this.entityRepo.get(this.args.$appDomain.config.invoiceClass,{invoiceNumber : this.args.invoiceNumber},{one : true},(er,invoice)=>{\n            if(er) return fn(er);\n            if(!invoice) return fn(new Error(\"no record found\"));\n            fn(null,invoice);\n        });\n    },\n    (invoice,fn)=>{\n        this.entityRepo.get(this.args.$appDomain.config.putmeApplicationClass,{registrationNumber : invoice.extra.registrationNumber },{one :true, full :true},(er,student)=>{\n          if(er) return fn(er);\n          if(!student) return fn(new Error(\"No record found for the reg number: \" + invoice.extra.registrationNumber));\n        fn(null,student);\n        });\n    },\n    (student,fn)=>{\n        this.entityRepo.infrastructure().fileUpload.readFile(student.personalDetails.passport,null, (er,data, description) => {\n            if (er) return fn(er);\n            if (!data) return fn(new Error(\"Image not found\"));\n            let passport = `data:${description.mime};base64,${data.toString(\"base64\")}`;\n            fn(null,passport,student);\n        })\n    }],\n    (er,passport,  result)=>{\n        this.async.parallel([\n            this.entityRepo.get.bind(null, \"State\", { _id : result.personalDetails.state }, { one : true }),\n            this.entityRepo.get.bind(null, \"Department\", { _id : result.jambDetails.department }, { one :true }),\n            this.entityRepo.get.bind(null, \"Gender\", { _id : result.personalDetails.gender}, { one : true }),\n            this.entityRepo.get.bind(null, this.args.$appDomain.config.putmeResultClass,{regNumb : result.registrationNumber},{ one : true})\n        ],\n        (er,data)=>{\n            if(er) return callback(er);    \n            \n            let result_lga = data[0].lgas.find(x=>{ return x._id.toString() == result.personalDetails.lga.toString()});\n                \n            let passport_id = result.personalDetails.passport;\n            result.personalDetails.state = data[0];\n            result.personalDetails.gender = data[2];\n            result.personalDetails.lga = result_lga;\n            result.personalDetails.passport = passport;\n            delete result.invoiceNumber;\n            let jambDetails = {\n                department : data[1], \n                jambScore : result.jambDetails.totalScore, \n                registrationNumber : result.registrationNumber,\n                screeningScore : data[3].totalScore\n            },\n           student = result.personalDetails; \n           student.passport_id = passport_id;\n            \n              return ui.call(this,jambDetails, student, (er, ui) => {\n                let disabled = [\"firstName\", \"middlename\", \"state\", \"surname\", \"gender\",\n                \"state\",\"localGovt\",\"mobile\",\"contactAddress\",\"email\",\"registrationNumber\",\"department\",\"utmeScore\",\"screeningScore\"];\n                this.libs.visitElements(ui, disable.bind(this, disabled));\n                setImmediate(callback,er,result, ui);\n            });\n        });\n        \n    function disable(list, element) {\n        if (list && list.length && list.indexOf(element.name) !== -1) element.args = Object.assign(element.args || {}, { disabled: true });\n    }\n    \n        \n    function ui(jambDetails,student,fn) {\n      let e = this.libs.createElement.bind(this),\n        c = this.constants,\n        elem = (this.args.$nextStep && this.args.$nextStep.form.elements) || [];\n        elem.length = 0;\n        elem.push(Object.assign({ order: 1 }, e(\"personalDetails\", \"Personal Details\", \"\", c.ELEMENTTYPE.SECTION, {})));\n          elem[0].args.elements = [\n            e(\"passport\",\"Passport\",\"\",c.ELEMENTTYPE.IMAGE,{ type : c.IMAGETYPE.DATA, config : { data : student.passport}}),\n            e(\"firstName\", \"First Name\", \"\", c.ELEMENTTYPE.INPUT,{ default : student.firstName}),\n            e(\"middlename\", \"Middlename\", \"\", c.ELEMENTTYPE.INPUT, { default : student.middleName}),\n            e(\"surname\", \"Surname\", \"\", c.ELEMENTTYPE.INPUT,{default : student.surname}),\n            e(\"gender\", \"Gender\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id :student.gender._id, displayLabel : student.gender.name }]}),\n            e(\"state\", \"State\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id : student.state._id, displayLabel : student.state.name }]}),\n            e(\"localGovt\", \"LGA\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id :  student.lga._id, displayLabel : student.lga.name }]}),\n            e(\"mobile\", \"Mobile Number\", \"\", c.ELEMENTTYPE.INPUT,{default : student.mobile}),\n            e(\"contactAddress\", \"Contact Address\", \"\", c.ELEMENTTYPE.INPUT, { default :  student.mailingAddress}),\n            e(\"email\", \"Email\", \"\", c.ELEMENTTYPE.INPUT, { default :  student.email})\n            ];\n            \n        elem.push(Object.assign({order : 2 },e(\"resultDetail\",\"Exam Details\",\"\",c.ELEMENTTYPE.SECTION,{})));\n        elem[1].args.elements = [\n            e(\"registrationNumber\", \"Jamb Registration Number\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.registrationNumber}),\n            e(\"department\", \"Department\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id : jambDetails.department._id , displayDisplay : jambDetails.department.name }] }),\n            e(\"utmeScore\", \"Jamb Score\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.jambScore}),\n            e(\"screeningScore\", \"PUTME Screening Score\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.screeningScore }),\n          ];\n        elem.push(Object.assign({order : 3 },e(\"shoppingDetails\",\"Shopping Details\",\"\",c.ELEMENTTYPE.SECTION,{})));\n        elem[2].args.elements = [\n            e(\"faculty\", \"Faculty Shopping into\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                mode: c.ENTRYMODE.OBJECTID,\n                processor: \"FACULTY_AND_DEPT\",\n                path: \"facultyOption\"\n          },[this.libs.createRequiredValidator()])\n        ];\n          elem.push(e(\"passport\",\"\",\"\",c.ELEMENTTYPE.HIDDEN,{ default : student.passport_id}));\n          elem.push(e(\"invoiceNumber\", \"\", \"\", c.ELEMENTTYPE.HIDDEN,{default : this.args.invoiceNumber}));\n          elem.push(e(\"screeningScore\", \"\", \"\", c.ELEMENTTYPE.HIDDEN,{default : jambDetails.screeningScore}));\n          setImmediate(fn, null, this.args.$nextStep || elem);\n    }\n});","title":"Inject Admission shopping Ui","requiresIdentity":true,"standalone":false,"__v":0,"_references":["visitElements","createElement","createRequiredValidator"],"_code":"this.async.waterfall([\n    (fn) =>{\ntry{\n{\n        this.entityRepo.get(this.args.$appDomain.config.invoiceClass,{invoiceNumber : this.args.invoiceNumber},{one : true},(er,invoice)=>{\ntry{\n{\n            if(er) return fn(er);\n            if(!invoice) return fn(new Error(\"no record found\"));\n            fn(null,invoice);\n        }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n    }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}},\n    (invoice,fn)=>{\ntry{\n{\n        this.entityRepo.get(this.args.$appDomain.config.putmeApplicationClass,{registrationNumber : invoice.extra.registrationNumber },{one :true, full :true},(er,student)=>{\ntry{\n{\n          if(er) return fn(er);\n          if(!student) return fn(new Error(\"No record found for the reg number: \" + invoice.extra.registrationNumber));\n        fn(null,student);\n        }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n    }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}},\n    (student,fn)=>{\ntry{\n{\n        this.entityRepo.infrastructure().fileUpload.readFile(student.personalDetails.passport,null, (er,data, description) => {\ntry{\n{\n            if (er) return fn(er);\n            if (!data) return fn(new Error(\"Image not found\"));\n            let passport = `data:${description.mime};base64,${data.toString(\"base64\")}`;\n            fn(null,passport,student);\n        }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}})\n    }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}}],\n    (er,passport,  result)=>{\ntry{\n{\n        this.async.parallel([\n            this.entityRepo.get.bind(null, \"State\", { _id : result.personalDetails.state }, { one : true }),\n            this.entityRepo.get.bind(null, \"Department\", { _id : result.jambDetails.department }, { one :true }),\n            this.entityRepo.get.bind(null, \"Gender\", { _id : result.personalDetails.gender}, { one : true }),\n            this.entityRepo.get.bind(null, this.args.$appDomain.config.putmeResultClass,{regNumb : result.registrationNumber},{ one : true})\n        ],\n        (er,data)=>{\ntry{\n{\n            if(er) return callback(er);    \n            \n            let result_lga = data[0].lgas.find(x=>{ return x._id.toString() == result.personalDetails.lga.toString()});\n                \n            let passport_id = result.personalDetails.passport;\n            result.personalDetails.state = data[0];\n            result.personalDetails.gender = data[2];\n            result.personalDetails.lga = result_lga;\n            result.personalDetails.passport = passport;\n            delete result.invoiceNumber;\n            let jambDetails = {\n                department : data[1], \n                jambScore : result.jambDetails.totalScore, \n                registrationNumber : result.registrationNumber,\n                screeningScore : data[3].totalScore\n            },\n           student = result.personalDetails; \n           student.passport_id = passport_id;\n            \n              return ui.call(this,jambDetails, student, (er, ui) => {\ntry{\n{\n                let disabled = [\"firstName\", \"middlename\", \"state\", \"surname\", \"gender\",\n                \"state\",\"localGovt\",\"mobile\",\"contactAddress\",\"email\",\"registrationNumber\",\"department\",\"utmeScore\",\"screeningScore\"];\n                this.libs.visitElements(ui, disable.bind(this, disabled));\n                setImmediate(callback,er,result, ui);\n            }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n        }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n        \n    function disable(list, element) {\n        if (list && list.length && list.indexOf(element.name) !== -1) element.args = Object.assign(element.args || {}, { disabled: true });\n    }\n    \n        \n    function ui(jambDetails,student,fn) {\ntry{\n{\n      let e = this.libs.createElement.bind(this),\n        c = this.constants,\n        elem = (this.args.$nextStep && this.args.$nextStep.form.elements) || [];\n        elem.length = 0;\n        elem.push(Object.assign({ order: 1 }, e(\"personalDetails\", \"Personal Details\", \"\", c.ELEMENTTYPE.SECTION, {})));\n          elem[0].args.elements = [\n            e(\"passport\",\"Passport\",\"\",c.ELEMENTTYPE.IMAGE,{ type : c.IMAGETYPE.DATA, config : { data : student.passport}}),\n            e(\"firstName\", \"First Name\", \"\", c.ELEMENTTYPE.INPUT,{ default : student.firstName}),\n            e(\"middlename\", \"Middlename\", \"\", c.ELEMENTTYPE.INPUT, { default : student.middleName}),\n            e(\"surname\", \"Surname\", \"\", c.ELEMENTTYPE.INPUT,{default : student.surname}),\n            e(\"gender\", \"Gender\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id :student.gender._id, displayLabel : student.gender.name }]}),\n            e(\"state\", \"State\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id : student.state._id, displayLabel : student.state.name }]}),\n            e(\"localGovt\", \"LGA\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id :  student.lga._id, displayLabel : student.lga.name }]}),\n            e(\"mobile\", \"Mobile Number\", \"\", c.ELEMENTTYPE.INPUT,{default : student.mobile}),\n            e(\"contactAddress\", \"Contact Address\", \"\", c.ELEMENTTYPE.INPUT, { default :  student.mailingAddress}),\n            e(\"email\", \"Email\", \"\", c.ELEMENTTYPE.INPUT, { default :  student.email})\n            ];\n            \n        elem.push(Object.assign({order : 2 },e(\"resultDetail\",\"Exam Details\",\"\",c.ELEMENTTYPE.SECTION,{})));\n        elem[1].args.elements = [\n            e(\"registrationNumber\", \"Jamb Registration Number\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.registrationNumber}),\n            e(\"department\", \"Department\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id : jambDetails.department._id , displayDisplay : jambDetails.department.name }] }),\n            e(\"utmeScore\", \"Jamb Score\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.jambScore}),\n            e(\"screeningScore\", \"PUTME Screening Score\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.screeningScore }),\n          ];\n        elem.push(Object.assign({order : 3 },e(\"shoppingDetails\",\"Shopping Details\",\"\",c.ELEMENTTYPE.SECTION,{})));\n        elem[2].args.elements = [\n            e(\"faculty\", \"Faculty Shopping into\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                mode: c.ENTRYMODE.OBJECTID,\n                processor: \"FACULTY_AND_DEPT\",\n                path: \"facultyOption\"\n          },[this.libs.createRequiredValidator()])\n        ];\n          elem.push(e(\"passport\",\"\",\"\",c.ELEMENTTYPE.HIDDEN,{ default : student.passport_id}));\n          elem.push(e(\"invoiceNumber\", \"\", \"\", c.ELEMENTTYPE.HIDDEN,{default : this.args.invoiceNumber}));\n          elem.push(e(\"screeningScore\", \"\", \"\", c.ELEMENTTYPE.HIDDEN,{default : jambDetails.screeningScore}));\n          setImmediate(fn, null, this.args.$nextStep || elem);\n    }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}}\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});"}]
