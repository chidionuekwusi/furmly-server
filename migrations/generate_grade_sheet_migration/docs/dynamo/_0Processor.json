[{"_id":{"$objectID":"5a62ffaf10545852b0cec697"},"code":"this.entityRepo.get(\"Staff\", { userId: this.args.$user._id }, { one: true }, (er, staff) => {\n  if (er) return callback(er);\n  if (!staff) return callback(new Error(\"You have to have a staff profile to download a class list\"));\n  this.entityRepo.aggregate(\n    \"CourseForm\",\n    [\n      {\n        $match: {\n          approved: true,\n          session: { $objectID: this.args.session },\n          courses: { $objectID: this.args.course }\n        }\n      },\n      {\n        $lookup: {\n          from: this.entityRepo.getCollectionName(this.args.$domain.config.studentClass),\n          localField: \"studentId\",\n          foreignField: \"_id\",\n          as: \"_student\"\n        }\n      },\n      {\n        $match: {\n          \"_student.programmeDetails.department\": { $in: (staff.classListDepartments || []).map(x => ({ $objectID: x.department })) }\n        }\n      },\n      {\n        $unwind: \"$_student\"\n      },\n      {\n        $project: {\n          _id: 0,\n          \"Reg No\": \"$_student.refNo\",\n          \"Full Name\": {\n            $concat: [\n              \"$_student.personalDetails.firstName\",\n              \" \",\n              \"$_student.personalDetails.middlename\",\n              \" \",\n              \"$_student.personalDetails.surname\"\n            ]\n          }\n        }\n      }\n    ],\n    (er, data) => {\n      if (er) return callback(er);\n      if (!data || !data.length) return callback(new Error(\"No Student has enrolled!\"));\n\n      this.debug(data);\n      this.entityRepo.get(\"Course\", { _id: this.args.course }, { one: true }, (error, course) => {\n        if (error) callback(error);\n        else {\n          let i = 1;\n          data = data.map(x =>\n            Object.assign(\n              {\n                \"S/N\": i++\n              },\n              x,\n              {\n                \"In Course\": \"\",\n                \"Exam Score\": \"\",\n                \"Course Code\": course.code,\n                \"Exam Date\": \"\",\n                \"Remarks\": \"\"\n              }\n            )\n          );\n          let inf = this.entityRepo.infrastructure();\n\n          this.debug(this.args.$user);\n          this.debug(\"about to generate an xlsx workbook\");\n          inf.fileParser.generate(\"xlsx\", { sheetName: \"Sheet 1\", arr: data }, (er, workbook, fileType) => {\n            if (er) return callback(er);\n            this.debug(\"file type---x\");\n            this.debug(fileType);\n            inf.fileUpload.generateTempFile(this.args.$user, \"xlsx\", workbook, \"Class List\", (er, saved) => {\n              if (er) return callback(er);\n\n              let accessToken = inf.userManager.generateScopedToken(\"download\", saved, 600);\n\n              callback(null, [\n                this.libs.createElement(\"download\", \"Download\", \"\", this.constants.ELEMENTTYPE.COMMAND, {\n                  commandText: \"Download Class List\",\n                  commandIcon: \"cloud_download\",\n                  commandType: this.constants.COMMANDTYPE.DOWNLOAD,\n                  commandProcessorArgs: JSON.stringify(\n                    Object.assign(\n                      {},\n                      {\n                        mime: inf.fileUpload.MIMES.xlsx,\n                        description: \"Class List\",\n                        access_token: accessToken\n                      },\n                      saved\n                    )\n                  )\n                })\n              ]);\n            });\n          });\n        }\n      });\n    }\n  );\n});\n","title":"Generate Class list Excel","requiresIdentity":true,"__v":0,"standalone":true,"_references":["createElement"],"_code":"this.entityRepo.get(\"Staff\", { userId: this.args.$user._id }, { one: true }, (er, staff) => {\ntry{\n{\n  if (er) return callback(er);\n  if (!staff) return callback(new Error(\"You have to have a staff profile to download a class list\"));\n  this.entityRepo.aggregate(\n    \"CourseForm\",\n    [\n      {\n        $match: {\n          approved: true,\n          session: { $objectID: this.args.session },\n          courses: { $objectID: this.args.course }\n        }\n      },\n      {\n        $lookup: {\n          from: this.entityRepo.getCollectionName(this.args.$domain.config.studentClass),\n          localField: \"studentId\",\n          foreignField: \"_id\",\n          as: \"_student\"\n        }\n      },\n      {\n        $match: {\n          \"_student.programmeDetails.department\": { $in: (staff.classListDepartments || []).map(x => ({ $objectID: x.department })) }\n        }\n      },\n      {\n        $unwind: \"$_student\"\n      },\n      {\n        $project: {\n          _id: 0,\n          \"Reg No\": \"$_student.refNo\",\n          \"Full Name\": {\n            $concat: [\n              \"$_student.personalDetails.firstName\",\n              \" \",\n              \"$_student.personalDetails.middlename\",\n              \" \",\n              \"$_student.personalDetails.surname\"\n            ]\n          }\n        }\n      }\n    ],\n    (er, data) => {\ntry{\n{\n      if (er) return callback(er);\n      if (!data || !data.length) return callback(new Error(\"No Student has enrolled!\"));\n\n      this.debug(data);\n      this.entityRepo.get(\"Course\", { _id: this.args.course }, { one: true }, (error, course) => {\ntry{\n{\n        if (error) callback(error);\n        else {\n          let i = 1;\n          data = data.map(x =>\n            Object.assign(\n              {\n                \"S/N\": i++\n              },\n              x,\n              {\n                \"In Course\": \"\",\n                \"Exam Score\": \"\",\n                \"Course Code\": course.code,\n                \"Exam Date\": \"\",\n                \"Remarks\": \"\"\n              }\n            )\n          );\n          let inf = this.entityRepo.infrastructure();\n\n          this.debug(this.args.$user);\n          this.debug(\"about to generate an xlsx workbook\");\n          inf.fileParser.generate(\"xlsx\", { sheetName: \"Sheet 1\", arr: data }, (er, workbook, fileType) => {\ntry{\n{\n            if (er) return callback(er);\n            this.debug(\"file type---x\");\n            this.debug(fileType);\n            inf.fileUpload.generateTempFile(this.args.$user, \"xlsx\", workbook, \"Class List\", (er, saved) => {\ntry{\n{\n              if (er) return callback(er);\n\n              let accessToken = inf.userManager.generateScopedToken(\"download\", saved, 600);\n\n              callback(null, [\n                this.libs.createElement(\"download\", \"Download\", \"\", this.constants.ELEMENTTYPE.COMMAND, {\n                  commandText: \"Download Class List\",\n                  commandIcon: \"cloud_download\",\n                  commandType: this.constants.COMMANDTYPE.DOWNLOAD,\n                  commandProcessorArgs: JSON.stringify(\n                    Object.assign(\n                      {},\n                      {\n                        mime: inf.fileUpload.MIMES.xlsx,\n                        description: \"Class List\",\n                        access_token: accessToken\n                      },\n                      saved\n                    )\n                  )\n                })\n              ]);\n            }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n          }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n        }\n      }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n    }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n  );\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n"},{"_id":{"$objectID":"5aeae84ab8ff605b883f098b"},"code":"let inf = this.entityRepo.infrastructure(),\n  fileUpload = inf.fileUpload,\n  fileParser = inf.fileParser,\n  threadPool = inf.threadPool;\nthis.debug(\"=============================================================\");\nthis.debug(this.args);\nthis.libs.parseObjectIds.call(this, this.args);\n\nlet uploadResult = () => {\n  this.entityRepo.get(\"Staff\", { userId: this.args.$user._id, domain: this.args.$domain._id }, { one: true }, (error, staff) => {\n    if (error || !staff) callback(new Error(\"No staff details could be found\"));\n\n    let args = this.args.entity,\n      contx = {\n        semester: args.semester,\n        session: args.session,\n        department: args.department,\n        course: args.courseId,\n        lecturer: staff._id,\n        courseAssignmentId: args._id\n      };\n    this.libs.convertFileAndSave(\n      this.args.$domain.config.resultClass,\n      args.file,\n      contx,\n      [\"regNo\", \"fullName\", \"inCourse\", \"examScore\", \"courseCode\", \"examDate\"],\n      null,\n      fileUpload,\n      fileParser,\n      threadPool,\n      this.entityRepo,\n      this.args.$user,\n      (error, result) => {\n        if (error) callback(error);\n        else callback(null, { items: [], message: \"Results were successfully uploaded\" });\n      }\n    );\n  });\n};\n\nif (!fileUpload || !fileParser || !threadPool) {\n  this.debug(`something is undefined ...fileUpload:${!!fileUpload}, fileParser:${!!fileParser}, threadPool:${!!threadPool}`),\n    callback(new Error(\"Infrastructure has a problem\"));\n} else if (!this.args.entity && !this.args.entity.file) {\n  this.debug(\"user didnt upload any file\");\n  callback(new Error(\"Missing Result file. Try uploading the file again, if this was already done.\"));\n} else uploadResult();\n","title":"upload student results","uid":"UPLOAD_STUDENT_RESULT","requiresIdentity":true,"standalone":true,"__v":0,"_references":["parseObjectIds","convertFileAndSave"],"_code":"let inf = this.entityRepo.infrastructure(),\n  fileUpload = inf.fileUpload,\n  fileParser = inf.fileParser,\n  threadPool = inf.threadPool;\nthis.debug(\"=============================================================\");\nthis.debug(this.args);\nthis.libs.parseObjectIds.call(this, this.args);\n\nlet uploadResult = () => {\n  this.entityRepo.get(\"Staff\", { userId: this.args.$user._id, domain: this.args.$domain._id }, { one: true }, (error, staff) => {\ntry{\n{\n    if (error || !staff) callback(new Error(\"No staff details could be found\"));\n\n    let args = this.args.entity,\n      contx = {\n        semester: args.semester,\n        session: args.session,\n        department: args.department,\n        course: args.courseId,\n        lecturer: staff._id,\n        courseAssignmentId: args._id\n      };\n    this.libs.convertFileAndSave(\n      this.args.$domain.config.resultClass,\n      args.file,\n      contx,\n      [\"regNo\", \"fullName\", \"inCourse\", \"examScore\", \"courseCode\", \"examDate\"],\n      null,\n      fileUpload,\n      fileParser,\n      threadPool,\n      this.entityRepo,\n      this.args.$user,\n      (error, result) => {\ntry{\n{\n        if (error) callback(error);\n        else callback(null, { items: [], message: \"Results were successfully uploaded\" });\n      }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n    );\n  }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n};\n\nif (!fileUpload || !fileParser || !threadPool) {\n  this.debug(`something is undefined ...fileUpload:${!!fileUpload}, fileParser:${!!fileParser}, threadPool:${!!threadPool}`),\n    callback(new Error(\"Infrastructure has a problem\"));\n} else if (!this.args.entity && !this.args.entity.file) {\n  this.debug(\"user didnt upload any file\");\n  callback(new Error(\"Missing Result file. Try uploading the file again, if this was already done.\"));\n} else uploadResult();\n"},{"_id":{"$objectID":"5b192a693d221f3357e42064"},"code":"this.args.query = this.args;\nthis.libs.generateGradeSheet.call(this, (error, result) => {\n  if (error) return callback(error);\n\n  this.debug(\"===============================\");\n  this.debug(result);\n\n  let inf = this.entityRepo.infrastructure();\n\n  inf.fileParser.generate(\n    \"xlsx\",\n    {\n      sheetName: \"Sheet 1\",\n      arr: result\n    },\n    (er, workbook, fileType) => {\n      if (er) return fn(er);\n      this.debug(\"file type---x\");\n      this.debug(fileType);\n      inf.fileUpload.generateTempFile(this.args.$user, \"xlsx\", workbook, \"Grade Sheet\", (er, saved) => {\n        if (er) return fn(er);\n\n        let accessToken = inf.userManager.generateScopedToken(\"download\", saved, 600);\n\n        let download = this.libs.createElement(\"download\", \"Download\", \"\", this.constants.ELEMENTTYPE.COMMAND, {\n          commandText: \"Download Grade Sheet\",\n          commandIcon: \"cloud_download\",\n          commandType: this.constants.COMMANDTYPE.DOWNLOAD,\n          commandProcessorArgs: JSON.stringify(\n            Object.assign(\n              {},\n              {\n                mime: inf.fileUpload.MIMES.xlsx,\n                description: \"Grade Sheet\",\n                access_token: accessToken\n              },\n              saved\n            )\n          )\n        });\n\n        this.debug(`${this.args.query.department} ::: ${this.args.query.course} ::: ${this.args.query.session}`);\n\n        this.async.parallel(\n          [\n            fn => {\n              this.entityRepo.get(\"Department\", { _id: this.args.query.department }, { one: true }, (error, department) => {\n                if (error) return fn(error);\n                fn(null, department);\n              });\n            },\n            fn => {\n              this.entityRepo.get(\"Course\", { _id: this.args.query.course }, { one: true }, (error, course) => {\n                if (error) return fn(error);\n                fn(null, course);\n              });\n            },\n            fn => {\n              this.entityRepo.get(\"Session\", { _id: this.args.query.session }, { one: true }, (error, session) => {\n                if (error) return fn(error);\n                fn(null, session);\n              });\n            }\n          ],\n          (error, asyncResult) => {\n            if (error) return callback(error);\n\n            return this.libs.getHtmlTemplates.call(\n              this,\n              [\n                [\n                  \"GRADE_SHEET_TEMPLATE\",\n                  Object.assign(\n                    {},\n                    {\n                      sheet: {\n                        students: result,\n                        department: asyncResult[0].name,\n                        course: asyncResult[1].code,\n                        session: asyncResult[2].name\n                      },\n                      download: download\n                    }\n                  )\n                ],\n                [\"BOOTSTRAP\", {}],\n                [\"GENERAL_STYLES\", {}]\n              ],\n              this.args.$domain,\n              (er, templates) => {\n                if (er) return callback(er);\n\n                let html = this.libs.createElement(\"gradeSheet\", \"\", \"\", this.constants.ELEMENTTYPE.HTMLVIEW, {\n                  html: templates[0].render() + templates[1].render() + templates[2].render()\n                });\n\n                let ui = this.libs.createElement(\"section\", \"\", \"\", this.constants.ELEMENTTYPE.SECTION, {\n                  elements: [html]\n                });\n                return callback(null, [download, ui]);\n              }\n            );\n          }\n        );\n      });\n    }\n  );\n});\n","title":"Generate Grade Sheet","_code":"this.args.query = this.args;\nthis.libs.generateGradeSheet.call(this, (error, result) => {\ntry{\n{\n  if (error) return callback(error);\n\n  this.debug(\"===============================\");\n  this.debug(result);\n\n  let inf = this.entityRepo.infrastructure();\n\n  inf.fileParser.generate(\n    \"xlsx\",\n    {\n      sheetName: \"Sheet 1\",\n      arr: result\n    },\n    (er, workbook, fileType) => {\ntry{\n{\n      if (er) return fn(er);\n      this.debug(\"file type---x\");\n      this.debug(fileType);\n      inf.fileUpload.generateTempFile(this.args.$user, \"xlsx\", workbook, \"Grade Sheet\", (er, saved) => {\ntry{\n{\n        if (er) return fn(er);\n\n        let accessToken = inf.userManager.generateScopedToken(\"download\", saved, 600);\n\n        let download = this.libs.createElement(\"download\", \"Download\", \"\", this.constants.ELEMENTTYPE.COMMAND, {\n          commandText: \"Download Grade Sheet\",\n          commandIcon: \"cloud_download\",\n          commandType: this.constants.COMMANDTYPE.DOWNLOAD,\n          commandProcessorArgs: JSON.stringify(\n            Object.assign(\n              {},\n              {\n                mime: inf.fileUpload.MIMES.xlsx,\n                description: \"Grade Sheet\",\n                access_token: accessToken\n              },\n              saved\n            )\n          )\n        });\n\n        this.debug(`${this.args.query.department} ::: ${this.args.query.course} ::: ${this.args.query.session}`);\n\n        this.async.parallel(\n          [\n            fn => {\ntry{\n{\n              this.entityRepo.get(\"Department\", { _id: this.args.query.department }, { one: true }, (error, department) => {\ntry{\n{\n                if (error) return fn(error);\n                fn(null, department);\n              }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}});\n            }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}},\n            fn => {\ntry{\n{\n              this.entityRepo.get(\"Course\", { _id: this.args.query.course }, { one: true }, (error, course) => {\ntry{\n{\n                if (error) return fn(error);\n                fn(null, course);\n              }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}});\n            }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}},\n            fn => {\ntry{\n{\n              this.entityRepo.get(\"Session\", { _id: this.args.query.session }, { one: true }, (error, session) => {\ntry{\n{\n                if (error) return fn(error);\n                fn(null, session);\n              }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}});\n            }\n} catch(e){\n//an unexpected error has just occurred. \n fn(e);}}\n          ],\n          (error, asyncResult) => {\ntry{\n{\n            if (error) return callback(error);\n\n            return this.libs.getHtmlTemplates.call(\n              this,\n              [\n                [\n                  \"GRADE_SHEET_TEMPLATE\",\n                  Object.assign(\n                    {},\n                    {\n                      sheet: {\n                        students: result,\n                        department: asyncResult[0].name,\n                        course: asyncResult[1].code,\n                        session: asyncResult[2].name\n                      },\n                      download: download\n                    }\n                  )\n                ],\n                [\"BOOTSTRAP\", {}],\n                [\"GENERAL_STYLES\", {}]\n              ],\n              this.args.$domain,\n              (er, templates) => {\ntry{\n{\n                if (er) return callback(er);\n\n                let html = this.libs.createElement(\"gradeSheet\", \"\", \"\", this.constants.ELEMENTTYPE.HTMLVIEW, {\n                  html: templates[0].render() + templates[1].render() + templates[2].render()\n                });\n\n                let ui = this.libs.createElement(\"section\", \"\", \"\", this.constants.ELEMENTTYPE.SECTION, {\n                  elements: [html]\n                });\n                return callback(null, [download, ui]);\n              }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n            );\n          }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n        );\n      }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n    }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n  );\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n","_references":["generateGradeSheet","createElement","getHtmlTemplates"],"requiresIdentity":true,"standalone":true,"__v":0}]
