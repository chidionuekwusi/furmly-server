[{"_id":{"$objectID":"5b193d043d221f3357e42068"},"code":"exports = function(callback) {\n  if (!this.args.query)\n    return callback(null, []);\n\n  this.entityRepo.get(\"Staff\", { userId: this.args.$user._id }, { one: true }, (error, staff) => {\n    this.entityRepo.aggregate(\n      this.args.$domain.config.resultClass,\n      [\n        {\n          $match: {\n            department: {\n              $objectID: this.args.query.department\n            },\n            semester: {\n              $objectID: this.args.query.semester\n            },\n            session: {\n              $objectID: this.args.query.session\n            },\n            course: {\n              $objectID: this.args.query.course\n            },\n            approved: true\n          }\n        },\n        {\n          $lookup: {\n            from: this.entityRepo.getCollectionName(this.args.$domain.config.studentClass),\n            localField: \"regNo\",\n            foreignField: \"regNo\",\n            as: \"_student\"\n          }\n        },\n        {\n          $match: {\n            \"_student.studentType\": {\n              $objectID: this.args.query.studentType\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: this.entityRepo.getCollectionName(\"CourseLecturerAssignment\"),\n            localField: \"course\",\n            foreignField: \"course\",\n            as: \"_assignment\"\n          }\n        },\n        {\n          $match: {\n            $or: [\n              {\n                \"_assignment.lecturer\": {\n                  $objectID: staff._id\n                }\n              },\n              {\n                \"_assignment.hod\": {\n                  $objectID: staff._id\n                }\n              }\n            ]\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            regNo: 1,\n            fullName: 1,\n            inCourse: 1,\n            remarks: 1,\n            examScore: 1\n          }\n        },\n        {\n          $sort: {\n            _id: -1\n          }\n        }\n      ],\n      (error, result) => {\n        if (error || !result.length)\n          return callback(new Error(\"Results were not found for the criteria\"), {\n            items: [],\n            total: 0\n          });\n\n        let search = (haystack, needle, maxProperty, minProperty) => {\n          let haystackLength = haystack.length;\n          let newHayStack,\n            result = {};\n          if (haystackLength > 2) {\n            newHayStack = haystack.slice(Math.ceil(haystackLength / 2));\n            if (needle > newHayStack[newHayStack.length - 1][maxProperty] && needle > newHayStack[0][maxProperty]) {\n              newHayStack = haystack.slice(0, Math.ceil(haystackLength / 2));\n            }\n            result = search(newHayStack, needle, maxProperty, minProperty);\n          } else {\n            for (let i = 0; i < haystack.length; i++) {\n              if (haystack[i][maxProperty] >= needle && haystack[i][minProperty] <= needle) {\n                result = haystack[i];\n                break;\n              }\n            }\n          }\n          return result;\n        };\n\n        let calculateGrade = score => {\n          let range = search(JSON.parse(this.args.$domain.config.gradeRules), score, \"max\", \"min\");\n          return range.grade;\n        };\n\n        result = result.map(r => {\n          let total = parseInt(r.inCourse || 0) + parseInt(r.examScore),\n            grade = calculateGrade(total);\n          return Object.assign(\n            {},\n            {\n              \"Full Name\": r.fullName,\n              \"Reg No\": r.regNo,\n              \"Quiz & Assign 30%\": r.inCourse || 0,\n              \"Exam Score 70%\": r.examScore,\n              \"Total 100%\": total,\n              Grade: grade,\n              Remarks: r.remarks\n            }\n          );\n        });\n\n        return callback(null, result);\n      }\n    );\n  });\n};\n","uid":"generateGradeSheet","_code":"exports = function(callback) {\ntry{\n{\n  if (!this.args.query)\n    return callback(null, []);\n\n  this.entityRepo.get(\"Staff\", { userId: this.args.$user._id }, { one: true }, (error, staff) => {\ntry{\n{\n    this.entityRepo.aggregate(\n      this.args.$domain.config.resultClass,\n      [\n        {\n          $match: {\n            department: {\n              $objectID: this.args.query.department\n            },\n            semester: {\n              $objectID: this.args.query.semester\n            },\n            session: {\n              $objectID: this.args.query.session\n            },\n            course: {\n              $objectID: this.args.query.course\n            },\n            approved: true\n          }\n        },\n        {\n          $lookup: {\n            from: this.entityRepo.getCollectionName(this.args.$domain.config.studentClass),\n            localField: \"regNo\",\n            foreignField: \"regNo\",\n            as: \"_student\"\n          }\n        },\n        {\n          $match: {\n            \"_student.studentType\": {\n              $objectID: this.args.query.studentType\n            }\n          }\n        },\n        {\n          $lookup: {\n            from: this.entityRepo.getCollectionName(\"CourseLecturerAssignment\"),\n            localField: \"course\",\n            foreignField: \"course\",\n            as: \"_assignment\"\n          }\n        },\n        {\n          $match: {\n            $or: [\n              {\n                \"_assignment.lecturer\": {\n                  $objectID: staff._id\n                }\n              },\n              {\n                \"_assignment.hod\": {\n                  $objectID: staff._id\n                }\n              }\n            ]\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            regNo: 1,\n            fullName: 1,\n            inCourse: 1,\n            remarks: 1,\n            examScore: 1\n          }\n        },\n        {\n          $sort: {\n            _id: -1\n          }\n        }\n      ],\n      (error, result) => {\ntry{\n{\n        if (error || !result.length)\n          return callback(new Error(\"Results were not found for the criteria\"), {\n            items: [],\n            total: 0\n          });\n\n        let search = (haystack, needle, maxProperty, minProperty) => {\n          let haystackLength = haystack.length;\n          let newHayStack,\n            result = {};\n          if (haystackLength > 2) {\n            newHayStack = haystack.slice(Math.ceil(haystackLength / 2));\n            if (needle > newHayStack[newHayStack.length - 1][maxProperty] && needle > newHayStack[0][maxProperty]) {\n              newHayStack = haystack.slice(0, Math.ceil(haystackLength / 2));\n            }\n            result = search(newHayStack, needle, maxProperty, minProperty);\n          } else {\n            for (let i = 0; i < haystack.length; i++) {\n              if (haystack[i][maxProperty] >= needle && haystack[i][minProperty] <= needle) {\n                result = haystack[i];\n                break;\n              }\n            }\n          }\n          return result;\n        };\n\n        let calculateGrade = score => {\n          let range = search(JSON.parse(this.args.$domain.config.gradeRules), score, \"max\", \"min\");\n          return range.grade;\n        };\n\n        result = result.map(r => {\n          let total = parseInt(r.inCourse || 0) + parseInt(r.examScore),\n            grade = calculateGrade(total);\n          return Object.assign(\n            {},\n            {\n              \"Full Name\": r.fullName,\n              \"Reg No\": r.regNo,\n              \"Quiz & Assign 30%\": r.inCourse || 0,\n              \"Exam Score 70%\": r.examScore,\n              \"Total 100%\": total,\n              Grade: grade,\n              Remarks: r.remarks\n            }\n          );\n        });\n\n        return callback(null, result);\n      }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}}\n    );\n  }\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}});\n}\n} catch(e){\n//an unexpected error has just occurred. \n callback(e);}};\n","_references":[],"__v":0}]
