[{"_id":{"$objectID":"5a71d990037da90d5cbc4bc2"},"code":"/**\n * This class represents an application a student is trying to fill.\n * @constructor \n * */\nclass ExternalApplication {\n  constructor(context, slipTitle) {\n    if (!context.args) return new Error(\"No args passed to External Application\");\n    if (!context.entityRepo) return new Error(\"Invalid setup , repo cannot be null \");\n    this.register = this.register.bind(this);\n    this.validate = this.validate.bind(this);\n    this.extend = this.extend.bind(this);\n    this.context = context;\n    this.slipTitle = slipTitle || \"Acknowledgement Slip\";\n  }\n  /**\n   * Used by the application to validate the object its supposed to store.\n   *@param {Function} callback Callback function.\n   * */\n  validate(callback) {\n    setImmediate(callback);\n  }\n  /**\n   * Used by the application to extend the object its supposed to store.\n   *@param {Function} callback Callback function.\n   * */\n  extend(callback) {\n    setImmediate(callback);\n  }\n  /**\n   * \n   * Used to submit an application.\n   * @param {String} applicationClass This is the propertyName of the application on the domain object. It is used to retrieve the collection to store the application.\n   * @param {Array} templates This is used to fetch embeddable html templates that have been mapped in ExternalApplication.MAP.\n   * @param {Array} extensions These are additional html files to include in the final template. i.e [['HTML_TEMPLATE_NAME',{optional_context}]]\n   * @param {Function} callback Callback function.\n   * */\n  register(applicationClass, templates, extensions, callback) {\n    this.context.debug(\"registering a new applicant\");\n    this.context.debug(\"applicant invoiceNumber:\" + this.context.args.invoiceNumber);\n    this.context.libs.parseObjectIds.call(this.context, this.context.args);\n    this.context.debug(\"parsed object ids\");\n    this.context.debug(\"current args:\");\n    this.context.debug(JSON.stringify(this.context.args, null, \" \"));\n    let _domain,\n      reversal = false;\n\n    this.context.async.waterfall(\n      [\n        this.context.libs.getDomain.bind(this.context),\n        (domain, fn) => {\n          this.domain = domain;\n          this.context.entityRepo.get(\n            domain.config[applicationClass],\n            { invoiceNumber: this.context.args.invoiceNumber },\n            { one: true, full: true },\n            (er, application) => {\n              if (er) return fn(er);\n              fn(null, { domain, application });\n            }\n          );\n        },\n        ({ application, domain }, fn) => {\n          _domain = domain;\n          if (application) return fn(null, { newApp: application, domain, appExists: true });\n\n          this.context.debug(\"validating form state\");\n          this.validate(er => {\n            if (er) return fn(er);\n            this.context.debug(\"extending model if necessary\");\n            this.extend(er => {\n              if (er) return fn(er);\n              this.context.debug(`creating a new application of type ${applicationClass}`);\n              this.context.entityRepo.create(domain.config[applicationClass], this.context.args, (er, newApp) => {\n                if (er)\n                  return this.context.debug(`an error occurred while creating application of type ${applicationClass} error:${er}`), fn(er);\n\n                this.context.debug(`successfully created ${applicationClass}`);\n                if (!this.context.args.personalDetails || !this.context.args.personalDetails.passport) return fn(null, { domain, newApp });\n                this.context.entityRepo.infrastructure().fileUpload.moveToPermanentSite(this.context.args.personalDetails.passport, er => {\n                  if (er)\n                    return (\n                      this.context.debug(\"an error occurred while moving passport to permanent site , reversal required\"),\n                      (reversal = { _id: newApp && newApp._id, entityName: domain.config[applicationClass] }),\n                      fn(er)\n                    );\n\n                  //populate the app.\n\n                  this.context.entityRepo.get(\n                    domain.config[applicationClass],\n                    { _id: newApp._id },\n                    { full: true, one: true },\n                    (er, _newApp) => {\n                      if (er) return fn(er);\n                      if (!_newApp)\n                        return fn(new Error(\"For some strange reason we cannot find your application. Please contact system admin\"));\n                      return fn(null, { domain, newApp: _newApp });\n                    }\n                  );\n                });\n              });\n            });\n          });\n        },\n        ({ domain, newApp, appExists }, fn) => {\n          if (appExists) return fn(null, newApp);\n          this.context.debug(`retrieving ${applicationClass} ${newApp}`);\n          this.context.debug(JSON.stringify(newApp));\n          this.context.entityRepo.get(domain.config[applicationClass], { _id: newApp._id }, { one: true, full: true }, fn);\n        },\n        (application, fn) => {\n          if (!application)\n            return (\n              this.context.debug(`failed to retrieve ${applicationClass}`),\n              fn(new Error(\"Could not find any application with that payment reference\"))\n            );\n          fn(null, application);\n        },\n        (application, fn) => {\n          this.context.debug(\"about to get templates\");\n          try {\n            Object.defineProperties(this.context.args, { $appDomain: { enumerable: false, value: this.domain } });\n          } catch (e) {}\n          this.context.async.parallel(\n            (templates || [])\n              .map(x => {\n                return _callback => {\n                  this.context.debug(`calling mapped function ${x} , value in map ${ExternalApplication.MAP[x]}`);\n                  this.context.libs[ExternalApplication.MAP[x]].call(this.context, application, _callback);\n                };\n              })\n              .concat(\n                (extensions || []).map(x => {\n                  return _callback => {\n                    this.context.debug(\"calling extension ..\");\n\n                    x.call(this.context, application, _callback);\n                  };\n                })\n              ),\n            (er, _templates) => {\n              if (er) return this.context.debug(`an error occurred during the template gathering ${er}`), fn(er);\n              return fn(\n                null,\n                _templates.reduce((sum, v) => {\n                  return sum.concat(v);\n                }, [])\n              );\n            }\n          );\n        },\n        (_templates, fn) => {\n          this.context.debug(\"got templates\");\n          //this.context.debug(_templates);\n          this.context.libs.getHtmlTemplates.call(this.context, [[\"GENERAL_STYLES\"], ..._templates], _domain._id, (er, sections) => {\n            if (er) return fn(er);\n            fn(null, { sections, styles: [] });\n          });\n        },\n        (data, fn) => {\n          this.context.libs.getHtml.call(this.context, \"SECTION_TEMPLATE\", data, _domain._id, fn);\n        }\n      ],\n      (er, html) => {\n        if (reversal) return this.context.debug(\"calling reverse method\"), ExternalApplication.reversal.call(this, reversal, er, callback);\n\n        if (er) return this.context.debug(\"an error occurred during registeration returning error\"), callback(er);\n\n        this.context.args.$nextStep.description = this.slipTitle;\n        return callback(null, { html });\n      }\n    );\n  }\n  getInfo(applicationClass, query, callback) {\n    if (Array.prototype.slice.call(arguments).length == 2) {\n      callback = query;\n      query = null;\n    }\n    this.context.entityRepo.get(this.context.args.$appDomain.config[applicationClass], query, callback);\n  }\n}\n\n//mapped partials.\nExternalApplication.MAP = {\n  PERSONAL_DETAILS: \"preparePassportAndPersonalDetails\",\n  OLEVEL_DETAILS: \"prepareOlevelDetails\",\n  JAMB_DETAILS: \"prepareJambDetails\",\n  SHOPPING_DETAILS: \"prepareAdmissionShopping\",\n  CHANGE_OF_DEGREE_DETAILS: \"prepareChangeOfDegreeDetails\",\n  EXECUTIVE_DIPLOMA_DETAILS: \"prepareExecutiveDiplomaDetails\"\n};\nExternalApplication.reversal = function({ _id, entityName }, er, callback) {\n  this.context.debug(\"reversing...\");\n\n  this.context.entityRepo.delete(entityName, { _id }, deleteError => {\n    if (!deleteError) {\n      this.context.debug(\"successfully deleted application\");\n      this.context.debug(\"checking for custom reversal\");\n      if (this.extendReversal) {\n        this.context.debug(\"has extend reversal\");\n\n        return this.extendReversal(_id, entityName, customReversalError => {\n          if (customReversalError) {\n            this.context.debug(\"Failed in custom reversal\");\n            this.context.debug(customReversalError);\n          }\n          return callback(er);\n        });\n      }\n    } else this.context.debug(deleteError);\n\n    callback(er);\n  });\n};\nexports = ExternalApplication;\n","uid":"ExternalApplication","__v":0}]
