[{"_id":{"$objectID":"5a6abc4cb0e23c31183e6fbd"},"code":"this.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n\n  let merchantConfig = this.libs.flattenByNamespace(\"remita\", domain.config);\n  this.debug(merchantConfig);\n  this.libs.confirmRemitaPayment.call(this, this.args.invoiceNumber, merchantConfig, domain, (er, status) => {\n    if (er) return callback(er);\n\n    if (!status) return callback(new Error(\"You have been unable to confirm payment has been made against \" + this.args.invoiceNumber));\n\n    this.debug('payment successfully confirmed');\n    callback(null, { _invoiceNumber: this.args.invoiceNumber });\n  });\n});\n","title":"Check RRR transaction status","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a70cb6ea5538a22fc20eac6"},"code":"//NOTE: No user should ever be issued a claim to call this processor\nthis.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n  Object.defineProperties(this.args, {\n    $appDomain: {\n      enumerable: false,\n      get: function() {\n        return domain;\n      }\n    }\n  });\n  callback(null, this.args);\n});\n","title":"Get Domain Config [NEVER ISSUE THIS CLAIM TO ANY USER]","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a969e588a272b38086448b5"},"code":"this.entityRepo.get(\"Fee\", { _id: this.args._fee }, { full: true, one: true }, (er, fee) => {\r\n    if (er) return callback(er);\r\n    //generate RRR\r\n    //if successful pass the rrr/microcopy to the next view.\r\n    if (!fee) {\r\n      return callback(new Error(\"Could not find fee\"));\r\n    }\r\n    this.debug(fee);\r\n    let _continue = er => {\r\n      this.libs.getDomain.call(this, (er, domain) => {\r\n        if (er) return callback(er);\r\n  \r\n        this.debug(domain);\r\n        let config = this.libs.flattenByNamespace(\"remita\", domain.config),\r\n          context = {\r\n            splitFee: !!fee.feePurpose.hasCommission,\r\n            merchant: Object.assign(config, {\r\n              feeAccount: this.libs.flattenByNamespace(\"feeAccount\", domain.config)\r\n            }),\r\n            data: {\r\n              feeId: fee._id,\r\n              extra: { registrationNumber: this.args.registrationNumber },\r\n              payerName: `${this.args.firstName} ${this.args.middleName} ${this.args.surname}`,\r\n              payerEmail: this.args.email,\r\n              payerPhone : this.args.telephone\r\n            },\r\n            amount: fee.fee\r\n          };\r\n        this.debug(config);\r\n        this.debug(\"x=========x\");\r\n        this.debug(context);\r\n        return this.libs.generateRemitaRRR.call(this, context, (er, { RRR } = {}) => {\r\n          if (er || !RRR)\r\n            return this.debug(\"error occurred while generating RRR\"), callback(er || new Error(\"Remita did not return RRR, please retry\"));\r\n  \r\n          let messageContext = Object.assign({}, { form: this.args._form, RRR }),\r\n            info = this.libs.APPLICATION_TYPE_TO_INFO[fee.uid] || this.libs.APPLICATION_TYPE_TO_INFO.default,\r\n            exp = /\\{(\\w+)\\}/gi,\r\n            _info = \"\" + info,\r\n            match = exp.exec(info);\r\n          while (match !== null) {\r\n            _info = _info.replace(match[0], messageContext[match[1]]);\r\n            // matched text: match[0]\r\n            // match start: match.index\r\n            // capturing group n: match[n]\r\n            match = exp.exec(info);\r\n          }\r\n  \r\n          this.entityRepo.getProcess(\r\n            {\r\n              uid: \"WEBVIEW\"\r\n            },\r\n            {\r\n              one: true\r\n            },\r\n            (er, process) => {\r\n              let warning = null;\r\n              if (er || !process)\r\n                this.debug(\"could not locate webview process\"), (warning = (process && \"Unknown Error\") || \"Couldn't locate pay now view\");\r\n              let url = encodeURIComponent(`${config.payUrl}?RRR=${RRR}&domain=${domain._id}`);\r\n              \r\n              this.libs.findElementByName(this.args.$nextStep.form.elements, \"fill\").args.disabled = true;\r\n              callback(null, {\r\n                message: warning || \"Successful\",\r\n                info:\r\n                  _info ||\r\n                  `Successfully generated Invoice Number ${RRR} , please use this invoice number to make payment at any bank branch nationwide`,\r\n                navigation: {\r\n                  pay: (!warning && `${process && process._id}|url=${url}|title=Fees`) || \"cannot pay now , retry later....\",\r\n                  fill: this.args._form\r\n                }\r\n              });\r\n            }\r\n          );\r\n        });\r\n      });\r\n    };\r\n    if (this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.uid]) {\r\n      return this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.uid].call(this, this.args.registrationNumber, fee, _continue);\r\n    }\r\n  \r\n    _continue();\r\n  });\r\n  ","title":"Generate RRR for Admission Shopping Form","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5a96a2648a272b38086448bc"},"code":"this.entityRepo.get(\"Fee\", { _id: this.args.applicationType }, { one: true, full: true }, (er, fee) => {\n  if (er) return callback(er);\n  if (!fee) return callback(new Error(\"Could not find the fee\"));\n\n  let result = { _fee: this.args.applicationType, _form: this.args._form, registrationNumber: this.args.registrationNumber },\n    domain = this.args.$appDomain;\n  //check if an invoice exists for this registrationNumber\n  this.async.parallel([\n      (fn)=>{\n      this.entityRepo.get(this.args.$appDomain.config.putmeApplicationClass,{ registrationNumber : this.args.registrationNumber },{one : true},(er,result)=>{\n          fn(er,result);\n      })},\n      (fn) =>{\n      this.entityRepo.get(\"Session\", { domain : this.args.$appDomain._id, isCurrent : true },{one : true},(er,session)=>{\n         fn(er,session);\n      });\n      }],\n      (er,result) => {\n          this.entityRepo.get(\n            domain.config.invoiceClass,\n            { \"extra.registrationNumber\": this.args.registrationNumber, feeId: this.args.applicationType },\n            { one: true },\n            (er, invoice) => {\n              if (er) return callback(er);\n              if (invoice) {\n                 \n                //invoice exists so skip to last step.\n                return this.args.$process.steps[this.args.$process.steps.length - 1].describe((er, description) => {\n                  this.args.$nextStep = description;\n                  \n                  let messageContext = Object.assign({}, { form: \"Admission Shopping\",fullName : result[0].personalDetails.surname + \" \" + result[0].personalDetails.firstName\n                  + \" \" + result[0].personalDetails.middleName, session: result[1].name, RRR: invoice.invoiceNumber }),\n                    info =`Hello [{fullName}], You have generated payment invoice for the [{session}] Admission Shopping/Advert \n                           Application with RRR [{RRR}].`;\n                  if (invoice.successful){ this.libs.findElementByName(this.args.$nextStep.form.elements, \"pay\").args.disabled = true;}else{\n                        info += ` Your payment verification in the bank failed or you may not have completed\n                           the payment in the bank. Please try again later`;\n                        this.libs.findElementByName(this.args.$nextStep.form.elements, \"fill\").args.disabled = true;\n                  }\n                    exp = /\\{(\\w+)\\}/gi,\n                    _info = \"\" + info,\n                    match = exp.exec(info);\n                  while (match !== null) {\n                    _info = _info.replace(match[0], messageContext[match[1]]);\n                    // matched text: match[0]\n                    // match start: match.index\n                    // capturing group n: match[n]\n                    match = exp.exec(info);\n                  }\n                  let url = encodeURIComponent(`${domain.config[\"remita.payUrl\"]}?RRR=${invoice.invoiceNumber}&domain=${domain._id}`);\n                  callback(null, {\n                    info: _info ||\n                      `Successfully generated Invoice Number ${invoice.invoiceNumber} , please use this invoice number to make payment at any bank branch nationwide`,\n                    navigation: {\n                      pay: `WEBVIEW|url=${url}|title=Fees`,\n                      fill: `${this.args._form}|invoiceNumber=${invoice.invoiceNumber}`\n                    }\n                  });\n                });\n              }else{\n        /*\n              if (this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.feePurpose.uid]) {\n                this.debug(\"has validation rules...\");\n                return this.libs.APPLICATION_INVOICE_GENERATION_VALIDATION[fee.feePurpose.uid].call(this, this.args, er => {\n                  if (er) return callback(er);\n                  this.debug(\"all validation rules for pass\");\n                  return callback(null, result);\n                });\n              }*/\n              \n               this.entityRepo.get(this.args.$appDomain.config.putmeApplicationClass,{registrationNumber : this.args.registrationNumber },{one :true, full :true},(er,student)=>{\n                  if(er) return callback(er);\n                  let obj = {\n                      applicationType : this.args.feePurpose\n                  };\n                   let e = this.libs.createElement.bind(this),\n                    c = this.libs.constants,\n                    required = this.libs.createRequiredValidator;\n                    this.args.surname = student.jambDetails.surname;\n                    this.args.firstName = student.jambDetails.firstName;\n                    this.args.middleName = student.jambDetails.middleName;\n                  let elements = [\n                      \n                        e(\"feePurpose\",\"Application Type\",\"\",c.ELEMENTTYPE.HIDDEN,{order : 0, type : c.INPUTTYPE.TEXT, disabled : true }),\n                        e(\"surname\",\"Surname\",\"\",c.ELEMENTTYPE.INPUT, {order : 1, type : c.INPUTTYPE.TEXT, disabled : true }),\n                        e(\"firstName\", \"First name\",\"\", c.ELEMENTTYPE.INPUT, {order : 2, type: c.INPUTTYPE.TEXT, disabled : true}),         \n                        e(\"middleName\",\"Middle name\",\"\",c.ELEMENTTYPE.INPUT, {order : 3,type : c.INPUTTYPE.TEXT, disabled : true }),\n                        e(\"registrationNumber\", \"Jamb Registration number\",\"\",c.ELEMENTTYPE.INPUT, {order : 4, type : c.INPUTTYPE.TEXT, disabled : true }),\n                        e(\"amount\", \"Amount\", \"\",c.ELEMENTTYPE.INPUT,{ order : 5, type : c.INPUTTYPE.TEXT, disabled : true}),\n                        e(\"email\", \"Email\", \"\", c.ELEMENTTYPE.INPUT, { order : 6, type : c.INPUTTYPE.EMAIL},[required()]),\n                        e(\"telephone\", \"Telephone\",\"\", c.ELEMENTTYPE.INPUT, { order : 7, type : c.INPUTTYPE.TEXT},[required(),\n                        this.libs.createRegexValidator(\"^[0-9]{11,12}$\", \"You must enter a 11-12 digit phone number\")]),\n                        e(\"_fee\",\"\",\"\",c.ELEMENTTYPE.HIDDEN,{ order : 8, type: c.INPUTTYPE.TEXT, default : this.args.applicationType}),\n                        ];\n                        this.args.$nextStep.form.elements.push(...elements);\n                return callback(null, this.args);\n               });\n              }\n            }\n          );\n        });\n});","title":"Initial Checks for generating Admission Shopping RRR","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5a96a6d78b5d910f94cd6099"},"code":"if (this.args.applicationType) {\n  this.entityRepo.aggregate(\n    \"Fee\",\n    [\n      { $match: { domain: { $objectID: this.args.$requestContext.dynamodomain } } },\n      {\n        $lookup: {\n          from: this.entityRepo.getCollectionName(\"FeePurpose\"),\n          localField: \"feePurpose\",\n          foreignField: \"_id\",\n          as: \"_fee\"\n        }\n      },\n      {\n        $unwind: \"$_fee\"\n      },\n      {\n        $match: {\n          \"_fee.uid\": this.args.applicationType,\n          \"_fee.group\": \"APPLICATION\"\n        }\n      },\n      {\n        $project: {\n          applicationType: \"$_id\",\n          amount : \"$fee\",\n          feePurpose : \"$_fee.name\",\n          _id : 0\n        }\n      }\n    ],\n    (er, fee) => {\n        if(er) return callback(er);\n        if(!fee) return callback(null,{ message : \"No record found for the application type\"});\n        //start of check\n       this.libs.findElementByName(this.args.$description.steps[0].form.elements, \"applicationType\").args.disabled = true;\n       return callback(null, Object.assign({},this.args,fee[0]));\n    });\n} else setImmediate(callback);","title":"Prepare admission shopping","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5a96bbe4857b4114a089d991"},"code":"setImmediate(callback, null, (Object.keys(this.args).length && this.args) || null);\n","title":"Prepare Admission Shopping Form","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5a96bcc7857b4114a089d999"},"code":"let obj = {\n    invoiceNumber : this.args.invoiceNumber,\n    registrationNumber : this.args.registrationNumber,\n    personalDetails : {\n        firstName : this.args.personalDetails.firstName,\n        surname : this.args.personalDetails.surname,\n        middleName : this.args.personalDetails.middleName,\n        passport : this.args.passport,\n        gender : this.args.personalDetails.gender,\n        state : this.args.personalDetails.state,\n        lga : this.args.personalDetails.localGovt,\n        contactAddress : this.args.personalDetails.mailingAddress,\n        email : this.args.personalDetails.email,\n        mobileNumber : this.args.personalDetails.mobile,\n        jambScore : this.args.jambDetails.totalScore,\n        department : this.args.resultDetail.department,\n        screeningScore : this.args.screeningScore,\n    },\n    shoppingDetails : {\n        faculty : this.args.shoppingDetails.faculty.$objectID,\n        department : this.args.shoppingDetails.facultyOption.department,\n        areaOfSpecialization : this.args.shoppingDetails.facultyOption.areaOfSpecialization\n    }\n    \n};\nfor(let key in this.args){\n    delete this.args[key];\n}\nthis.debug(obj);\nObject.assign(this.args,obj);\ncallback(null,this.args);","title":"Admission Shopping Form","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5a98fe75b49aa340848f3d39"},"code":"this.debug(this.args);\nthis.async.waterfall([\n    (fn)=>{\n        this.libs.getDomain.call(this,(er,domain)=>{\n            fn(er,domain);\n        });\n    },\n    (domain,fn) =>{\n        this.entityRepo.aggregate(\"Faculty\",[{\n            $lookup :{\n                from : \"departments\",\n                localField : \"_id\",\n                foreignField : \"faculty\",\n                as : \"department\"\n            }\n        },{\n            $project : {\n                \"_id\" : 1,\n                \"name\" : 1,\n                \"department\" : 1\n            }\n        }],(er,facs) =>{\n            if(er) return fn(er);\n            if(!facs.length) return fn(null,facs);\n            fn(null,facs);\n        });\n    }],\n    (er,facs) =>{\n        setImmediate(callback,null,\n        facs.map(x=>(\n            {\n                id:x._id,\n                displayLabel:x.name,\n                elements:[\n                        this.libs.createElement(\"department\", \"Department shopping into\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                        items: ((typeof(x.department) !='undefined' && x.department) ? x.department.map(d => {\n                          return {\n                            id: d._id,\n                            displayLabel: d.name,\n                            elements: [\n                              this.libs.createElement(\"areaOfSpecialization\", \"Area of Specialization\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                                items: ((typeof(d.areasOfSpecialization) != 'undefined' && d.areasOfSpecialization) ? d.areasOfSpecialization.map(c => {\n                                  return {\n                                    id: c._id,\n                                    displayLabel: c.name,\n                                    elements: []\n                                  };\n                                }):[])\n                              })\n                            ]\n                          };\n                        }):[])\n                  },[this.libs.createRequiredValidator()])\n                ]\n        })));\n    });","title":"Get Faculty and Department Set","uid":"FACULTY_AND_DEPT","requiresIdentity":false,"standalone":true,"__v":0},{"_id":{"$objectID":"5a9a80f0a64d232220e3b58f"},"code":"let application = new this.libs.ExternalApplication(this);\napplication.register(\n  \"admissionShopping\",\n  [\"SHOPPING_DETAILS\"],\n  [\n    function(application, cb) {\n      setImmediate(cb, null, [[\"TABLE_STYLES\"]]);\n    }\n  ],\n  callback\n);\n","title":"Submit Admission Shopping Form","requiresIdentity":true,"standalone":false,"__v":0,"uid":"SUBMIT_ADMISSION_SHOPPING"},{"_id":{"$objectID":"5a9d091095d1293b84be9180"},"code":"this.libs.confirmInvoiceIsFor.call(this, this.args.invoiceNumber, \"SHOPPING\", er => {\n  if (er) return callback(er);\n\n  return this.libs.skipApplicationIfAllowed.call(\n    this,\n    this.args.$appDomain.config.admissionShopping,\n    \"SUBMIT_ADMISSION_SHOPPING\",\n    callback\n  );\n});\n","title":"Check if Admission Shopping Exists","requiresIdentity":true,"standalone":false,"__v":0},{"_id":{"$objectID":"5a9d091095d1293b84be9181"},"code":"this.async.waterfall([\n    (fn) =>{\n        this.entityRepo.get(this.args.$appDomain.config.invoiceClass,{invoiceNumber : this.args.invoiceNumber},{one : true},(er,invoice)=>{\n            if(er) return fn(er);\n            if(!invoice) return fn(new Error(\"no record found\"));\n            fn(null,invoice);\n        });\n    },\n    (invoice,fn)=>{\n        this.entityRepo.get(this.args.$appDomain.config.putmeApplicationClass,{registrationNumber : invoice.extra.registrationNumber },{one :true, full :true},(er,student)=>{\n          if(er) return fn(er);\n          if(!student) return fn(new Error(\"No record found for the reg number: \" + invoice.extra.registrationNumber));\n        fn(null,student);\n        });\n    },\n    (student,fn)=>{\n        this.entityRepo.infrastructure().fileUpload.readFile(student.personalDetails.passport,null, (er,data, description) => {\n            if (er) return fn(er);\n            if (!data) return fn(new Error(\"Image not found\"));\n            let passport = `data:${description.mime};base64,${data.toString(\"base64\")}`;\n            fn(null,passport,student);\n        })\n    }],\n    (er,passport,  result)=>{\n        this.async.parallel([\n            this.entityRepo.get.bind(null, \"State\", { _id : result.personalDetails.state }, { one : true }),\n            this.entityRepo.get.bind(null, \"Department\", { _id : result.jambDetails.department }, { one :true }),\n            this.entityRepo.get.bind(null, \"Gender\", { _id : result.personalDetails.gender}, { one : true }),\n            this.entityRepo.get.bind(null, this.args.$appDomain.config.putmeResultClass,{regNumb : result.registrationNumber},{ one : true})\n        ],\n        (er,data)=>{\n            if(er) return callback(er);    \n            \n            let result_lga = data[0].lgas.find(x=>{ return x._id.toString() == result.personalDetails.lga.toString()});\n                \n            let passport_id = result.personalDetails.passport;\n            result.personalDetails.state = data[0];\n            result.personalDetails.gender = data[2];\n            result.personalDetails.lga = result_lga;\n            result.personalDetails.passport = passport;\n            let jambDetails = {\n                department : data[1], \n                jambScore : result.jambDetails.totalScore, \n                registrationNumber : result.registrationNumber,\n                screeningScore : data[3].totalScore\n            },\n           student = result.personalDetails; \n           student.passport_id = passport_id;\n            \n              return ui.call(this,jambDetails, student, (er, ui) => {\n                let disabled = [\"firstName\", \"middlename\", \"state\", \"surname\", \"gender\",\n                \"state\",\"localGovt\",\"mobile\",\"contactAddress\",\"email\",\"registrationNumber\",\"department\",\"utmeScore\",\"screeningScore\"];\n                this.libs.visitElements(ui, disable.bind(this, disabled));\n                setImmediate(callback,er,result, ui);\n            });\n        });\n        \n    function disable(list, element) {\n        if (list && list.length && list.indexOf(element.name) !== -1) element.args = Object.assign(element.args || {}, { disabled: true });\n    }\n    \n        \n    function ui(jambDetails,student,fn) {\n      let e = this.libs.createElement.bind(this),\n        c = this.constants,\n        elem = (this.args.$nextStep && this.args.$nextStep.form.elements) || [];\n        elem.length = 0;\n        elem.push(Object.assign({ order: 1 }, e(\"personalDetails\", \"Personal Details\", \"\", c.ELEMENTTYPE.SECTION, {})));\n          elem[0].args.elements = [\n            e(\"\",\"Passport\",\"\",c.ELEMENTTYPE.IMAGE,{ type : c.IMAGETYPE.DATA, config : { data : student.passport}}),\n            e(\"firstName\", \"First Name\", \"\", c.ELEMENTTYPE.INPUT,{ default : student.firstName}),\n            e(\"middlename\", \"Middlename\", \"\", c.ELEMENTTYPE.INPUT, { default : student.middleName}),\n            e(\"surname\", \"Surname\", \"\", c.ELEMENTTYPE.INPUT,{default : student.surname}),\n            e(\"gender\", \"Gender\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id :student.gender._id, displayLabel : student.gender.name }]}),\n            e(\"state\", \"State\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id : student.state._id, displayLabel : student.state.name }]}),\n            e(\"localGovt\", \"LGA\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id :  student.lga._id, displayLabel : student.lga.name }]}),\n            e(\"mobile\", \"Mobile Number\", \"\", c.ELEMENTTYPE.INPUT,{default : student.mobile}),\n            e(\"contactAddress\", \"Contact Address\", \"\", c.ELEMENTTYPE.INPUT, { default :  student.mailingAddress}),\n            e(\"email\", \"Email\", \"\", c.ELEMENTTYPE.INPUT, { default :  student.email})\n            ];\n            \n        elem.push(Object.assign({order : 2 },e(\"resultDetail\",\"Exam Details\",\"\",c.ELEMENTTYPE.SECTION,{})));\n        elem[1].args.elements = [\n            e(\"registrationNumber\", \"Jamb Registration Number\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.registrationNumber}),\n            e(\"department\", \"Department\", \"\", c.ELEMENTTYPE.SELECTSET, { items : [{ id : jambDetails.department._id , displayDisplay : jambDetails.department.name }] }),\n            e(\"utmeScore\", \"Jamb Score\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.jambScore}),\n            e(\"screeningScore\", \"PUTME Screening Score\", \"\", c.ELEMENTTYPE.INPUT, { default :  jambDetails.screeningScore }),\n          ];\n        elem.push(Object.assign({order : 3 },e(\"shoppingDetails\",\"Shopping Details\",\"\",c.ELEMENTTYPE.SECTION,{})));\n        elem[2].args.elements = [\n            e(\"faculty\", \"Faculty Shopping into\", \"\", this.constants.ELEMENTTYPE.SELECTSET, {\n                mode: c.ENTRYMODE.OBJECTID,\n                processor: \"FACULTY_AND_DEPT\",\n                path: \"facultyOption\"\n          },[this.libs.createRequiredValidator()])\n        ];\n          elem.push(e(\"passport\",\"\",\"\",c.ELEMENTTYPE.HIDDEN,{ default : student.passport_id}));\n          elem.push(e(\"invoiceNumber\", \"\", \"\", c.ELEMENTTYPE.HIDDEN,{default : this.args.invoiceNumber}));\n          elem.push(e(\"screeningScore\", \"\", \"\", c.ELEMENTTYPE.HIDDEN,{default : jambDetails.screeningScore}));\n          setImmediate(fn, null, this.args.$nextStep || elem);\n    }\n});","title":"Inject Admission shopping Ui","requiresIdentity":true,"standalone":false,"__v":0}]
