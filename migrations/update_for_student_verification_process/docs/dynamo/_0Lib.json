[{"_id":{"$objectID":"59b2a6e82f0eb326586e9f09"},"code":"//check if this student account has already been created.\n//if it has , return the interim username and password.\n//if it hasnt create the student account with an interim username and password.\nfunction verify({ studentEntity, studentEntityKindClass, studentRole, domainUID, resolveEntityKind, extendNewStudent }, callback) {\n  const rollback = er => {\n    let tasks = [];\n    if (created.user) {\n      tasks.push(inf.userManager.deleteUser.bind(inf.userManager, created.user));\n    }\n    if (created.student) {\n      tasks.push(this.entityRepo.delete.bind(null, studentEntity, created.user));\n    }\n    if (!tasks.length) return callback(er);\n\n    return this.async.parallel(tasks, () => {\n      callback(er);\n    });\n  };\n\n  const generateUsername = (details, domain, cb) => {\n    let username = this.args.option.refNo || this.args.option.regNo;\n    if(!username) callback(new Error(\"Entry or Registration number is not set\"));\n    inf.userManager.getUser(username, domain, (er, st) => {\n      if (er) return cb(er);\n      if (st && st.length) return generateUsername(details, domain, cb);\n      if (!st || !st.length) return cb(null, username);\n    });\n  };\n  let inf = this.entityRepo.infrastructure(),\n    created = {},\n    entity = this.args,\n    refNo = entity.option.refNo || entity.option.regNo,\n    initialQuery = { studentType: entity.studentType, refNo };\n  this.debug(initialQuery);\n  if (!inf || !inf.userManager) return callback(new Error(\"Infrastructure is not properly set up\"));\n\n  this.async.waterfall(\n    [\n      this.entityRepo.get.bind(null, studentEntity, initialQuery),\n      (student, fn) => {\n        if (!student.length) {\n          //student does not exist so create a new one.\n          this.async.waterfall(\n            [\n              resolveEntityKind ? resolveEntityKind() : this.entityRepo.get.bind(null, studentEntityKindClass, { refNo }),\n              (ticket, _fn) => {\n                if (!ticket.length) return _fn(new Error(\"Could not locate student\"));\n                setImmediate(_fn, null, ticket[0]);\n              },\n              (ticket, _fn) => {\n                //create new student.\n                let programmeDetails = ticket.programmeDetails,\n                  personalDetails = ticket;\n                delete personalDetails.programmeDetails;\n                delete programmeDetails._id;\n                delete personalDetails._id;\n\n                let new_student = Object.assign(\n                  {},\n                  { personalDetails, programmeDetails, refNo, studentType: initialQuery.studentType },\n                  extendNewStudent ? extendNewStudent() : {}\n                );\n                //generate interim password.\n                new_student.interim = entity.option.refNo || entity.option.regNo;\n                //remove _id\n                this.debug(new_student);\n\n                this.entityRepo.create(studentEntity, new_student, (er, result) => {\n                  this.debug(\"after creating student\");\n                  if (er) return this.debug(er), _fn(er);\n                  return (created.student = result._id), this.debug(result), _fn(null, result);\n                });\n              },\n              (new_student, _fn) => {\n                //get domain\n                inf.userManager.getDomains({ uid: domainUID }, (er, dms) => {\n                  if (er) return _fn(er);\n                  if (!dms.length) return _fn(new Error(\"cannot find requested domain\"));\n                  return (new_student.domain = dms[0]._id), _fn(null, new_student);\n                });\n              },\n              (new_student, _fn) => {\n                //get role\n                inf.userManager.getRoles({ name: studentRole }, (er, role) => {\n                  if (er) return _fn(er);\n                  if (!role.length) return _fn(new Error(\"cannot find requested role\"));\n                  return (new_student.role = role[0]._id), _fn(null, new_student);\n                });\n              },\n              (new_student, _fn) => {\n                this.debug(\"----------\");\n                this.debug(new_student);\n                this.debug(\"----------\");\n                // let username = new_student.personalDetails.firstName.substring(0,2) + new_student.personalDetails.surname+(Math.floor(Math.random() * 10));\n\n                generateUsername(new_student.personalDetails, new_student.domain, (er, username) => {\n                  if (er) return _fn(er);\n\n                  //create user.\n                  inf.userManager.register(\n                    { username, password: new_student.interim, domain: new_student.domain, roles: [new_student.role] },\n                    (er, user) => {\n                      if (er) return _fn(er);\n                      this.debug(\"-----registered user-----\");\n                      this.debug(user);\n                      this.debug(\"\\t----------------\");\n                      created.user = user._id;\n                      this.entityRepo.update(studentEntity, { _id: new_student._id, userId: user._id }, er => {\n                        if (er) return _fn(er);\n                        new_student.userId = user._id;\n                        _fn(null, new_student);\n                      });\n                    }\n                  );\n                });\n              }\n            ],\n            (er, new_student) => {\n              if (er) return fn(er);\n              fn(null, new_student);\n            }\n          );\n          return;\n        }\n        if (student[0].updatedProfile) return setImmediate(fn, new Error(\"Student has updated his/her profile\"));\n        //student already exists so return student.\n        setImmediate(fn, null, student[0]);\n      },\n      (student, fn) => {\n        this.debug(\"found student----x\");\n        this.debug(student);\n        this.debug(\"--------x\");\n        //get students username and password.\n        inf.userManager.getUserById(student.userId, (er, user) => {\n          if (er) return fn(er);\n          fn(null, student, user);\n        });\n      }\n    ],\n    (er, student, user) => {\n      if (er) {\n        return rollback(er);\n      }\n      this.debug(\"ran successfully\");\n      callback(null, user.username);\n    //   callback(null, `Use these credentials to login to your account Username:${user.username},Password:${student.interim}`);\n    }\n  );\n}\n\nexports = verify;\n","uid":"verifyStudent","__v":0}]
