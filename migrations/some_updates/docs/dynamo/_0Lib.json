[{"_id":{"$objectID":"5af5b2843a1aeb3d08907168"},"code":"exports = function(isHod, callback) {\r\n  this.args.depth = true;\r\n  this.$checkDomain = true;\r\n  let isStripped = !(this.args.query && this.args.query.department);\r\n  const objectId = prop => {\r\n    if (this.args.query && this.args.query[prop])\r\n      this.args.query[prop] = {\r\n        isObjectID: true,\r\n        value: this.args.query[prop]\r\n      };\r\n  };\r\n  if (isStripped) {\r\n    if (isHod) {\r\n      if (!this.args.query)\r\n        return callback(null, {\r\n          items: [],\r\n          total: 0\r\n        });\r\n\r\n      this.entityRepo.get(\r\n        \"Staff\",\r\n        {\r\n          userId: this.args.$user._id,\r\n          domain: this.args.$domain._id\r\n        },\r\n        {\r\n          one: true\r\n        },\r\n        (er, staff) => {\r\n          if (er) return callback(er);\r\n          if (!staff) return callback(new Error(\"You have to be a staff to perform this operation\"));\r\n          else {\r\n            this.args.query.department = staff.department.toString();\r\n            this.args.query.lecturer = staff._id.toString();\r\n            let extra = {\r\n              semester: this.args.query.semester,\r\n              session: this.args.query.session,\r\n              department: this.args.query.department\r\n            };\r\n\r\n            this.debug(this.args.query);\r\n\r\n            let query = {\r\n              $match: {\r\n                department: {\r\n                  $objectID: this.args.query.department\r\n                },\r\n                semester: {\r\n                  $objectID: this.args.query.semester\r\n                },\r\n                session: {\r\n                  $objectID: this.args.query.session\r\n                },\r\n                domain: {\r\n                  $objectID: this.args.$domain._id\r\n                }\r\n              }\r\n            };\r\n            if (this.args._id)\r\n              query.$match._id = {\r\n                $gt: this.args._id\r\n              };\r\n            this.entityRepo.aggregate(\r\n              \"CourseAssignment\",\r\n              [\r\n                query,\r\n                {\r\n                  $lookup: {\r\n                    from: this.entityRepo.getCollectionName(\"Course\"),\r\n                    localField: \"course\",\r\n                    foreignField: \"_id\",\r\n                    as: \"_course\"\r\n                  }\r\n                },\r\n                {\r\n                  $unwind: {\r\n                    path: \"$_course\",\r\n                    preserveNullAndEmptyArrays: true\r\n                  }\r\n                },\r\n                {\r\n                  $lookup: {\r\n                    from: this.entityRepo.getCollectionName(\"CourseLecturerAssignment\"),\r\n                    localField: \"_id\",\r\n                    foreignField: \"courseAssignmentId\",\r\n                    as: \"_lecturerAssignment\"\r\n                  }\r\n                },\r\n                {\r\n                  $match: {\r\n                    \"_lecturerAssignment.hod\": {\r\n                      $objectID: this.args.query.lecturer\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  $lookup: {\r\n                    from: this.entityRepo.getCollectionName(this.args.$domain.config.resultClass),\r\n                    localField: \"_id\",\r\n                    foreignField: \"courseAssignmentId\",\r\n                    as: \"_result\"\r\n                  }\r\n                },\r\n                //   {\r\n                //     $match: {\r\n                //       \"_result.approved\": {\r\n                //         $in: [false, null]\r\n                //       }\r\n                //     }\r\n                //   },\r\n                {\r\n                  $project: {\r\n                    _id: 1,\r\n                    courseName: \"$_course.name\",\r\n                    courseUnit: 1,\r\n                    courseCode: \"$_course.code\",\r\n                    courseId: \"$_course._id\",\r\n                    lecturer: \"$_lecturerAssignment.lecturer\",\r\n                    courseLecturerAssignmentId: \"$_lecturerAssignment._id\",\r\n                    resultId: \"$_result._id\",\r\n                    resultStatus: \"$_result.approved\",\r\n                    extra: extra\r\n                  }\r\n                },\r\n                {\r\n                  $sort: {\r\n                    _id: -1\r\n                  }\r\n                },\r\n                {\r\n                  $limit: this.args.count\r\n                }\r\n              ],\r\n              (error, assignments) => {\r\n                this.debug(assignments);\r\n                if (error || (assignments && assignments.length < 1))\r\n                  callback(new Error(\"Could not find course assignment for the criteria\"));\r\n                else {\r\n                  for (let i = 0; i < assignments.length; i++) {\r\n                    if (assignments[i].resultStatus.includes(false)) {\r\n                      assignments[i] = Object.assign(\r\n                        {\r\n                          status: \"Not all results have been approved\",\r\n                          approved: false\r\n                        },\r\n                        assignments[i]\r\n                      );\r\n                    } else {\r\n                      assignments[i] = Object.assign(\r\n                        {\r\n                          status: \"Approved All\",\r\n                          approved: true\r\n                        },\r\n                        assignments[i]\r\n                      );\r\n                    }\r\n                  }\r\n                  this.debug(\"finally ======================\");\r\n                  this.debug(assignments);\r\n                  callback(null, {\r\n                    items: assignments,\r\n                    total: assignments.length\r\n                  });\r\n                }\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      if (!this.args.query)\r\n        return callback(null, {\r\n          items: [],\r\n          total: 0\r\n        });\r\n\r\n      this.entityRepo.get(\r\n        \"Staff\",\r\n        {\r\n          userId: this.args.$user._id,\r\n          domain: this.args.$domain._id\r\n        },\r\n        {\r\n          one: true\r\n        },\r\n        (er, staff) => {\r\n          if (er) return callback(er);\r\n          if (!staff) return callback(new Error(\"You have to be a staff to perform this operation\"));\r\n          else {\r\n            this.args.query.department = staff.department.toString();\r\n            this.args.query.lecturer = staff._id.toString();\r\n            let extra = {\r\n              semester: this.args.query.semester,\r\n              session: this.args.query.session,\r\n              department: this.args.query.department\r\n            };\r\n\r\n            this.debug(this.args.query);\r\n\r\n            let query = {\r\n              $match: {\r\n                department: {\r\n                  $objectID: this.args.query.department\r\n                },\r\n                semester: {\r\n                  $objectID: this.args.query.semester\r\n                },\r\n                session: {\r\n                  $objectID: this.args.query.session\r\n                },\r\n                domain: {\r\n                  $objectID: this.args.$domain._id\r\n                }\r\n              }\r\n            };\r\n            if (this.args._id)\r\n              query.$match._id = {\r\n                $gt: this.args._id\r\n              };\r\n            this.entityRepo.aggregate(\r\n              \"CourseAssignment\",\r\n              [\r\n                query,\r\n                {\r\n                  $lookup: {\r\n                    from: this.entityRepo.getCollectionName(\"Course\"),\r\n                    localField: \"course\",\r\n                    foreignField: \"_id\",\r\n                    as: \"_course\"\r\n                  }\r\n                },\r\n                {\r\n                  $unwind: {\r\n                    path: \"$_course\",\r\n                    preserveNullAndEmptyArrays: true\r\n                  }\r\n                },\r\n                {\r\n                  $lookup: {\r\n                    from: this.entityRepo.getCollectionName(\"CourseLecturerAssignment\"),\r\n                    localField: \"_id\",\r\n                    foreignField: \"courseAssignmentId\",\r\n                    as: \"_lecturerAssignment\"\r\n                  }\r\n                },\r\n                {\r\n                  $match: {\r\n                    \"_lecturerAssignment.lecturer\": {\r\n                      $objectID: this.args.query.lecturer\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  $lookup: {\r\n                    from: this.entityRepo.getCollectionName(this.args.$domain.config.resultClass),\r\n                    localField: \"_id\",\r\n                    foreignField: \"courseAssignmentId\",\r\n                    as: \"_result\"\r\n                  }\r\n                },\r\n                {\r\n                  $project: {\r\n                    _id: 1,\r\n                    courseName: \"$_course.name\",\r\n                    courseUnit: 1,\r\n                    courseCode: \"$_course.code\",\r\n                    courseId: \"$_course._id\",\r\n                    lecturer: \"$_lecturerAssignment.lecturer\",\r\n                    courseLecturerAssignmentId: \"$_lecturerAssignment._id\",\r\n                    resultId: \"$_result._id\",\r\n                    extra: extra\r\n                  }\r\n                },\r\n                {\r\n                  $sort: {\r\n                    _id: -1\r\n                  }\r\n                },\r\n                {\r\n                  $limit: this.args.count\r\n                }\r\n              ],\r\n              (error, assignments) => {\r\n                this.debug(assignments);\r\n                if (error || (assignments && assignments.length < 1))\r\n                  callback(new Error(\"Could not find course assignment for the criteria\"));\r\n                else {\r\n                  for (let i = 0; i < assignments.length; i++) {\r\n                    if (assignments[i].resultId.length > 0) {\r\n                      assignments[i] = Object.assign(\r\n                        {\r\n                          upload: \"Uploaded\"\r\n                        },\r\n                        assignments[i]\r\n                      );\r\n                    } else {\r\n                      assignments[i] = Object.assign(\r\n                        {\r\n                          upload: \"Not Uploaded\"\r\n                        },\r\n                        assignments[i]\r\n                      );\r\n                    }\r\n                  }\r\n                  this.debug(\"finally ======================\");\r\n                  this.debug(assignments);\r\n                  callback(null, {\r\n                    items: assignments,\r\n                    total: assignments.length\r\n                  });\r\n                }\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    }\r\n  } else {\r\n    if (!this.args.query || !this.args.query.studentType)\r\n      return callback(null, {\r\n        items: [],\r\n        total: 0\r\n      });\r\n\r\n    this.debug(this.args);\r\n\r\n    let extra = {\r\n      department: this.args.query.department,\r\n      semester: this.args.query.semester,\r\n      session: this.args.query.session,\r\n      studentType: this.args.query.studentType,\r\n      campus: this.args.query.campus\r\n    };\r\n\r\n    if (this.args.query && this.args.query.campus) delete this.args.query.campus;\r\n\r\n    this.debug(this.args.query);\r\n\r\n    this.entityRepo.get(\r\n      \"Staff\",\r\n      {\r\n        userId: this.args.$user._id,\r\n        domain: this.args.$domain._id\r\n      },\r\n      {\r\n        one: true\r\n      },\r\n      (error, staff) => {\r\n        if (error || !staff) callback(new Error(\"You have to be a staff in this domain to perform this action\"));\r\n        else {\r\n          let query = {\r\n            $match: {\r\n              department: {\r\n                $objectID: this.args.query.department\r\n              },\r\n              semester: {\r\n                $objectID: this.args.query.semester\r\n              },\r\n              session: {\r\n                $objectID: this.args.query.session\r\n              },\r\n              studentType: {\r\n                $objectID: this.args.query.studentType\r\n              },\r\n              domain: {\r\n                $objectID: this.args.$domain._id\r\n              }\r\n            }\r\n          };\r\n          if (this.args._id)\r\n            query.$match._id = {\r\n              $gt: this.args._id\r\n            };\r\n          this.entityRepo.aggregate(\r\n            \"CourseAssignment\",\r\n            [\r\n              query,\r\n              {\r\n                $lookup: {\r\n                  from: this.entityRepo.getCollectionName(\"CourseType\"),\r\n                  localField: \"courseType\",\r\n                  foreignField: \"_id\",\r\n                  as: \"_courseType\"\r\n                }\r\n              },\r\n              {\r\n                $unwind: {\r\n                  path: \"$_courseType\",\r\n                  preserveNullAndEmptyArrays: true\r\n                }\r\n              },\r\n              {\r\n                $lookup: {\r\n                  from: this.entityRepo.getCollectionName(\"Course\"),\r\n                  localField: \"course\",\r\n                  foreignField: \"_id\",\r\n                  as: \"_course\"\r\n                }\r\n              },\r\n              {\r\n                $unwind: {\r\n                  path: \"$_course\",\r\n                  preserveNullAndEmptyArrays: true\r\n                }\r\n              },\r\n              {\r\n                $lookup: {\r\n                  from: this.entityRepo.getCollectionName(\"CourseLecturerAssignment\"),\r\n                  localField: \"_id\",\r\n                  foreignField: \"courseAssignmentId\",\r\n                  as: \"_lecturerAssignment\"\r\n                }\r\n              },\r\n              {\r\n                $unwind: {\r\n                  path: \"$_lecturerAssignment\",\r\n                  preserveNullAndEmptyArrays: true\r\n                }\r\n              },\r\n              {\r\n                $project: {\r\n                  _id: 1,\r\n                  courseType: \"$_courseType.name\",\r\n                  courseName: \"$_course.name\",\r\n                  courseUnit: 1,\r\n                  courseCode: \"$_course.code\",\r\n                  courseId: \"$_course._id\",\r\n                  lecturer: \"$_lecturerAssignment.lecturer\",\r\n                  hod: \"$_lecturerAssignment.hod\",\r\n                  courseLecturerAssignmentId: \"$_lecturerAssignment._id\"\r\n                }\r\n              },\r\n              {\r\n                $sort: {\r\n                  _id: -1\r\n                }\r\n              },\r\n              {\r\n                $limit: this.args.count\r\n              }\r\n            ],\r\n            (error, assignments) => {\r\n              this.debug(assignments);\r\n              if (error || (assignments && assignments.length < 1))\r\n                callback(new Error(\"Could not find course assignment for the criteria\"));\r\n              else {\r\n                for (let i = 0; i < assignments.length; i++) {\r\n                  assignments[i] = Object.assign(\r\n                    {\r\n                      assigned:\r\n                        !assignments[i].lecturer && !assignments[i].hod\r\n                          ? \"Not Assigned\"\r\n                          : assignments[i].lecturer && !assignments[i].hod ? \"Not Assigned to HOD\" : \"Assigned\"\r\n                    },\r\n                    extra,\r\n                    assignments[i]\r\n                  );\r\n                }\r\n                callback(null, {\r\n                  items: assignments,\r\n                  total: assignments.length\r\n                });\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n","uid":"courseLecturerAssignment","__v":0}]
