[{"_id":{"$objectID":"5a71e442056cd52fdc017de7"},"code":"exports = function(application, fn) {\n  setImmediate(fn, null, [\n    [\n      \"OLEVEL_DETAILS\",\n      {\n        sittings: application.oLevel.sittings.map(sitting => {\n          return {\n            details: [[\"O'Level Type\", sitting.type], [\"Exam Number\", sitting.examNumber], [\"Year\", sitting.year.getFullYear()]],\n            subjects: sitting.subjects\n          };\n        })\n      }\n    ]\n  ]);\n};\n","uid":"prepareOlevelDetails","__v":0},{"_id":{"$objectID":"5a7302ee14d02c3ab879c634"},"code":"exports = {\n  POST_UTME_SCREENING: function(args, callback) {\n    //check all the jamb blah blah\n    //added some information to test merging\n    this.debug(\"checking jamb info\");\n    this.debug(\"app domain:\" + this.args.$appDomain._id);\n    const validators = {\n      minScore: function(info, config) {\n        if (!info.totalScore || info.totalScore < config.min)\n          return `You scored below the minimum required score stipulated by the University (${config.min})`;\n      },\n      regex: function(info, config) {\n        return (info[config.property] && new RegExp(config.regex).test(info[config.property])) || `Your ${config.property} is invalid`;\n      }\n    };\n    this.entityRepo.get(\n      \"JambList\",\n      { regNumb: args.registrationNumber, domain: this.args.$appDomain._id },\n      { one: true },\n      (er, jambInfo) => {\n        if (er) return callback(er);\n        if (!jambInfo) return callback(new Error(\"Sorry we cannot find your information from Jamb\"));\n\n        this.debug(\"successfully retrieved jamb info\");\n        this.debug(jambInfo);\n        this.debug(this.args.$appDomain.config);\n        if (!this.args.$appDomain.config.jambValidation) return callback();\n        let jambValidation = JSON.parse(this.args.$appDomain.config.jambValidation);\n        this.async.parallel(\n          jambValidation.map(v => {\n            return fn => {\n              let validator = validators[v.name];\n              if (!validator) return fn(new Error(\"Unknown Validator\"));\n              let result = validator(jambInfo, v);\n              if (typeof result === \"string\") return fn(new Error(result));\n              fn();\n            };\n          }),\n          callback\n        );\n      }\n    );\n  }\n};\n","uid":"APPLICATION_INVOICE_GENERATION_VALIDATION","__v":0},{"_id":{"$objectID":"5a76c89516fdef369067970e"},"code":"exports = function(fn) {\n  let index = 0,\n    e = (...rest) => {\n      index = index + 1;\n      return Object.assign({ order: index }, this.libs.createElement.apply(this, rest));\n    },\n    c = this.constants,\n    required = this.libs.createRequiredValidator,\n    nextOfKin = this.libs.createElement(\"nextOfKin\", \"Next of Kin\", \"\", c.ELEMENTTYPE.SECTION, {\n      elements: [\n        e(\"firstName\", \"First Name\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT }, [required()]),\n        e(\"middleName\", \"MiddleName\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT }),\n        e(\"surname\", \"Surname\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT }, [required()]),\n        e(\"address\", \"Address\", \"\", c.ELEMENTTYPE.INPUT, { type: c.INPUTTYPE.TEXT }, [required()]),\n        e(\n          \"relationship\",\n          \"Relationship\",\n          \"\",\n          c.ELEMENTTYPE.SELECT,\n          {\n            type: \"PROCESSOR\",\n            mode: c.ENTRYMODE.OBJECTID,\n            config: {\n              value: \"GET_RELATIONSHIPS\"\n            }\n          },\n          [required()]\n        )\n      ]\n    });\n\n  setImmediate(fn, null, [nextOfKin]);\n};\n","uid":"getNextOfKinDetailsUI","__v":0},{"_id":{"$objectID":"5a76f93fc097c10e247e8e04"},"code":"exports = function(application, _fn) {\n  let d = application.jambDetails;\n  this.debug(JSON.stringify(d,null,\" \"))\n  setImmediate(_fn, null, [\n    [\n      \"JAMB_DETAILS\",\n      {\n        details: [[\"Faculty\", d.department.faculty.name], [\"Department\", d.department.name], [\"Registration Number\", d.regNumb]],\n        subjectHeaders:[\"EXAMINATION SUBJECTS\"],\n        subjects: [\"ENGLISH\", d.subj2, d.subj3, d.subj4]\n      }\n    ]\n  ]);\n};\n","uid":"prepareJambDetails","__v":0},{"_id":{"$objectID":"5a79684ef51fb820104401e0"},"code":"exports = function(appClass, finalProcessor, callback) {\n  this.debug(`appClass:${appClass}`);\n  this.entityRepo.get(appClass, { invoiceNumber: this.args.invoiceNumber }, { one: true }, (er, exists) => {\n    if (er) return callback(er);\n\n    if (exists) {\n      this.debug(\"an application already exists\");\n      //dont run any other processors\n      this.skip.$all = true;\n      //describe the last process to the client\n      this.args.$process.steps[this.args.$process.steps.length - 1].describe((er, description) => {\n        if (er) return callback(er);\n        //return that description as the next step\n        this.args.$nextStep = description;\n        //get the processor that would normally provide info to the last step\n        this.entityRepo.getProcessor({ uid: finalProcessor }, { one: true }, (er, proc) => {\n          if (er) return callback(er);\n          if (!proc) return callback(new Error(\"Setup incomplete\"));\n          //run that processor.\n          proc.process.call(this, {}, callback);\n        });\n      });\n\n      return;\n    }\n    this.debug(\"fresh applicant\");\n    return callback(null, this.args);\n  });\n};\n","uid":"skipApplicationIfAllowed","__v":0}]
