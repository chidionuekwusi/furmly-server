[{"_id":{"$objectID":"5a6abc4cb0e23c31183e6fbd"},"code":"this.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n\n  let merchantConfig = this.libs.flattenByNamespace(\"remita\", domain.config);\n  this.debug(merchantConfig);\n  this.libs.confirmRemitaPayment.call(this, this.args.invoiceNumber, merchantConfig, domain, (er, status) => {\n    if (er) return callback(er);\n\n    if (!status) return callback(new Error(\"You have been unable to confirm payment has been made against \" + this.args.invoiceNumber));\n\n    this.debug('payment successfully confirmed');\n    callback(null, { _invoiceNumber: this.args.invoiceNumber });\n  });\n});\n","title":"Check RRR transaction status","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a70cb6ea5538a22fc20eac6"},"code":"//NOTE: No user should ever be issued a claim to call this processor\nthis.libs.getDomain.call(this, (er, domain) => {\n  if (er) return callback(er);\n  Object.defineProperties(this.args, {\n    $appDomain: {\n      enumerable: false,\n      get: function() {\n        return domain;\n      }\n    }\n  });\n  callback(null, this.args);\n});\n","title":"Get Domain Config [NEVER ISSUE THIS CLAIM TO ANY USER]","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a72b60d48dda81fc8cd8f15"},"code":"setImmediate(callback, null, (Object.keys(this.args).length && this.args) || null);\n","title":"Make args initial data for a process","requiresIdentity":true,"__v":0,"standalone":true},{"_id":{"$objectID":"5a797e7f4d78641f8473f49e"},"code":"this.debug(\"confirming if invoice is for Staff Request form\");\nif (this.args.$user && Object.keys(this.args.$user).length > 0) {\n  this.debug(\"user tried to register while logged in.\");\n  callback(new Error(\"Unauthorized\"));\n} else\n  this.libs.confirmInvoiceIsFor.call(this, this.args.invoiceNumber, \"STAFF_REQUEST\", er => {\n    if (er) return callback(er);\n    this.debug('successfully confirmed invoice is for staff request');\n    this.debug('checking if skip is possible');\n    return this.libs.skipApplicationIfAllowed.call(\n      this,\n      this.args.$appDomain.config.staffRequestApplicationClass,\n      \"SUBMIT_STAFF_REQUEST_APPLICATION\",\n      callback\n    );\n  });\n","title":"Confirm payment has been made for Staff Request Form","requiresIdentity":true,"__v":0,"standalone":false},{"_id":{"$objectID":"5a7981684d78641f8473f4b3"},"code":"let application = new this.libs.ExternalApplication(this);\napplication.extend = function(fn) {\n  this.context.debug(\"adding putme details to application\");\n  this.context.entityRepo.get(\n    this.domain.config.putmeApplicationClass,\n    { registrationNumber: this.context.args.registrationNumber },\n    { one: true },\n    (er, jambDetails) => {\n      if (er) return fn(er);\n      if (!jambDetails) return fn(new Error(\"Could not find Jamb Details\"));\n\n      this.context.debug(jambDetails);\n      this.context.args.jambDetails = jambDetails;\n\n      this.context.libs.getFeeFromFeePurpose.call(this.context,\"STAFF_REQUEST\", (er, fee) => {\n        if (er) return fn(er);\n\n        if (!fee.length) return fn(new Error(\"Cannot find any configured fee for this purpose\"));\n        fee = fee[0];\n        this.context.entityRepo.get(\n          this.domain.config.invoiceClass,\n          {\n            \"extra.registrationNumber\": this.context.args.registrationNumber,\n            feeId: fee._id\n          },\n          (er, invoices) => {\n            if (er) return fn(er);\n            if (!invoices.length) return fn(new Error(\"Could not find valid invoice for this application\"));\n\n            this.context.args.invoiceNumber = invoices[0].invoiceNumber;\n            return fn();\n          }\n        );\n      });\n    }\n  );\n};\napplication.register(\n  \"staffRequestApplicationClass\",\n  null,\n  [\n    function(application, cb) {\n      setImmediate(cb, null, [[\"STAFF_REQUEST_DETAILS\", application]]);\n    }\n  ],\n  callback\n);\n","title":"Submit staff request form","requiresIdentity":true,"__v":0,"uid":"SUBMIT_STAFF_REQUEST_FORM","standalone":false},{"_id":{"$objectID":"5a7af79a291af229dcb18e31"},"code":"let config = this.args.$appDomain.config;\nthis.entityRepo.get(config.invoiceClass, { invoiceNumber: this.args.invoiceNumber }, { one: true }, (er, invoice) => {\n  if (er) return callback(er);\n  if (!invoice) return callback(new Error(\"Couldnt find any invoice matching your request\"));\n  this.debug(invoice);\n  this.entityRepo.get(\n    config.putmeApplicationClass,\n    { registrationNumber: invoice.extra.registrationNumber },\n    { one: true },\n    (er, application) => {\n      if (er) return callback(er);\n      if (!application) return callback(new Error(\"Cannot find any PUTME application with that registration number\"));\n      this.debug(`putmeResultClass:${config.putmeResultClass}`);\n      this.entityRepo.get(config.putmeResultClass, { regNumb: application.registrationNumber }, { one: true }, (er, putme) => {\n        if (er) return callback(er);\n        if (!putme) return callback(new Error(\"Could not find Post UTME Result. Please confirm results have been uploaded\"));\n        \n        this.debug('found putme result');\n        this.debug(putme);\n\n        return callback(null, {\n          firstName: application.personalDetails.firstName,\n          registrationNumber:application.registrationNumber,\n          middleName: application.personalDetails.middleName,\n          surname: application.personalDetails.surname,\n          gender: application.personalDetails.gender,\n          utmeScore: application.jambDetails.totalScore,\n          aggregateScore: application.jambDetails.totalScore * 0.4 + putme.totalScore * 0.6\n        });\n      });\n    }\n  );\n});\n//\n","title":"Get Personal details/JAMB/Post UTME Scores","requiresIdentity":true,"standalone":false,"__v":0}]
